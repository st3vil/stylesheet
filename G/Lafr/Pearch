# proxy Search!!!!!!!!!
# this way for a J
R.t != "Pearch" and throw "notinR"
$Top = Ry&up;
Tops&JRom and Top = Topy&up
Rs&Inn = R;
$Search = me&Rsc,Ry&up,'^^Inn';
$upting = Searchs&_ting;
!upting and throw "^^Inn!_ting", Search
# < why is Searchs&do_permanence not always

# with of:w notifies via the Ghost of GhodigWap
$Ghodig = 4s&Ghodig;
Rs&Ghodigup = &QP{
    # from Ghodig/sub/...c&ready()
    # towards Qc&ready() via refresh
    # < many Q thing, many P thing...
    Qs&notsync = Qs&Want_Check = 1;
    Searchs&_ting(Q);
    Qs&P != P and ~>5 QP:
}
# per Q in a batch of updates (GhodigWay)
#  make elvis for Q's update
Rs&Qup = &QP{
    Rs&perma(1);
    # tell by the args if it emits me?
    #  and could get its own io
    ~>6 WayQup: Qc&of, Q.t
    Q.t == 'ruv' and G&way,Q.t,{me}
    me&elvis,R,'Qup',{wake:Top,Q:Q}
}
# drops R I cache, recompiling me.ruv
Rs&perma = &{
    each tw A.5.I.w.y.tw {
        ws&now = G&time + 3600;
        delete ws&makesI;
        delete ws&makesIw;
    }
}
# bind Q-uestion to r-eason
Rs&_ting = &Qr{
    !isC(Q) and throw "ting !C"
    # dispatch change, Q<->R:
    r and Qy&R = r
    
    $already = Qc&ready;
    if (already) {
        # use it if we are !ready now
        #  if T.non (eg me&way !cb) default to:
    }
    # out of time comeback
    Qc&ready = &CP{
        ~>5 new: C.t, Ps&dige
        $y = &{
            Rs&Qup(Q,P);
        };
        G&yl,5,y;
    }
    
    $s = upting(Q);
    $P = Qs&P;
    !P and ~>5 upting!P: Q.t
    !s and ~>5 upting!s: Q.t
    !s || !P and return 
    
    # as found things go by, listen them
    # c&of is containing, s&of is having
    if (ss&of == 'w' && !Ps&listened) {
        # GhodigWap subscribes w.t
        Ghodigy&subscribe(s);
        # finds us here:
        i $Ghodig/sub/#Q.t/#R.t:s
        # < hist crunch,
        #   the w < Ps pulling dialect < Qs using it
        # the last P, Q will work for now
        $r = me&Rsc,ya,'R';
        ac(ya,'Ps',P,"Q",Q);
        yas&R = R;
        #yas&P && yas&P != P and debugger
        yas&P = P;
        yac&ready = &w{
            each iP yas&Ps {
                $Q = ac(ya,'Ps',P,'Q');
                Rs&Ghodigup(Q,P)
            }
        };
        Ps&listened = 1;
    }
    # < use a new G&way that _tings
    #   its Wayc&chin is creating the sub!!
    # < Searches may trust upstream,
    return s
}
