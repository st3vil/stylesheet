# proxy Search!!
$Search = me&Rsc,R,'^^Inn';
$upting = Searchs&_ting;
Rs&Inn = R;
# with of:w notifies from
$Ghodig = 4s&Ghodig;
Rs&Ghodigup = &QP{
    # from a Ghodig/sub/...
    Ps&now = 1;
    # one Q randomly comes along,
    # the last one to depend on waypoll
    Qc&ready and ac(P,'readyingC',Q);
    debugger;
    Searchs&Pull_a(Q,P);
    # then...
}
# with knowings about !
$thisr = R;
Rs&_ting = &st{
    !isC(s) and throw "ting !C"
    t != null and throw "otherstuff"
    sc&ready = &CP{
        ~>5 new: C.t, Ps&dige
        $y = &{
            R.t != 'Wayout' and ~>6 Wayoutnot: R.t
            me&elvis,thisr,'tingtodo'
        };
        G&yl,5,y;
    }
    $re = upting(s);
    $Q = s;
    $P = Qs&P;
    !P and throw "upting!P";
    # c&of is containing, s&of is having
    if (Qc&of == 'w') {
        # Q recycles, property of the %ting
        ~>5 subscribe: Q.t
        if (!Qy&waypoll) {
            i $Ghodig/sub/#Q.t/#thisr.t:s
            $r = me&Rsc,ya,'R';
            r && r != thisr and throw "subuniq",r,thisr
            yas&R = thisr;
            yac&ready = &w{
                thisrs&Ghodigup(Q,P)
            }
            Qy&waypoll = ya;
        }
        # subscribe $gho/pub/$t/$R
        #  to 
    }
    # < use a new G&way that _tings
    #   its Wayc&chin is creating the sub
    # < Searches may trust upstream,
    return re
}



me&rollbs,R,'icount',0;
$ie = ++Rs&icount;
me&tsc,"!Valvio!lad",0,"G" .sc.fs = 23;
me&tsc,"!e!e!ee",ie,"p" .sc.fs = 20
$B = Gc&B;
$w = Bs&way;
me&tsc,"g-dige",ws&dige,'p';

n g  R %ting:w
#!!!!!!!!!!!!!!!!!!!
n a  R %ting:w
#!!!!!!!! !!!! !!!!!!
