# A J is an R that does a way as itself
# like an object is some data and some
#  code that knows about the data
=cut
# J%Pearch - plumbing updates -> elvis
Rs&Inn = me&Rom,R,'Pearch',{Pearch:1,task:'ruv'};

# retrospectively add dependencies
# for the I:ruv, J:Wayout, J:Pearch
#  we (only yet have|may continue using) it as w
#   via G&way (in A.5.I.w)
#   which GhodigWap happens to update as well
# without throwing async,
#  though we have no Qc&async handlers on these
T.asyncQs = [];
# for J%Wayout:
# args=~me happen out of time in Pearch%Qup()
me&t,R,{of:'wjs',args:'ar,me'},'ruv';
me&t,R,{of:'wjs',args:'ar,R'},'Wayout';
# for J%Pearch:
me&t,Rs&Inn,{of:'wjs',args:'ar,R'},'Pearch';
delete T.asyncQs;

#$c = G&peel,'Slei,ting:W,Gens,tingspot';

# J%Peace - the rest of it
$t = Rs&into || "";
me&tsc,"!Valve:"+t+"!",0,"G" .sc.fs = 23;
#~>6 valvolution:
me&Rom,R,'Peace',{Peace:1,task:'ruv'};