$me = 4c&me;
!me and throw "no me";
$io = me.io;

window.reverse = &s{ return s.slice().reverse() };

# hash stash, on t.sc[k]
window.ah = &tk{
    !isC(t) and throw "!C"
    $M = [... arguments].slice(2);
    isar(k) and $listend = 1; k = k[0]
    $h = t.sc[k] ||= {};
    while (M.length) {
        k = M.shift();
        M.length > 1 and h = h[k] ||= {}
        else {
            $re = h[k];
            if (listend) {
                $N = h[k] ||= [];
                $n = M.shift();
                !N.includes(n) and N.push(n)
                return N
            }
            else {
                h[k] = !M.length ? 1 : M.shift();
                return re;
            }
        }
    }
};
# setter of {names:keys} into X.names = k{e{y=s
# eg.
#   aha(R,'waitz')({tw:r.t,scgk:'tracting_good',r:r})
#
# < get between R better?
#   maybe do one big pile at the top,
#    each r able to enter as such,
#     perhaps using a template for "cares of r"
#     debugality (of elvising would do) wants to know
#     where the data came from
#      while there is expense to spare
#      brackdown sends hooks onto X.
#   then waigh for/into each r
#     triangling the hopes and dreams of the community
window.aha = &Rt{
    return &s{
        $args = [... arguments].slice(1);
        isst(s) and s = G&peel,s
        $path = [];
        $bits = [];
        each kv s {
            # (tw:C.t)
            path.push(k);
            # (co:1, $co)
            v == '1' && args.length and v = args.shift();
            bits.push(v);
        }
        bits = [ ... bits, ... args ];
        # refs mean the end
        # < doubling path so X.z = nodes here, X.$path = onward 
        # strings at the end must turn into keys
        # < counters
        isst(bits.slice(-1)[0]) and bits.push(1); path.push('isness');
        
        ah(R,t,path.join("_"), ... bits, ...args)
    };
};
# hash lookup, on hash (not C)
window.ahsk = &h{
    $M = [... arguments].slice(1);
    while (h && M.length) {
        h = h[M.shift()];
        !h and return
    }
    return h
};
# hashes are identical
window.heq = &sd{
    !hakd(s,d).length
};
# keys of differing values
window.hakd = &sd{
    $dif = {};
    each kv s {
        !hak(d,k) || d[k] != v and dif[k] = 1
    }
    each kv d {
        !hak(s,k) || s[k] != v and dif[k] = 1
    }
    $ks = [];
    each ko dif {
        ks.push(k)
    }
    return ks
};
#c array match
# if M, returns [not], puts M[matched]
#  eg N = arou(N,'acty',actyN) 
#    separates %acty to actyN from N
# else, returns [matched]
window.arou = &NyM{
    $matched = M || [];
    if (isst(y)) {
        $k = y;
        y = &n{ return n.sc[k] };
        if (k[0] == '!') {
            $cb = y;
            k = k.substr(1);
            y = &s{ return !cb(s) }
        }
    }
    if (M && !isar(M)) {
        # for an Nx.$k=N tape splitter
        !k and throw "dunno Nx k",M
        matched = M[k] ||= []
    }
    $not = [];
    each in N {
        y(n) ? matched.push(n) : not.push(n)
    }
    return M ? not : matched
};
# match N into one of several groups
window.aroh = &Nc{
    c ||= {};
    isst(c) and c = G&peel,c
    $h = {};
    each kn c {
        # matcher n is &s{} or a scgk
        n == '1' and n = k
        $M = [];
        N = arou(N,k,M);
        h[k] = M
    }
    h.N = N;
    return h
}

# interpret cv='','o2','32'
window.scaf = &ov,{
    !ov and return 0
    # ov=o2 -> 0.02
    if (isst(ov) && ov.substr(0,1) == 'o')
        ov = 1*('0.'+ov).replace(/o/g,'0')
    # ov=32 -> 0.32
    ov = sca(ov);
    return ov
};
# to make eg winding back the ov undoable
#  non-transactioney, keeps change if k unhad before
window.extemp = &cs{
    $set = {};
    each kv s {
        hak(c,k) and set[k] = c[k]
    }
    return &{
        each kv set {
            c[k] = set[k]
        }
    }
};

#c C-ish
# < G&C, babz: = C yadda @3
#   and to parse args for eg opeolo
#   has a lot to do with:
window.num = &s{ return s*1 == s }; # NaN != NaN, typeof NaN == 'number'
window.isnu = &s{ return typeof s == 'number' };
window.isfu = &s{ return typeof s == 'function' };
window.isst = &s{ return typeof s == 'string' };
window.isar = &s{ return s && s.constructor == Array };
window.isha = &s{ return s && typeof s == 'object' && !isC(s) };
window.isob = &s{ return s && typeof s == 'object' };
window.isR = &s{ return isC(s) && sy&R == s };
window.Cye = &s{
    s = G&Cye,s;
    s.y = {cv:s.y.cv};
    delete ss&z;
    return s
};
# make fraction of 1
window.sca = &s{
    s *= 1;
    while (s >= 1) { s = s / 10 }
    return s;
};
# round to decimal places
window.dec = &s,precision{
    null == precision and precision = 4;
    $mul = '1e'+precision;
    return (s * mul).toFixed() / mul
};
# ac() also replacing nc&b with n
#  as Cupon %down=[], recycled selves
window.bac = &Rkr{
    $N = R.sc[k] ||= [];
    $b = rc&b;
    if (b) {
        $bi = N.indexOf(b);
        bi >= 0 and return N[bi] = r
    }
    $ni = N.indexOf(b);
    ni >= 0 and return N[ni] = r
    N.push(r)
};

# read spacey t, or insert C = y()
window.fio = &qty{
    !isC(q) and throw "NotC"
    qs&z ||= [];
    qy&tw ||= {};
    y != null && y == 0 and $readonly = 1
    y == '9' and $deletes = 1; y = null
    typeof t == 'object' and $obj = y = t; t = null
    $ar = y && y.constructor == Array;
    y && t == null and t = ar ? y [0] : y.t
    y != null && y == 0 and $readonly = 1
    
    $s = qy&tw[t];
    # allow removing from qs&z
    #  without tw if deleting given C
    $si = obj && deletes ? qs&z.indexOf(obj)
        : s && qs&z.indexOf(s);
    si < 0 and s = null
    if (deletes) {
        si < 0 and return
        qs&z.splice(si,1);
        delete qy&tw[t];
        return
    }
    if (!s && !readonly) {
        s = y ? ar ? G&Cye,y : y : G&Cye,[t,1];
        qs&z.push(s);
        qy&tw[t] = s;
    }
    s and ss&z ||= [];
    return s
};
# fio() setting y&up, saying c.el
# < more than one level
# < io pipes A to A
# making ny&up=s on el=1
# < replace Yingio with fiu
me.fiu = &acgtstc{
    c ||= {};
    isnu(c) and c = {el:c}
    # many
    t == '' and return me&ioty,s,[''],['']
    # read only
    $n = fio(s,t,0);
    # 7 must be there, 8 read only
    c.el == 7 && !n and throw "No "+s.t+"/"+t
    c.el == 8 || c.el == 7 and return n
    !n and c.el ||= 1
    else {
        # if we were placing a different object
        isob(t) && n != t and c.el = 1
        # remove the one we found
        c.el == 1 || c.el == 9 and fio(s,t,9)
    }
    if (c.el == 1) {
        $n = fio(s,t);
        # inputting sets y&up
        ny&up = s
    }
    return n
};
# C usu sort by cv,t
window.tvsortz = &z{
    z.sort(&ab{
        return (ay&cv||0)*1-(by&cv||0)*1
            || ('' + a.t).localeCompare(b.t)
    });
    return z
}
window.vsortz = &z{
    z.sort(&ab{
        return (ay&cv||0)*1-(by&cv||0)*1
    });
    return z
}

