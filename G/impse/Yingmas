# SCA revival
# R%Ying becomes
me.YingA = &acgt{ return [
    # see %Ying in Sch_emas
]};
=pod conventionae Yongus
 
  Yong,$s:Steps,{sc},ov
    has Stepsy&Y to resume
  Yong,$s:SC,$t=Steps,{sc},ov
    is a difft, Ying Steps@o1 to create/find s
     giving it this new Y
 either then:
  sy&R!future - Ying @o2, resyncing new R
    saving higher cv/ov until Steps does Yc&resumeov()
 and:
  Ying up to that ov
 
=cut

// Yingf
    # interpret cv='','o2','32'
    window.scaf = &ov,{
        !ov and return 0
        # ov=o2 -> 0.02
        if (isst(ov) && ov.substr(0,1) == 'o')
            ov = 1*('0.'+ov).replace(/o/g,'0')
        # ov=32 -> 0.32
        ov = sca(ov);
        return ov
    };
    # to make eg winding back the ov undoable
    #  non-transactioney, keeps change if k unhad before
    window.extemp = &cs{
        $set = {};
        each kv s {
            hak(c,k) and set[k] = c[k]
        }
        return &{
            each kv set {
                c[k] = set[k]
            }
        }
    };
    
    me.Yingmind ||= {};
    # get I = me.Yingminds.$t ||= me.Yingmind.$t
    me.Yingminds ||= {};
    me.Yingmindo = &acgtt{
        !t and throw "SCmind!t"
        $N = me.Yingminds[t];
        N and return N
        !me.Yingmind[t] and throw "SCmind!t:"+t
        $N = me.Yingmind[t](A,C,G,T);
        N = N.map(n => Cye(n));
        N.map(n => n.c = {s:n.c})
        me.Yingminds[t] = N;
        return N
    };
    
// Yingio
    # fio() moded for SC
    # < more than one level
    # < io pipes A to A
    # making ny&up=s on el=1
    me.Yingio = &acgtstc{
        c ||= {};
        isnu(c) and c = {el:c}
        # many
        t == '' and return me&ioty,s,[''],['']
        # read only
        $n = fio(s,t,0);
        # 7 must be there, 8 read only
        c.el == 7 && !n and throw "No "+s.t+"/"+t
        c.el == 8 || c.el == 7 and return n
        !n and c.el ||= 1
        else {
            # if we were placing a different object
            isob(t) && n != t and c.el = 1
            # remove the one we found
            c.el == 1 || c.el == 9 and fio(s,t,9)
        }
        if (c.el == 1) {
            $n = fio(s,t);
            # inputting sets y&up
            ny&up = s
        }
        return n
    };

// Yong - use sy&Y link to Ying $s**
    # me&Yong R $s(y&Y?) $mind? {Y.sc intro} $ov||=9 - 
    #  $mind on est. might return forked Y/Y:$mind
    me.Yong = &acgtRst,sc,ov{
        isob(t) and ov = sc; sc = t; t = null
        ov = scaf(ov) || 0.9;
        
        # s may be inside SC
        # < io: optimise SC**/$s knowing sy&up
        # < slope sy&up and know stuff, part of wider Aing
        $dive = me.cby(s);
        $SC = dive[0];
        $Y = sy&Y;
        
        $began = Y && Yc&cv || 0;
        $rem = "";
        if (t) {
            rem += " +Y:"+t;
            # o1 with new Y:Yc&t, create/find s for itself
            #   starting from the s
            $Y = me&Ying,R,s,{t:t,ov:0.01},sc,SC;
            # intro Yong(...sc) once, any of these places
            sc = {};
            s = Ys&returns;
            !s and throw t+"@01 !returns"
        }
        if (sy&R && me&yfuture,sy&R != sy&R) {
            # o2 per sy&R checks Y into lowov
            #  join macro A (eg R)
            #   so it can give/take grounds there
            $c = {};
            c.cv = c.ov = 0.02;
            # saving higher cv/ov until Y is ready
            Yc&resumeov = extemp(Y.c,c);
            c.Y = Y;
            # doing o2 even if cv==o2
            # < rename incv=ov, for iterating same t
            c.ashocks = 1;
            $Y = me&Ying,R,s,c,sc,SC;
            sc = {};
            rem += " ~R"
        }
        # what to do
        $c = {ov};
        if (!Y) {
            # begins itself, mind Yc&t = s.t
            c.t = s.t;
            rem += " s+Y:"+c.t;
        }
        else {
            c.Y = Y
        }
        !Y || Yc&cv < ov and Y = me&Ying,R,s,c,sc,SC
        
        $ind = dive.map(s=>s.t).join('/');
        SCc&verbose and ~>6 Yingd: ind, began, Yc&cv, ov, rem, ki(c)
        
        $re = Ys&returns || (Yc&M||[])[0];
        rey&Y != Y and throw "returning !yY=Y"
        return re
    };
    
    
// Ying - mind (Yc&N) over matter (Yc&M)
    # as a way to find C about how to A
    # may c.t=newmind
    # may !c.Y, is created
    # sets sy&Y=Y for Yc&M/*
    #  and on itself if it returns so from 0.01
    me.Ying = &acgtRsc,sc,SC{
        # incv allows doing Ycv==tcv
        $incv = delete c.incv;
        # Y = c.Y explicitly, probably is sy&Y
        $Y = delete c.Y;
        if (!Y) {
            # init happens this way, from Yong $t
            # 
            # could Yy&up = sy&Y before it reinits?
            Y = Cye(['Y:'+c.t,'']);
        }
        # A:$t cv-ov are life + time to be
        # < see me&tempwind undoing some of this, 
        ex(Y.c,c);
        Yc&ov and Yc&ov = sca(Yc&ov)
        Yc&cv and Yc&cv = sca(Yc&cv)
        # its quest for a specific etc
        ex(Y.sc,sc);
        # of this linguistic actuation linearity
        Yc&N = me&Yingmindo,Yc&t;
        $il = 30;
        while (1) {
            il-- < 0 and throw "ManyYing"
            # < near Yc&N being changed while Yinging
            $ci = t ? Yc&N.indexOf(t) : -1;
            $t = Yc&N[ci+1];
            !t and break
            ty&cv > Yc&ov and break
            ty&cv <= Yc&cv && incv != ty&cv and continue
            # usu so many at == cv all happen
            incv = ty&cv;
            # <=@o2 iterate themselves
            $M = ty&cv > 0.02 && Yc&M || [s];
            each in M {
                # t act, n ground
                # can't always trust whatever these might be:
                #$r = ny&R || sy&R || Cy&R;
                # R is from the Ying above (R%SC)
                # < elabourate argumentation
                sc&verbose and ~>4 Ying: s.t, t.t, t.y.cv, n.t, Yc&ov
                $re = tc&s(A,C,G,T,R,Y,n,SC);
                Yc&cv = ty&cv;
                if (ty&cv == 0.01) {
                    # Y claims what o1 returns
                    #  or $s if non-forking o1
                    re ||= Ys&returns || s;
                    !isC(re) and throw "o1ret!C"
                    # < may switch to it?
                    rey&Y and rey&oldY = rey&Y
                    rey&Y = Y;
                    Ys&returns ||= re;
                    s = re;
                }
            }
        }
        # so Y looks @2, if last ty&cv < 2
        Yc&cv = Yc&ov;
        Yc&M and Yc&M.map(s => sy&Y = Y)
        return Y
    };

# Y:Ying - the top
me.Yingmind.Ying = &acgt{ return [
    # @1 figure out where things are at every so often
    # > misuse of 0.01 to declare functions
    # @o1 discerns itself from SC, which it doesn't
    
    ['Ying',0.01,&acgtRYs,SC{
        # steps etc wai %wou
        $woudef = &c{
            return me&waidef,c,'',{k:'wou'};
        };
        SCy&waia = &jc{
            !j and return &{}
            jy&R and j = jy&R
            c = woudef(c);
            # G already @7, use the one of it
            js&Gracto and delete c.b; c.gh = 'gh'
            return me&waier,j,c || &{}
        };
        SCy&tip = &jc{
            c = woudef(c);
            return me&brackdown,j,c
        };
        ~>3 Ying forks:
    },'ift,D'],

    # @02 when R%SC relives,
    #  ~SCy&R winds SCy&Y back to here
    ['on',0.02,&acgtRYs,SC{
        s != SC and throw "should be the one"
        sy&R = R;
    },'ift,D'],

    #  mix Schema/$h/$p into Steps/$p
    # < Schema knowing export to Steps/$p
    #   or sharing as $p:step, and Steps inhales :steps
    ['Schema to Steps',0.021,&acgtRYs,SC{
        $Sch = me&Yingio,SC,'Schema',7;
        Schc&compiled and return
        $N = [];
        me&Yingio,Sch,'' .map(&h{
            me&Yingio,h,'' .map(p => N.push(p))
        });
        tvsortz(N);
        # start new Steps
        #   and imports new Steps/$p
        s = Ys&Steps = me&Yong,R,SC,'Steps',{adoptees:N},'o2';
        Schc&compiled = 1;
    },'ift,D'],

    # @023 Steps per R%SC
    ['Steps per R',0.023,&acgtRYs,SC{
        # covered by Schema always recompiling
        me&Yong,R,Ys&Steps,{},'o2';
    },'ift,D'],

    # @03 Steps per walk through Y:SC
    #   pull up a map for this Aing,
    ['Steps per walk',0.03,&acgtRYs,SC{
        me&Yong,R,Ys&Steps,{},'o3';
    },'ift,D'],

    # @6 Steps take walk through Y:Steps
    #   pull up a map for this Aing,
    ['Steps walk',0.6,&acgtRYs,SC{
        me&Yong,R,Ys&Steps,{},9;
    },'ift,D'],
]};

# Y:Steps
me.Yingmind.Steps = &acgt{ return [
    # $SC/$s:Steps/$p:step
    # @01 downloading from Ys&N (Schema/*/$p)
    # @02 having r and its s
    # @03 runtime oncily
    #   grasps/feeds the whims of the steps
        # Y:Steps per current walk around
        # < Y:Walk - delivering the goods or not this dome
        #   carrying to the future what matters
        #   decides if it's done or to keep going around
        #     like c&e's T.pos/T.el
        #   if we could travel R:Steps/$p y&R at will
        #     which is deleteRbitX + Re synthesis from tunneling
        #    we could Walk here many times to mutate solutions

    #   
    # for r that might be any of (p,r,s),
    #   find the one we want
    # eg r=p||s, uses yR
    
        # compulsive recreate SC/Y:Steps, give z of Ys&N
        ['Steps',0.01,&acgtRYs,SC{
            s != SC and throw "s!=SC"
            $s = me&Yingio,s,'Steps',{el:1,Y:Y};
            # a&N[$p:steps flow into @02
            $N = Ys&adoptees
            each ip Ys&adoptees {
                # < slep here
                me&Yingio,s,p
            }
            ~>3 Steps fork:
            return s
        },'ift,D'],
        
        # per R%SC:
        # @02 as Y:Steps each $p:step has r which has s
        ['steps are',0.02,&acgtRYs,SC{
            sy&R = R;
            # reverse: bal shall adjust Rs&z to flow upwards
            ss&z.slice().reverse().map(&p{
                $n = py&Schema_step;
                # bal inputs to ups%ball, unless %eph
                ns&supr && !ns&tings && !ns&Pavings and ns&eph = 1
                ps&issleep == R and return
                # n.sc -> r.sc
                $r = me&bal,n.t,n.sc;
                $s = rc&s;
                # n.c -> s.sc
                ex(s.sc,n.c);
                py&s = s;
                sy&p = p;
                # < is b
                py&R = sy&R = r;
            });
            # goes on as each SC/Steps/$p
            SCs&steps = Yc&M = ss&z;
            # GOING
            Rs&Lastly = ss&z.slice().pop();
        },'ift,D'],
        
        # still per R%SC:
        # @021 each Steps/(p,r,s) attr init
        ['on',0.021,&acgtRYp,SC{
            ps&issleep == R and return
            $r = py&R;
            $s = py&s;
            
            rs&tings and ss&trac = 'ting'
            #ss&Pavings and rs&Gracto = rs&Pavings = 1
            # prefer specific tw, altering supr-isms
            # they seem to have storable ambitions
            # eg including to /W/ ways to use
            #   With/$trick/$hack
            #    + $hack = $trick trick
            #   and SCinway
            ss&tw and rs&tw = ss&tw
            #  allowing calm isolated spacewalks
            rs&gently && rs&Gracto and rs&tw = 1
            
            # enough to have Rs&C, Rc&b, etc
            me&Ring,r,{und:r,ov:0.28};
            
            rs&Pavings and ps&priority = 1
            # prevent early %ball etc until we Ring und:it later
            # or grounds might happen too early to %supr@291
            #  works anyway if you don't bewind until here
            #   otherwise the bewind will wait forever
            #rs&supr and rs&nextlifesc = {nottilund:1}
        },'ift,D'],
        
        # @03 each Steps/(p,r,s) wake up, have features
        #  may be different, may be time to something!
        ['on',0.03,&acgtRYp,SC{
            ps&issleep == R and return
            $r = py&R;
            
            # p's current walk around Y:Steps
            $Ob = py&O;
            $O = py&O = Cye([p.t,py&cv]);
            Ob and Oc&b = Ob; delete Obc&b
            
            !rs&supr and return
            
            # < know if this is to sleep, and
            # < avoid suprising to it etc
            #   do it more elvisily
            # so we can suprise anywhere along the chain:
            me&Ring,R,{und:r,ov:0.304};
            
            # %supr puts sy&R, Steps@02 puts {s,p}y&R
            me&yfuture,r,R != r and throw r.t+" yfuted"

            # each step/* is sy&top, has pool sy&N
            #  iterate through here to get:
            #   (j,s) - all %supr things inside/including $p
            # < climb however, refs limited to those in sy&N
            py&nodes = &y{
                me&ioty,r,'ball' .map(&j{
                    me&yfuture,j,R != j and throw j.t+" yfuted"
                    js&folder and return
                    $s = jc&s;
                    # must be used on %supr, or anywhere y&N is?
                    !sy&supr and throw "wandering"
                    sy&N .map(s => y(sy&R,s))
                })
            };
            
            # set by %supr@291
            # also to init from suprised
            !rs&Gracto and py&nodes(&js{ me&persis,s,'y','R',j })
        },'ift,D'],
    /// Steps 6
        # > rs&Gracto 3: Rings r ov=58
        # steps happen in order
        ['Steps',0.6,&acgtRYp,SC{
            ps&issleep == R and return
            $r = py&R;
            rs&sleeping and return
            #~>3 onStep6: p.t
            # Steps
            $S = Ys&returns;
            $i = Yc&M.indexOf(p);
            i < 0 and throw "nop"
            # $p:step's neighbours, earlier and next
            $l = Yc&M[i-1];
            $n = Yc&M[i+1];
            
            # being three states at once
            # la has happened
            $la = SCy&waia(l);
            $ra = SCy&waia(p,{b:1});
            $na = SCy&waia(n,{b:1});
            
            $g = SCy&tip(r);
            $leaves = &jn{
                if (!n) {
                    me&mtsc,g,"nonext";
                    # at the end, zy&l?
                    return
                }
                ny&R and n = ny&R
                
                ~>5 ready: j.t, '->', n.t
                rs&gently && !me&rolltog,j,{may:'ready>',tsc:'y',once:1} and return
                # builds j** into n/
                me&suprise,j,n
            };
            
            # < Y:step could take it from here
            #   to step 12222112232323343456 in one R%SC
            #   usually we have enough leash to do such runs
            #  and to attach the Gractoids more sidily:
            
            if (rs&Gracto) {
                # G already @7, conclude
                #!l and me&mtsc,g,"noprev"
                $N = ra('ready','r');
                each ij N {
                    # < apply/contest/reverse That change
                    leaves(j,n);
                }
                #!N || N.length < me&ioty,r .length and anyGbusy = 1
                # SCfcommit applies change/Cuploadism as they finish
                return
            }
            
            !py&nodes and return me&nu,"Bort-!nodes",p
            py&nodes(&js{
                # y&l change already fatal

                # waigh:wou from last time, feedback loop
                #   experience -> notion, notion -> etc
                jy&sa = SCy&waia(j,{b:1});

                # wai:wou this time enterer
                jy&ha = aha(j,'wou');

                # differ before <-> now
                # < caching sa/za, then:
                #   < versioned X, re-waigh if ha since da
                jy&da = &loose,tight,c{
                    return 1; # too-caching wough
                    c ||= {};
                    # what you want/specifically
                    isst(loose) and loose = G&peel,loose
                    isst(tight) and tight = G&peel,tight
                    $sa = SCy&waia(j,ex({b:1},c));
                    $za = SCy&waia(j,ex({},c));
                    !(sa && za) and return
                    $was = sa(loose);
                    $now = za(loose);
                    # gets zu grounding into j
                    $C = js&C;
                    me&zu,'da',{was,now,tight};
                    $cha = {};
                    each kv tight {
                        # k - the column in either
                        # v - change type/reaction
                        #  ref, slep, in/decrease, growth...
                    }
                    return cha
                };
            });

            # @31 domecheck, from!
            me&Ring,r,{und:r,ov:0.31};

            # wouey is wough before 32
            # < assume everything in 31 sleeps 32
            #waia(r,{gh:'ey'});
            #waia(r,{gh:'ey',b:1});

            me&Ring,r,{und:r,ov:0.32};
            
            
            # wough is finally here!
            $za = SCy&waia(r);
            py&nodes(&js{
                # < insist ready is the first column
                #   so we can simply js&wou.*.ready
                $ja = SCy&waia(j,{gh:'ad'});
                !ja('ready') and return
                # j%wou..ready travel on
                leaves(j,n);
                
                # alphabet layercake
                # all our decisions of how are joined
                #  into an over-realm, a computed individual's unity
                #  so decisions that can't be made by either hand
                #  can be made by that mind
                # and wording that so it applies to force around a structure
                #  the decision being to break or not
                
                # < subtype step:Seq's ready to -> step:Compiling
                #   same way step:Compiling would then -> That..G
                #   That..G wants all parents of the things changing
                # < or step:Apply after seq,
                #   or is it This..G?

            });
            me&walls,g,'b:3.3h9';
        },'ift,D'],
        
        # and again to wake things generated into other steps
        #  ie from inside:r, out to where Ring isn't
        ['Steps may other',0.67,&acgtRYp,SC{
            ps&issleep == R and return
            $r = py&R;
            me&Ring,r,{und:r,ov:0.31};
        },'ift,D'],
        
        # and again to wake things generated
        ['Trip report',0.7,&acgtRYp,SC{
            ps&issleep == R and return
            $r = py&R;
            rs&sleeping and return
            py&nodes && py&nodes(&js{
                js&wough and throw "Hadwough: "+j.t
                $g = SCy&tip(j);
                me&walls,g,'b:2.2';
            });
        },'ift,D'],
]};
