# get from R to SCA
#  SCA needs to be above what's awaking,
#   but then can do many reactions in a single self
=pod
 for groups of language to find their completion
 Know->That was an I mixer,
  becomes one of many things we could do with W
  Place for generating to e
  
  < turn into
 Know $W used, versions in here
 Travel $W using: $W used, why/how
 That $W using
  # want to hotwire w/I it uses
  #  to implant me&T hooks etc

Yingwhen
 what sense we arrive to now
 usu tunneling to:
 Ying/Yingu
  < no &Ying
 Ying
  will have a Schema update every time,
  < Ying/$p%onlyish ($p/*%sleeping)
  if not tunneling,
  < a loose wave of attention,
    do 100ms work, etc.
    casually refreshing around:
     $R/$p/(*/*), $R/($p/*), ($R/$p)
   
 Ying/$p%sleeping
  if for $p/**
 Ying/$p
  directly, probably following %%eto:$p
  < Ying/$p%onlyish ($p/*%sleeping)
    once Ying has begun,
    to focus attention at but not into a step
  Ying/$p%onlyish: ,
   and 
 Ying/$p/**

$p%onlyish
  for %Peace to give $p/*%sleeping
  

=cut
me.Ying_begins = &acgtR{
    # see what's tunneled
    $N = me&ioty,R;
    
    N.filter(n => n.t == 'Travel').map(&n{
        4s&Vil = n;
    });
    
    $sleeping = [];
    $ball = [];
    $awake = [];
    if (N.length) {
        # mixed with recycling
        N = arou(N,&n{ return Rc&N.includes(n) },awake);
        N = arou(N,&n{ return ns&ball },ball);
        $tunneling = Rs&tunneling;
        !tunneling and throw "early !tun"
        # by the sleeping since we know r -> p
        sleeping = N
    }

    ~>3 balls: ball.map(n => n.t).join(',')
    $blab = awake.map(n => n.t + (ns&sleeping ? "%sleeping" : "")).join(',');
    ~>3 awake: blab
    
    ~>3 sleeping: sleeping.map(n => n.t).join(',')
};
me.Sch_ema = &acgt{ return [
    ['Yingu','7',&acgtRs{
        me&reaw,R,'Yingu';
        
        me&tsc,"%Yingu",0,'B' .sc.dis = 1;
        
        $Y = Rs&Ace;
        $f = Y.4[1];
        $Ying = fs&Ying;
        me&nu,'Ying',Ying;
        !fs&Outlog and return
        $la = fs&Outlog.slice(-5);
        each il la {
            $k = fs&Outlog.indexOf(l);
            $g = me&opeolo,k,{label:{walls:'bg'}};
            gs&dis = 1;
            each in l {
                me&opeKm,g,n.t
            }
        }
        me&nu,'te',g
        me&nu,'V',4s&Vil||'non'
    },'ift,D'],

    # schemas employable from s/s%SC
    ['SCinto','292',&acgtRs{
        # look for R/r(%SC=ForThee
        #  becomes R%ForThee%SupplyChai
        $g = me&opeolo,'SCinto';
        me&ioty,s,'SC','' .map(&z{
            $t = zs&SC;
            $c = gy&can('m','SC-able');
            $n = cy&can('n',t,{label:1});
            # is persisted by %nextlifesc
            !ns&ope and delete Rs&Ying
            else {
                # switch on the %$schema
                #  will create %Ying here
                R.sc[t] = 1;
                $ml = cy&label;
                mls&fs = 6;
            }
        });
    },'ift,D'],
    
  // R%Ying
    # early, no schema, only steps that are tunneled
    ['sleeping+Ying','296',&acgtRs{
        me&Ying_begins,R;
        $SC = me&rollbsc,R,'Ying';
        me&Yong,R,SC,{},9;
    },'ift,D'],
    
    # Ying normally after R%Peace and schemas load 
    ['Ying','296',&acgtRs{
        me&Ying_begins,R;
        T.Mw = 'SC';
        Rs&nonDescribable = '%Ying';
        me&reaw,R,'Ying';
        $SC = me&rollbsc,R,'Ying';
        # < feedback, early intro tunneling
        ah(R,'nextlifesc','Ying',SC);
        # steps congealed
        $s = me&Yong,R,SC,{},9;

        s&boc = 588;
    },'ift,D'],
// %supr
    
    # the %eph and its /** become %supr
    #  and %$sy&supr - suprise puts that
    ['ball+supr','291',&acgtRs{
        sy&R = R;
        # children get %supr in time to get here
        ac(R,'inheritsc','supr');
        # our %ball/%fix appear after @4
        Rs&fixatfour = 1;
        # %supr only becomes %$supr if a node:
        #  me&suprise mostly just transfers it
        #   to sy&supr on entering a node
        sy&supr and R.sc[sy&supr] = 1
        # see Y:Steps about %nextlifesc %nottilund
    },'ift,D'],
]};
me.Yingmind ||= {};
me.Yingmind.Schema = &acgt{ return [
    # SC/Schema/Y:$src/$step+ posit SC/Steps/$step+
    #  every time R%Ying wakes
    # < slep @2
    # %*T pronounces how it will be, arranging for SCing:
    # A:SC@1 %SupplyChai=C macro laterer
    #  A:Schema@1 %SCh/$t=C micro schema
    #   ...gets finished:
    #  A:Schema@2 can slep & tell macro
    #   @3 with each other, notice late joiners
    #   @4 patterns emerge
    #   @5 decide how to change the game in progress
    #   @6 Ret (via bal) the step
    # SCing:
    # A:SC@2 inits
    #  A:Schema@6 may be moved in here,
    #   to avoid it Ringing outside the SCing

    # %KnowThat forks SC/Schema/t=KnowThat
    ['+Schema',0.01,&acgtRYs,SC{
        # organise SC's Ys as of/t:
        $Sch = me&Yingio,SC,'Schema';
        $t = Ys&t;
        !t and throw "give t"
        # el:1 recreates, string t makes spacer
        #  and sets sy&Y = Y
        $s = me&Yingio,Sch,t,{el:1,Y:Y};
        # drop cache # < wake Y:Schema if diff
        delete Schc&compiled;
        # makes the subject of iteration, sets sy&Y=Y
        return s
    },'ift,D'],
    # day, display zone
    ['on',0.02,&acgtRYs,SC{
        sy&R = R;
        # nowhere:
        $g = sy&g = me&opeolo,s.t,{walls:'b:2.2h6',label:{walls:'bg'}};
        Rc&brackuiet = 1;
        gy&can('ope',&{ Rc&brackuiet = 0 });
    },'ift,D'],
    # i $s:schema/$step o T.nN/*:step
    # steps adopted from recent: n ...
    ['steps adopted',0.11,&acgtRYs,SC{
        $N = Ys&N;
        !N and throw "nosteps"
        each in N {
            $p = fio(s,[n.t,n.y.cv||1]);
            py&Schema_step and throw "multi schema step", n
            py&Schema_step = n;
        }
    },'ift,D'],
]};
