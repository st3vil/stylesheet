# Flanges!

me.SCones = &acgt{ return [
    # vast oldness, Peace
    ... me&ruv ,
    # W etc relatives
    ... me&Sch_Pavings ,
    ... me&Sch_ema ,
    
]};

=pod reintroduce MindInto
 GONE is %ting, %tracting
  That%Gracto makes:
   > That/tings%folder%eph for a W/G counterpartistry
   < That/**%Pave gently, a %Zave that doesnt expect here
     as if it was That/**%W
 < %Pave slow thing puller, spreads implying ting configuration:
  > Cloadsc writes stuff up/down
    < C able to deduce impliables
  < That%directory=ForThe/That will be implied by That%J
  Know/**%directory=else/ward are else/ward/$t
  <   $t%director childrens implied %directory += $t
  %Search for %species (is in the $t)
   < local %Search host
  
  me&bal fills in to/from the schema:
   steps adopt/make our R/*%balls
    or %ball%eph for floating steps, not in Rc&s
  < s&J see 'resolve through JRom'
    which SCA would get some extra controls on,
     doing many tiny Rings etc.
     needs a self-awareness module,
      combined with slomo elvising
      see 'cant always trust whatever these might be'


  < _ting c&ready -> Qup the first time !?
    < comeback to %waits etc
  SCA:
   < logs/maps/rules elvising going in
   < so $r can be paused
   < import
  < SCA

=cut

me.Sch_Pavings = &acgt{ return [
    ['Abodo',0.7,&acgtRs{
        delete s&bgi;
    },'ift,D'],
     ['Peace',0.7,&acgtRs{
         me&tsc,"PEace",0,'g'
         s&hue ||= 30;
     },'ift,D'],
# Paving 5
    ['Paving',0.5,&acgtRs{
        # waits for each Pave,
        #  draws clues together
        each ir Rs&Zaving {
            rs&waits and me&waits,'...'
            me&tsc,"Haveth:"+rs&species
        }
    },'ift,D'],
    ['KnowThee','304',&acgtRs{
        $h = me&SChema,R,'KnowThee',{};
        n Know 1  %bri:0.7,Pavings
        n Compiling 3  %hue:70,supr:Comal
        n Seq 5  %hue:110,supr:Comste,Omplateau
        n That 7  %Pavings

        hy&domed()
    },'ift,D'],
// Pavings 3{
    # < timing: after/inside ^%MindInto->%SupplyChai @305
    #    which should delay children while it sets up
    #   then Y:SupplyChai: Steps walk @6
    #     which Y:Steps: Gracto @3 Rings in
    ['Pavings',0.306,&acgtRs{
        me&tsc,'Pavings';
        me&reaw,R,'Pavings';
        #return;
        # borrow %Paving params
        me&adherePaving,R,R;
        # to give on to %Paving
        me&inherePaving,R;
        
        $r = me&nu,'Pavings',R;
        me&Ring,R,{und:r,ov:0.58}
    },'ift,D'],
    &{
        # inhere
        me.inherePaving = &acgtR{
            me&ioty,R,'ball' .map(&r{
                rs&Paving = 1;
                me&adherePaving,R,r;
            })
        };
        # adhere eg r%dir = s%dir || R%dir
        me.adherePaving = &acgtRr{
            $s = Rc&s;
            $z = rc&s;
            zs&directory and zs&directory = zs&directory.replace(/\/$/,'')
            ['directory'].map(&k{
                # each of any params that matter
                #  on s when not as inherited from R
                $is = hak(z.sc,k) ? z.sc[k] : R.sc[k];
                # and eg. %directory='' leaves
                is and r.sc[k] = is
            })
        };
    },
    # %Paving splits into species
    ['Paving',0.36,&acgtRs{
        $of = Rs&Paving;
        of == 1 and of = 'W'
        me&reaw,R,'Paving,directory';
        # see if there's a HEAD-type method for this Qc&of
        $M = [];
        if (of == 'W') {
            m W\.5 2  %species:5
            Rs&fully &&
                m $of 1
        }
        else {
            m $of 1  
        }
        each in M {
            n.t = s.t+" Paves "+n.t;
            # Rs&* and rs&* -> Qc&*, Qc&of = %Pave
            ns&Pave ||= of;
            nc&R = 1;
            n $n
        }
    },'ift,D'],
    
    # %Paves collect a species
    ['Pave','291',&acgtRs{
        $p = Ry&up;
        $s = pc&s;
        # since Zaving@294, reuse foldy thing
        ah(p,'Zaving',Rs&Pave,R);
        # similar to %Zave,
        #  G&t,Q directly, no %Saveting
        #  no %Here
        #   until download+decode
        #   or a write is proposed
        #   or our cache (dige/versiona) could go there
        
        $Q = me&rollbsc,R,'Q';
        Q.t = s.t;
        Qc&of = 'W';
        Qc&async = &{};
        Qc&ready = &CP{};
        ['directory','species'].map(&k{
            $is = R.sc[k] || p.sc[k];
            is and Q.c[k] = is
            else { delete Q.c[k] }
        });
        # compile to $t for Search
        Qc&directory and Q.t = Qc&directory+'/'+Q.t
        Qc&species and Q.t = Q.t+'/'+Qc&species
        # and for humans
        n of 101 $s:Qc&of %hs:348,fs:9
        Qc&directory &&
        n directory 102 $s:Qc&directory %fs:8,hs:194
        n t 11 $s:s.t %hs:348
        Qc&species &&
        n species 112 $s:Qc&species %fs:8,hs:157
        
        
        # Q refinds P each G&t
        $w = me&t,R,Q;
        # per most of this besides s, el + hooks
        #me&nu,Q.t,Q.c;
        
        !Qs&ready and return me&waits,'!ready','...'
        # $w may wander off, usu clones into %Gens%self
        # < following P into the future (%Differ)
        
        n el 13 $s:Qc&el %hs:348,fs:9
        
        me&rolltog,R,{maydo:'Q'} &&
            me&zu,'Q',Q;
        
        Qc&s && me&rolltog,R,{maydo:'s'} &&
            n s  $s:Qc&s %R:ball
        
        # have the thing, readyonly, copied from Pc&s
        # < Q can Qs&Want_Decode for itself
        Qc&s and Rc&s = Qc&s
        
        # then something posits string to follow:
        Rs&commitstring = &s{
            # < require they know parent==Ps&dige
            Rs&Committing = Qs&string = s;
            me&t,R,Q;
        };
        
    },'ift,D'],
    
]};
