# stored item pile
me.Sch_Pavings = &acgt{ return [
    &{
        # introduce some %Part of it
        # < be a heading swallowed-by or swallowing brack
        #  < knowing T.act here and when ha
        #    ha doesn't acgt,
        #     could stealth T.act every row
        # acty:8 meaning dialectical,
        # acty:1 would be openey,
        #   buttons for the first layers of mind atop
        # they are cv-ish, yet individual doables...
        #   %%may:ha,openey:1,acty:1 - advertise route
        # then just increase %%acty to wander in to things
        #  eg when depending on something being awake
        #  eg acty=5 might be enough to know expected Wup affects
        me.acting = &acgtRt{
            t ||= T.act.t;
            $ope = me&rolltog,R,{may:t,tsc:'l',acty:8};
            return ope
        };
    },
  // Paving 5
    ['Paving+openey',0.5,&acgtRs{
      // waits for Pave
        $ope = me&acting,R,'Pave';
        sy&R = R;
        # < brack piping not f supring
        sy&f = R;
        
        $Q;
        each ir Rs&Zaving {
            Ry&ha({wants:r})
            #rs&waits and me&waits,'...'
            Q = rs&Q;
        }
        !Rs&Zaving and me&waits,"!Zaving"
        !Q and me&waits,"!Q"
        me&bready,R and return
        #Rs&waits and return
        
        $notready = !Q || !Qs&ready;
        notready and me&waits,"!ready"
        $w = Qc&s;
        !w and me&waits,"!live"
        # < negate the above %%waits if:
        !w && !notready && Qc&el == '9' and Rs&creatine = 1
        
        Rs&Live = Qc&s;
        Rs&Q = Q;
        
        me&bready,R and return
        #Rs&waits and return
        
        # roll/sleepatch inner processes
        me&rolls,'grype',{s:Q.t+"@"+Qs&dige}
            && me&rollbs,'changey';
        
      // looking
       // at Thing
        # < sleep by Q%dige?
        $Thing = Rs&Glean = me&lookaQ,Q;
        # sync ss&dige and Thing's dige (however it appears)
        #  and whatever other Things project knowledge around

        # key behaviours, to stare at problems for longer:
        # hold changes to s that it has already
        # < we don't need to compile simple connections?
        #   trusted sources etc
        # ! if grype causes f%changey but applies the change
        #   (liesnotok=1 not to)
        #   grype rolled forgets it made the change
        #   f%changey can be forgot if R%tracting is interrupted
        # don't apply change from the Thing until Compiling wants to
        Rs&liesnotok = 1;
        me&rollbs,'commiting' and Rs&liesnotok = 0; Rs&commiting++
        # hold waking Thing changes are projected into:
        # < without hiding the change
        #Rs&noprojcha = 1;

        # %ting attr were auto upload/download by A:f
        # < configure it here sometimes
        me&CB_fixing,R,'ting';

        # %dige-ish group - change makes fs&changey
        # < particularly if it changes when we game look->get,
        #    would mean a 4 is not pointing to the 1 proper
        me&CB_fixing,R,'W',{w:Thing};
        
       // < filtering s%el=9
        # %el etc bring meanings
        $inc = me&CB_fixing,R,'inc';
        if (inc) {
            if (ss&el == 9) {
                Ds&bri = 0.6;
                me&mtsc,inc,'ig',0,'B'
                # < also ignored by the compiler
                Rs&ignore = 1;
                Ry&ha('ignore');
                return
            }
            ss&el == 7 and me&mtsc,inc,'hmm',0,'B'
        }
        if (0) {
            # < applying the sort-out-code scheme
            # wanting a decision on each one
            # (1 keep, 7 transfiguration, 9 death)
            if (!ss&el) {
                me&tsc,'('
                me&rolltog,R,'9',0 and ss&el = 9
                me&rolltog,R,'7',0 and ss&el = 7
                me&tsc,')'
            }
        }
        # eg which children to ignore
        Rs&zget = &Ry{
            me&ioty,R,'Paving' .map(&r{
                rs&ignore and return
                y(r)
            })
        };
        
       // etc
        
        # project info to children
        Things&Wind and me&CB_proji,R,'Wind','t,dige',Things&Wind
        # receive those projections
        me&CB_projo,R;
        
        # tally grypes about info here
        # < it's their %%cha if their projections are wrong
        me&CB_conclude,R;
        
        
        if (ope) {
            me&zu,'Thingstract',Thing
            Rs&changey and me&zu,'changey',Rs&changey;
            Rs&trouble and me&zu,"Rtrub",Rs&trouble;
            #me&zu,'Loadism',load
        }
        
        # various leads to %changey -> /*%openey
        #  so all **%changey/*!%changey
        if (Rs&changey) {
            # dige here or inside solving
            me&tsc,"R%changey","cha",'G';
            s&bgh = 111;
            # 2 them
            me&ioty,R,'ball'
                .map(n => ns&openey ||= 1)
        }
        Rs&trouble and me&tsc,'trouble','trou','G'

        Rs&Paving_good = 1;
        Ry&ha('Goodish');
    },'ift,D'],
    &{
    # know about the Thing independent of the species
    me.lookaQ = &acgtQ{
        $s = Qc&s;
        !s and throw "Q!s"
        $Thing = Cye([s.t,1]);
        if (Qc&species == 5) {
            Things&dige = ss&ha;
            o $s/W/*:s
            each in ays&s {
                ah(Thing,'Wind',n.t,ns&ha)
            }
            # < some piles reway, others remix
            #   some are way leading to many
            o $s/w/*:s
            each in ays&s {
                ah(Thing,'wind',n.t,ns&dige)
            }
        }
        elsif (Qc&species == 1 || !Qc&species) {
            # < can do similar for .4
            # < pointings that adjust for its compression
            each in sy&N {
                ns&W && !ns&z &&
                    ah(Thing,'Wind',n.t,ns&ha)
            }
            $dige = Qs&dige;
            !dige and throw "nodige"
            # W:spot/* %ha are 9 (see AWriter), %dige are 12
            if (Q.t.indexOf('spot/') == 0 &&
                dige.length == 12) {
                dige = dige.substr(0,9)
            }
            Things&dige = dige;
        }
        return Thing
    }
    =pod beready
     %Paving wants to continue as itself,
      unless it %%waits or so
      upper levels (of cv or R/r) tugging lower
      thus it would become acty=2,
       meaning something acty=1 (%%openey) succeeded
      and produce a %%Live (Qc&s)
     rather than
      becoming %Paving_good|in all the way down|up
     
     the historic:
     me&waits,... modulates something%waits,
      switches on R%waits (fast discovery, per act or Steps)
       which &waitzo converts to %%waits
      ! nobody else should %waits
     me&beready,R,$Mw read R%Mw/$Mw||*/* (but not Rc&M)
       sifted out the %acty things,
        returned false if any %waits things
     
     waiting at an earlier &bready drops state between
      unless its domed not to
      could be grype resetting per Qs&dige
       right now they copy into %changey[], which ttl=2
      while keeping some history,
       eg commit log
       eg sanity checking as we .5<->.1
     ie
     low-acty sleeps while high-acty transfigures it
     or
     should get a dome of intention all ready,
      then go amuck, positing changes to it
     then return to sync that dome again
     using/not the things at particular times
     and
      when Comp wants Know/**%fully,
       it waits for them all to:
        get that message,
        &bready, &settle
     
     &settle is a node that is:
      &halfsettled:
       &bready, at least by Steps@6 or so
       brack seemingly stable
      and:
       nodes above/below are at least &halfsettled
        eg: Settled/Unsettled/Chaos
         where Chaos is not brackstable etc but Unsettled is
     
     most behaviour decisions wait for &settle
      stepping into the noise
     
     most behaviour reflexes wait for &bready
      eg selecting nodes eg S o ...
        they/we should %bready
      eg begin reaction as txn on brack
        as in %%may,... -> ...,%may, sorta
    bready
     &bready and return # implements a waitsology
      R%waits -> %%waits
      %%wants:$n%%waits -> %%waits:wants,...
      %%waits -> pause|shy $R
       and inners, unless $n%%waits,
         or %%waits:wants them,
         fuzzy line? who is waiting for who
         top down if same cv?
       might be a recognisable solution
       might be retry loop,
       do others first (moreso if %%waits:wants)
     < Ying:Steps:Ring:r could arrest R** on ha %%waits
      < wants Rc&ip.contains()
     
        # bracktricks:
        #  ha ...uniq - not if exactly like another row
        #  ta - ternary ja $want ? ha $consequence : ha $waitsish
        #   see 
     and they form loops!
    =elvis
        me.bready = &acgtR{
            # got to via %%wants:R below
            !Ry&ja and return Rs&waits
            # R%waits -> %%waits
            each in Rs&waits {
                Ry&ja({waits:n}) and continue
                me&nu,'couldwaitfor'+i,n;
                Ry&ha({waits:n})
            }
            # %%wants:$n%%waits -> %%waits:wants,...
            each in Ry&ja({wants:1}) {
                $n = ns&wants;
                !isC(n) and continue
                # could be p/r/s
                $j = ny&R;
                if (!jy&ha) {
                    # not a node
                    js&waits and Ry&ha({waits:'wants',wants:n,notanode:1})
                }
                else {
                    # < unpossiblate infinite recursion
                    #   with me&ind bit on the T?
                    me&bready,j and Ry&ha({waits:'wants',wants:n})
                }
            }
            
            !Ry&ja({waits:1}) and return
            # < %%waits -> pause|shy $R
            # avoiding the rest of the activity
            return 1
        };
    },
    # R%Paving_good waits for R/*%tracting_good, etc
    #  when we can rely on our children to complain,
    #  know if they're changey/trouble
    ['ball+Paving_good','52',&acgtRs{
        T.Mw = 'trac';
        $p = Ry&up;
        Rs&zget(R,&r{
            # into this pool of what we're looking for from who
            # < display their stuff up against them
            #   dividing the ball in two
            
            # completed 51
            !ry&ja('Goodish') and Ry&ha({waits:'Goodish',wants:r})
            #    ah(R,'waitz','tw_scgk_r',r.t,'Paving_good',r);

            # completed 52
            #  which they haven't this future
            !ry&za('Good') and Ry&ha({waits:'Good',wants:r})
            #    ah(R,'waitz','tw_scgk_r',r.t,'Paving_goodin',r);

        });
        
        # autothink:
        # < sending %trouble to solve %%waits,Good
        each ir Ry&ja({waits:'Goodish'},'wants') {
            ac(r,'trouble',R.t+" wants %%Goodish")
        }
        # weakly supposing no signal means ok?
        me&bready,R and return
        #!me&waitzo,R,wa and return

        # children at least here
        #  Ring usu. children almost here
        Rs&Paving_goodin = 1;
        Ry&ha("Good")

        # which means all we need to compile is connected!
        !ps&Paving and Ry&ha('stabilised','eto')
    },'ift,D'],

  // Paving 3
    # %Pavings contain %Paves, but aren't %tw themselves
    ['Pavings',0.301,&acgtRs{
        me&reaw,R,'Pavings';
        # borrow %Paving params
        me.adhere.Paving(R,R);
        # to give on to %Paving
        ah(R,'adhere','Paving',1);
        # < o R/*%ball(%Pavings
        me&ioty,R,'ball' .map(&r{
            $z = rc&s;
            if (zs&Pavings) {
                # except folderish, another %Pavings
                rs&Pavings = zs&Pavings;
                ah(r,'noadhere','Paving');
                ah(r,'noadhere','twmt');
            }
            else {
                # < engage the top level if we pc&ov>=2,
                #   some kind of energy to complete itself
                # or we will just %adhere without /%Pave+G&ting
                rs&openey = 1;
            }
        })
    },'ift,D'],
    # %Paving splits into species
    #  no /%Pave (G&t) unless %openey
    #  no download/decode unless %fully
    ['Paving',0.36,&acgtRs{
        Rs&Paving == 1 and Rs&Paving = 'W'
        $of = Rs&Paving;
        me&reaw,R,'Paving,directory';
        $S = me&inode,R;
        # %adhere resolves meanings
        # < generalise levels of engagement (%%may,acty)
        # %openey Searches with /%Pave (G&t)
        me&ollbs,R,'trouble' and Rs&openey = 1
        Rs&boost > 0 and Rs&openey ||= 'boost'
        !me&rollbs,R,'openey' and return
        # %fully gets %Pave's item
        me&rollbs,R,'fully';
        $M = [];
        # see if there's a HEAD-type method for this Qc&of
        if (of == 'W') {
            m W\.5 2  %species:5
            Rs&fully &&
                m W 1
        }
        else {
            m $of 1  
        }
        each in M {
            # Rs&* and rs&* -> Qc&*, Qc&of = %Pave
            ns&Pave ||= of;
            nc&R = 1;
            n $n
        }
    },'ift,D'],
    # %Pave has a Q, could be a species
    ['Pave','291',&acgtRs{
        $p = Ry&up;
        $s = pc&s;
        # since Zaving@294, reuse foldy thing
        ah(p,'Zaving',R.t,R);
        # similar to %Zave,
        #  G&t,Q directly, no %Saveting
        #  no %Here
        #   until download+decode
        #   or a write is proposed
        #   or our cache (dige/versiona) could go there
        
        $Q = me&rollbsc,R,'Q';
        Q.t = s.t;
        Qc&of = Rs&Pave;
        Qc&async = &{};
        Qc&ready = &CP{};
        ['directory','species'].map(&k{
            $is = R.sc[k] || p.sc[k];
            is and Q.c[k] = is
            else { delete Q.c[k] }
        });
        # compile to $t for Search
        Qc&directory and Q.t = Qc&directory+'/'+Q.t
        Qc&species and Q.t = Q.t+'/'+Qc&species
        # and for humans
        n of 101 $s:Qc&of %hs:348,fs:9
        Qc&directory &&
        n directory 102 $s:Qc&directory %fs:8,hs:194
        n t 11 $s:s.t %hs:348
        Qc&species &&
        n species 112 $s:Qc&species %fs:8,hs:157
        
        
        # Q refinds P each G&t
        $w = me&t,R,Q;
        # per most of this besides s, el + hooks
        #me&nu,Q.t,Q.c;
        
        !Qs&ready and return me&waits,'!ready','...'
        # $w may wander off, usu clones into %Gens%self
        # < following P into the future (%Differ)
        
        n el 13 $s:Qc&el %hs:348,fs:9
        
        me&rolltog,R,{maydo:'Q'} &&
            me&zu,'Q',Q;
        
        Qc&s && me&rolltog,R,{maydo:'s'} &&
            n s  $s:Qc&s %R:ball
        
        # have the thing, readyonly, copied from Pc&s
        # < Q can Qs&Want_Decode for itself
        Qc&s and Rc&s = Qc&s
        
        # then something posits string to follow:
        Rs&commitstring = &s{
            # < require they know parent==Ps&dige
            Rs&Committing = Qs&string = s;
            me&t,R,Q;
        };
    },'ift,D'],
    
]}
  // CB
   # sc here, there, seeing change
   # < brack instead of %grype,
   #   see sans %grype, in CB_proji:
   #    %%wants - another node to have something
   #     ha {imps:t,wants:z,openey:1,cause:d}
   #     < (from),%%wants(to-node),(body),(%%cause.+)
   #       for z to receive %%openey reliably
   #        tells the %%inbox it is read
   #    %%may - do something maybe
   #     may,input,once {imps:t,s:C_to_input,cause:d}
   #     < click to do since s in q rather than a
   #       and we know how to may:input an s
   #     < bracktrick click many
   # grype:
   #   CB_proji proto %%wants another r:node:
   #     e-out logs R%grype/proj/o/#$t/$d
   #     mostly it ac(r,'trouble',d),
   #       which turns into r%openey on %Paving
   #     so it reads r%grype/proj/i/*/* (%%inbox)
   # apart from that,
   #  overall %%cha <- fs&changey
   
   // conclude
    # dialects of %grype/* conclude into fs&changey
    me.CB_conclude = &acgtR{
        Rs&traccon and me&nu,"grype/*",Rs&grype;
        each kn Rs&grype {
            # c&Km are display parts, non-persistent
            $Km = nc&Km;
            !Km and continue
            # take any Kn/%changey as fs&changey
            $N = me&ioty,Km,['groupthing','changey'];
            each id N {
                # < want things for fs&changey to be persistent
                #   see 'these should be elvised in there'
                if (Rs&changey && dy&cv > 0.7) {
                    Rs&changey = Rs&changey
                        .filter(c => c.t != d.t)
                }
                ac(R,'changey',d);
                dy&R = R;

                # sans %grype:
                Ry&ha({cha:d,grype:k})
            }
        }
        # modulat from the grype of late only
        if (Rs&changey) {
            $out = [];
            each in Rs&changey {
                !ny&R || Rc&N.indexOf(ny&R) >= 0 and continue
                ny&timingout ||= 0;
                ny&timingout++ > 2 and out.push(n)
            }
            Rs&changey = Rs&changey
                .filter(n => out.indexOf(n) < 0);
            !Rs&changey.length and delete Rs&changey
        }

    };
    
   // CB_fix|load
    # like KnowC for %balls
    # < generalise from sc
    # < about each other, up%ting<->%ting etc
    # < group all types
    $Be = me.Be;
    !Be and throw "!me.Be"
    # Km/Kn modulata for c.type amongst s.sc
    me.CB_have = &acgtcs{
        !c and throw "give c"
        $load = c;
        # everything it has:
        load.c ||= {};
        $Kc = Be.C[load.type];
        $Km = load.Km = G&Cye,[load.type,4,{Kc:Kc},'grouping'];
        each i,k Kc.scgk {
            $got = s && s.sc[k];
            got == null and continue
            load.c[k] = got;
            $Kn = fio(Km,k,[k,1,{s:k},'groupthing,fs:9,mar:0.3']);
        }
        !hak(load.c) and delete load.Km
        else {
            $M = Kms&z ||= [];
            $n =
            m KnowC_K 1 $s:Km.t,K:1 %hs:684,fs:7,mt:-1,label
            ny&cv = 0.001;
            M.unshift(M.pop());
            me&walls,Km,'bd:1.4,hu:3'
        }
        return load
    };
    # for %ball/%fix known by $type
    me.CB_fix = &acgtR,type{
        !Rs&ball and throw "!ball"
        $load = me&CB_have,{type},Rc&s;
        $Km = load.Km;
        !Km and return
        # < put the r%fix in R%Mw/fix anyway
        #   so it can be before R%z
        me&Mw,R,'fix' .push(Km);
        # adopt their %fix
        $N = me&ioty,R,['fix'];
        each in N {
            ns&fix != 'sc' and continue
            $Kn = fio(Km,n.t,0);
            !Kn and continue
            me&zuct,Kn,n;
        }
        Kmc&load = load;
        return Km
    };
    # %fix over time (was grype)
    me.CB_fixing = &acgtRkc{
        c ||= {};
        c.type ||= k;
        # < %grypes can outlive Qs&dige
        $g = me&rollbsc,R,'grype/'+k;
        # roll Km per R
        gy&R != R and delete gc&Km; gy&R = R;
        $Km = gc&Km ||= me&CB_fix,R,c.type;
        
        # history/$gk builds up, can be %changey
        if (c.w) {
            # R is auto-changey ghost, reflecting dige
            #  liesok=0 probably doesn't make a change,
            #  when we want to react to the difference
            $load = {type:c.type,auto:1,liesok:!Rs&liesnotok};
            me&CB_load,load,R,null,c.w;
            each ik load.differs {
                $was = load.was[k];
                $is = load.is[k];
                $d = G&Cye,['Thing-has:'+k,1,{s:">"+was},'changey,histgk,fs:8,hue:2,bri:0.7'];
                me&walls,d,'b:2.2h666';
                ds&gk = k;
                if (was == is) {
                    # if waiting to apply the change
                    dc&s = "<"+load.c[k];
                    ds&bri = 1.3;
                }
                # puts new top on history
                me&givi,g,'history',d;
            }
        }
        
        !Km and return
        Kmc&g = g;
        
        # take interesting g/*/*:gk to their Kn(%fix
        # change history
        $N = me&ioty,g,['',''],['history',''];
        each id N {
            $Kn = fio(Km,ds&gk||d.t);
            !Kn and continue
            fio(Kn,d)
            dy&cv = 0.789;
        }
        
        return Km
    };
    # minimal s.sc realiser
    # for sc in c.type,
    #  ss&* should be as ws&*
    #   or blank if implied by wps&*
    me.CB_load = &acgtcg,wp,w{
        !c and throw "give c"
        $load = c;
        $f = load.f; # optional
        $s = g && gc&s;
        # bits to give G: nulls for things it needn't
        load.sc ||= {};
        # bits to give W: everything
        load.c ||= {};
        # of this type's group
        # < Wtype:* brings everything,
        #   to where osc watches osc
        $Kc = Be.C[load.type];
        
        each i,k Kc.scgk {
            # on %ting%$k
            $got = w && w.sc[k];
            # which is inheriting ^^%tracting
            # or not, if many tings per Thing,
            #  needing more explicit bits in recipe
            #  but something weirder might be afoot
            $exp = wp && wp.sc[k];
            # or not if it doesn't do that
            !Kc.scinherit and exp = null
            # weaker exp than inherit
            if (exp == null) {
                $def = Kc.scdefault && Kc.scdefault[k];
                def != null and exp = def
            }
            
            $was = s && s.sc[k];
            # W says everything
            $v = load.c[k] = got || was || exp;
            
            $value = got;
            # G implies what is implied
            if (exp != null && got == exp) {
                # not noted
                !was and value = null
                # or was explicitly something else
                elsif (was != got) {
                    debugger
                    throw k+' implied was !got'
                }
                else {
                    ~>7 redundant: g.t, '%'+load.type
                    value = null;
                }
            }
            load.sc[k] = value
        }
        
        !s || load.noknow and return load
        
        me&CB_loading,load,g,w;
        
        return load
    };
    # minimal s.sc actuated
    # unless lies && liesnotok
    me.CB_loading = &acgtcgw{
        $load = c;
        $s = g && gc&s;
        
        $differs = [];
            each kv load.sc {
            v == null and s.sc[k] != null and differs.push(k)
            else
            v != s.sc[k] and differs.push(k)
        }
        $lies = [];
        each ik differs {
            load.liesok and continue
            load.sc[k] == null and continue
            # we said something, it was something else
            s.sc[k] != null and lies.push(k);
        }
        
        # want extra carevision
        lies.length and load.auto = 0; load.lies = lies
        each ik differs {
            load.was ||= {};
            load.was[k] = s.sc[k];
        }
        
        if (differs.length) {
            load.differs = differs;
            # 
            # < Tool for pulling as branch
            #   something differ can understand
            #   all terrain replication vehicle
            if (load.conform) {
                # should not be changing
                load.auto = 0;
                me&waits,"recipe-doesnt-conform",'exp!',6
            }
            if (load.auto) {
                # enacts change
                each ik differs {
                    me&tsc,'~'+k,0,6;
                    $v = c.sc[k];
                    $was = s.sc[k];
                    if (was != null && v == null) {
                        ~>7 redundant: g.t, '%'+load.type
                    }
                    v == null and delete s.sc[k]
                    else {
                        s.sc[k] = v
                    }
                }
            }
        }
        each ik differs {
            load.is ||= {};
            load.is[k] = s.sc[k];
        }
        return load
    };
   // CB_proji|o
    # internode rumour mill
    #  s = $t/$scgk=$v
    # %Wind talking of children we should have
    # < &nodeo,Q($t,%Paving-ish) having %ting-ish
    #  < .5 changing %directory
    # redundancy -> difference -> mot cha
    # eg check child dige, sends trouble
    # or !exists, input
    # me&gromps,R,'Wind','t,dige',Things&Wind
    me.CB_proji = &acgtRtks{
        !Rs&ball and throw "!ball"
        # the proj/o/#$t/$d
        $g = me&rollbsc,R,'grype/proj';
        $reset = !fio(g,'o',0);
        #R.t.includes('ick') && reset and ~>4 reset: R.t
        # from here
        $go = fio(g,'o');
        # named $t
        $gt = fio(go,t);
        
        $ks = k.split(',');
        ks.length != 2 and throw "only 2-spheres"
        ks[0] != 't' and throw "for t,$scgk"
        # one $scgk, many R/$t
        $k = ks[1];

        # match against what we have
        # < should only be (%ting, but is implied
        #   we have no other stuff in the Know yet, but could
        #   supposedly the implications would change,
        #   as u climb
        $have = {};
        me&ioty,R,'ball' .map(&n{
            hak(s,n.t) and have[n.t] = n
        });
        
        $news = [];
        each tv s {
            $r = have[t];
            # < these should be elvised in there
            #   to sleep the pile. write these:
            #   e $r -proj-cha $lc
            $d = G&Cye,[t+"%"+k,1,{s:v},{proj:gt,nk:'sc',gk:k}];
            fio(gt,d);
            dc&R = R;
            if (r) {
                dc&r = r;
                $z = rc&s;
                
                !hak(z.sc,k) and ds&cha = 'new'
                else
                z.sc[k] != v and ds&cha = 'diff'
                
                # sans %grype:
                ds&cha and Ry&ha({imps:t,wants:z,openey:1,cause:d});
                
                # < gone is dcR != yfuture at the receiving end
                #   with non-fatal not in Rc&N
                $og = me&rollbsc,r,'grype/proj';
                $ogi = fio(og,'i');
                me&givi,ogi,R.t,d;
                # >1 them, springs into lies fixing
                # anything should become %%openey if %%trouble?
                ds&cha && !Rs&noprojcha and ac(r,'trouble',d)
            }
            else {
                # sans %grype:
                # may input our belief, to wake up wrong
                $b = Cye([t,1]);
                b.sc[k] = v;
                $q = {imps:t,s:b,cause:d};
                me&may,R,'input','once',q;
                
                ds&cha = 'not';
                # create there
                $d = {may:'input_'+t,s:t,tsc:'y'};
                me&rolltog,R,d and me&input,R,t
                me&walls,d.n,'b:2.2h5';
                news.push(d.n);
            }
        }
        if (news.length) {
            # one thing here about the many not there
            $d = {may:'input_*',s:'Unhad:',tsc:'y'};
            if (me&rolltog,R,d ) {
                news.map(d => me&input,R,dc&s );
            }
            $n = d.n;
            ns&fs = 8;
            ny&cv = 0.4;
            news.map(d => me&modopt,R,n,d );
            me&walls,n,'b:2.2h5';
            me&mtsc,n,"\n";
        }
    };
    me.CB_projo = &acgtR{
        # the proj
        $g = me&rollbsc,R,'grype/proj';
        # into here /from.t/$d%proj
        $N = me&ioty,g,['','','proj'],['i','',''];
        each id N {
            $Kn = null;
            # the groupthing.t we're going for
            $t = ds&gk || '?';
            each in Rs&grype {
                n == g and continue
                $Km = nc&Km;
                !Km and continue
                if (ds&nk && ds&gk) {
                    # < generalise from sc
                    ns&nk && ns&nk != ds&nk and continue
                    Kn = fio(Km,ds&gk);
                }
                else {
                    throw "grimp match "+d.t
                }
            }
            if (!Kn) {
                # may not have gk yet:
                #   make extra grype (usually for type groups)
                #   listens to all grypes for %groupthing/%changey
                $ge = me&rollbsc,R,'grype/sc';
                $Km = gec&Km ||= G&Cye,['may',1,{},'almost,grouping'];
                Kn = fio(Km,[d.t,1,{s:t+'!'},'almost,groupthing,fs:7,mar:0.3']);
            }
            Kns&almost and Kns&opa = 0.5
            # noted, might match history of this gk
            $r = dc&R;
            # < want things for fs&changey to be persistent
            $n = G&Cye,["Projected-from-"+r.t,7894,{projin:d},'dis:2'];
            n.t += " to s&"+t;
            me&walls,n,'b:2.2h666';
            fio(Kn,n);
            # < make namepath looking
            #   also if Mlimits dub all ^^^^ means parent loop
            #     make larger recycle symbol
            $up = fio(n,['fromabove',1,{s:'^'},'hs:999']);
            if (ds&cha) {
                # projected difference
                # noticing out of date from our memory
                ns&changey = 1;
                ups&fs = 13;
                fio(n,['projected-from',2,{s:r.t},'fs:6,hue:166,mat:-1']);
                fio(n,['projected-'+t,3,{s:">"+dc&s},'fs:8,dis']);
            }
        };
    }

