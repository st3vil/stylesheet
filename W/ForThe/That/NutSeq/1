NutSeq	9	Jo:1.1
  eye	001	W:javascript
    Aye			{"acgt":"s ov c sc","args":"A,C,G,T,s,ov,c,sc","coded":1,"dige":"5623acef97b8","js":"eye","Wavel":"NutAye"}
      c s: |
        function(A,C,G,T,s,ov,c,sc) {
        if (s && typeof s == 'object') {
            A = s;
        }
        else {
            var V = A;
            A = $.extend({},A);
            A.t = s;
            A.y = A;
            A.y.cv = 0;
            A.c = {};
            A.sc = {};
        
            A.up = V;
            A.c.ip = (A.up.c.ip||[]).slice(0);
            A.up.c.ipi = A.up.c.ipi || 0;
            A.c.ip.push(A.up.c.ipi++);
            A.c.sip = A.c.ip.join(' ');
        
            // trip A
        }
        if (c && typeof c.t == 'string' && c.y && c.c && c.sc) {
            A.c.s = c; c.y.A = A; c = null
        }
        if (c) {
            $.extend(A.c,c);
        }
        if (sc) {
            $.extend(A.sc,sc);
        }
        
        if (ov && ov*1 == ov) {
            A.c.ov = G.h(A,C,G,T,'sca',ov);
            G.h(A,C,G,T,'thro');
        }
        return A
        
        };
    Cye			{"acgt":"s c","args":"A,C,G,T,s,c","coded":1,"dige":"087d8b44a250","js":"eye","Wavel":"NutSea"}
      c s: |
        function(A,C,G,T,s,c) {
        var C = {};
        if (!s) {
            debugger;
        }
        if (s.constructor == Object) {
            if (null != s.t && s.y && s.c && s.sc) {
                var C = {t:'',y:{},c:{},sc:{}};
                C.t = s.t;
                $.extend(C.y,s.y);
                $.extend(C.c,s.c);
                $.extend(C.sc,s.sc);
                return C
            }
            else {
                {var er = new Error("Unhandle hash C"); er.tc = [s]; throw er}
            }
        }
        else
        if (s.constructor == Array) {
            C.t = s[0];
            C.y = s[1];
            C.c = s[2];
            if (s.length == 1) {
                C.c = {W:C.t}
            }
            C.sc = s[3];
            if (typeof C.c  === 'string') {
                C.c =  G.h(A,C,G,T,'peel',C.c)
            }
            if (typeof C.sc === 'string') {
                C.sc = G.h(A,C,G,T,'peel',C.sc)
            }
            // < extra -pi
        }
        
        if (!typeof C.t === 'string') {
            {var er = new Error("Non string t"); er.tc = [C]; throw er}
        }
        C.c = C.c || {};
        
        C.sc = C.sc || {};
        
        if (typeof C.y == 'string' || typeof C.y == 'number') {
            var i = 1
            while (C.y * 1 != C.y) {
                if (i++ > 5) {
                    throw new Error("MAAANY");
                }
                // to W other than C.t? call extra parsers?
                var t   = /^([a-z0-9\/]+)($|_)/i;
                var pi = /^-([a-z0-9\/]+)($|_)/i;
                if (C.y.match(t)) {
                    var symb = C.y.match(t)[1];
                    C.c[symb] = C.t;
                    C.y = C.y.replace(t,'');
                }
                else
                if (C.y.match(pi)) {
                    C.c.pi = C.y.match(pi)[1];
                    C.y = C.y.replace(pi,'');
                }
                else {
                    throw "Non number y left: "+A[4].sc.ki(C)
                }
            }
            C.y = {cv: C.y };
        }
        C.y = C.y || {};
        if (C.y.cv < 0) {
            C.y.cv *= -1;
        }
        if (C.y.cv >= 1) {
            C.y.cv = G.h(A,C,G,T,'sca',C.y.cv);
        }
        
        return C;
        
        };
    datam			{"acgt":"s c","args":"A,C,G,T,s,c","coded":1,"dige":"3dc73aeb362f","js":"eye","Wavel":"NutSea"}
      c s: |
        function(A,C,G,T,s,c) {
        if (typeof c == 'string') {
            c = {s:c};
        }
        c.d = c.d || 1;
        if (c.d > 3) {
            throw new Error("large datam");
        }
        // read the question
        var after = c.s;
        if (c.s.match('^\\[')) {
            after = c.s.replace(/^\[|\]$/g, '');
            c.array = 1
        }
        if (c.s.match("^'")) {
            c.eq = c.s.replace(/^'|'$/g, '');
            after = ''
        }
        c.s = after;
        // make an answer
        if (c.array) {
            if (!(typeof s == 'object' && s.constructor == Array)) {
                return
            }
        }
        if (c.eq != null) {
            if (!(typeof s == 'string' || typeof s == 'number')) {
                return
            }
            if (c.eq != '*' && s != c.eq) {
                return
            }
        }
        if (!c.s) {
            return 1
        }
        // more inside
        var ss = c.s.split(',');
        // check the size of the next set in
        if (s.length != ss.length) {
            //~diflen: s, ss
            return
        }
        // check each thing
        for (var si in ss) {
            var oc = ss[si];
            var os = s[si];
            oc = {s:oc,d:c.d+1};
            var re = G.h(A,C,G,T,'datam',os,oc);
            if (!re) {
                //~subfa: os, oc
                return
            }
        }
        return 1
        
        };
    thro			{"acgt":"ov sC","args":"A,C,G,T,ov,sC","coded":1,"dige":"ec4f916bdf49","js":"eye","Wavel":"NutTub"}
      c s: |
        function(A,C,G,T,ov,sC) {
        if (ov && typeof ov == 'object') {
            if (!(typeof ov.t == 'string' && ov.y && ov.c && ov.sc)) {
                throw "given foreign object ov: "+A[4].sc.ki(ov)
            }
            if (ov.y != ov) {
                if (!ov.y.A) {
                    throw new Error("given C not yA");
                }
                A = ov.y.A;
                if (A.c.s != ov) {
                    throw new Error("given CyA not Acs=C");
                }
            }
            else { A = ov }
            ov = null;
        }
        if (sC && typeof sC == 'number') {
            ov = sC; sC = null;
        }
        var T = A.c.T = A.c.T || {};
        if (T.not) {
            return
        }
        if (ov) {
            A.c.ov = G.h(A,C,G,T,'sca',ov);
        }
        if (sC) {
            A.c.s = sC;
        }
        C = A.c.s = A.c.s || {t:'',y:{A:A},c:{},sc:{}};
        var t = G.h(A,C,G,T,'t',A.t);
        if (!t) {
            throw new Error("thro no t: "+A.t);
        }
        var z = t.y.in;
        while (z && A.c.ov >= z.y.cv) {
            if (T.not) {
                break
            }
            var D = z;
            z = z.y.next;
        
            if (A.cv > D.y.cv) {
                continue
            }
            if (T.once && A.cv == D.y.cv) {
                continue
            }
            // seek refinds I, resuming from the same D, sub-cv
            if (T.seek && (T.seek.t != D.t || T.seek.y.cv != D.y.cv)) {
                continue
            }
            else { delete T.seek }
            var Acv = A.cv;
        
            T.N = T.N || {};
            C = A.c.s;
        
            if (!D.sc.any) {
                if (D.sc.nk) {
                    if (!C[D.sc.nk]) {
                        continue;
                    }
                }
                if (D.sc.gk) {
                    if (!C[D.sc.nk][D.sc.gk]) {
                        continue;
                    }
                }
            }
            var es;
            if (D.sc.gk) {
                es = C[D.sc.nk][D.sc.gk];
            }
            if (D.sc.s) {
                es = D.sc.s;
            }
        
            // temp? until A.cv decided to be set before doing?
            T.thro = D;
        
            if (G.c.bugt) {
                debugger;
            }
            G.h(A,C,G,T,D,es);
        
            if (typeof T.N == 'object' && Object.keys(T.N).length == 0) {
                delete T.N
            }
            if (T.N != null) {
                G.h(A,C,G,T,'TN',T.N); delete T.N
            }
            if (T.not == '2') {
                return delete T.not
            }
            if (Acv == A.cv) {
                A.cv = D.y.cv;
            }
        
            if (T.whack || T.not || T.seek != null) {
                break
            }
        }
        if (T.seek != null) {
            if (T.seek == '') {
                T.seek = z
            }
            else
            if (T.seek != 0) {
                A.cv = G.h(A,C,G,T,'sca',T.seek)
            }
            // A.t probably changed, become new personality
            if (typeof T.seek != 'object') {
                delete T.seek;
            }
            return G.h(A,C,G,T,'thro');
        }
        delete T.whack;
        if (T.not == 1) {
            delete T.not;
        }
        
        };
    TN			{"acgt":"s","coded":"1","dige":"39958b2a8d97","js":"eye","args":"A,C,G,T,s","Wavel":"NutTub"}
      c s: |
        function(A,C,G,T,s) {
        A[1].sc.N.push(A);
        
        if (typeof s == 'object') {
            // take T.N.$tocv = $time,
            // or T.N = $tocv
            var tocv;
            var time;
            $.each(s, function(k,v){
                if (tocv != null) {
                    throw new Error("com TN{}");
                }
                tocv = 0+k;
                time = 0+v;
                // check back/rerequest/slomo time
            });
            s = tocv;
            // does the identity as eg 3 remain?
            if (time) {
                A.sc.due = G.h(A,C,G,T,'time') + time;
            }
        }
        if (typeof s != 'number') {
            throw new Error("com TN");
        }
        T.not = 1;
        // first number sets A.cv
        if (s != 0) {
            A.cv = G.h(A,C,G,T,'sca',s); T.not = 2;
        }
        // exit before Acv == A.cv we set, eg when 6 did T.N=6
        if (s != 0) {
            T.not = 2;
        }
        // second number is time due
        
        };
    TuneTimeMachine			{"acgt":"s","coded":"1","dige":"2ff2808cb81f","js":"eye","args":"A,C,G,T,s","Wavel":"NutTub"}
      c s: |
        function(A,C,G,T,s) {
        A[1].sc.N.push(A);
        // to detangle - make sure A[1] is stashed elsewhere
        if (A.c.Jupstash) {
            A.c.Jupstash();
        }
        // probably like a T.nose with instant doming abort
        var D = T.thro;
        if (D && !T.once) {
            A.cv = D.y.cv;
        }
        // make a little view of the A/B stacks?
        var per = A.t+'@'+A.cv;
        throw new Error("async "+per+": "+s);
        };
  NutAye			W:NutAye,ha:0a5e4cb636cb
  NutSea			W:NutSea,ha:55970f404754
  NutTub			W:NutTub,ha:0a8b6935ebb1
