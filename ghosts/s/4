PiMachine: | # all that is
    n Sequencing
    n ForJ
    n Jingle
    n Stuff
    n ThatWillBe
Sequencing: |
    n To
    n Day
    n Tube
    n Ce
ForJ: |
    n Sea
    n With
    n Tunnel
    n Elvising
    n Jelly
Jingle: |
    n Compliers
    n Walks
    n Stashi
Stuff: |
    n Triangle
    n Hoop
    n Circle
ThatWillBe: |
    n Tan
    n Tal
    n Komp
MakePi: | # make code,
    my $ii = {};
    
    my $dig = sub {
        my $tW = shift || return;
        $tW = {%{$tW}};
        $tW->{$_} = readlink "w/digway/$_" for keys %$tW;
        $tW;
    };
    
    my $main = 'PiMachine';
    my $see = G.way.>$main;
    my (@bit) = $see =~ /^n (\w+)$/sgm;
    
    my $s = {};
    for my $bit (@bit) {
         my $fd = "w/pimash/$main/$bit";
        my $ol = LoadFile($fd.'.g') if -f $fd.'.g';
        
        my $v = {};
        if (!$ol || ki($ol) ne ki($dig->($ol))) {
            sayre "$main $bit unstuck: \n".ki($ol)."\n ne\n".ki($dig->($ol)) if $ol;
            n $bit
            my $jt = G.oin.inJ;
            my $Day = $jt->{$bit};
            my $tW = {};
            my $su;$su = sub {
                my $J = shift;
                my $v = J.El.Pre.tv || die "J.name no tv";
                map { _.sc.J ? ($_,$su->(_.sc.J)) : $_ }
                grep { _.y.cv < 0.9 || do{$tW->{_.t} = $_; 0} } values %$v;
            };
            my $N = [$su->($Day)];
            for my $C (@$N) {
                Rw ym/conoi $noAI=1 $C $v;
            }
            DumpFile($fd.'.g',$dig->($tW));
            DumpFile($fd.'.v',$v);
        }
        else {
            $v = LoadFile($fd.'.v');
        }
        while (my ($k,$tv) = each %$v) {
            while (my ($t,$cvs) = each %$tv) {
                while (my ($cv,$C) = each %$cvs) {
                    $s.>$k.>$t.>$cv = $C;
                }
            }
        }
    }
    
    my $v = $s;
    for my $of (keys %$v) {
        my $o = $ii->{$of} = {t=>$of,y=>{cv=>0.001},c=>{W=>'of'}};
        my $c = $v->{$of};
        my $la = $o;
        for my $cv (sort keys %$c) {
            my $ts = $c->{$cv};
            for my $t (sort keys %$ts) {
                my $z = $ts->{$t};
                
                Rw CoBabbler $C:z;
                my $y = eval z.c.s;
                die "Throcompile $of z.y.cv: z.t:"
                    .ind('  ',$@)."\n\n z.c.s\n" if $@;
                die "Not code: z.t z.y.cv: $@\n".ki $z if ref $y ne 'CODE' && !z.sc.subpeel;
                z.c.code = $y;
                
                if ($la eq $o) {
                    la.y.in = $z;
                }
                else {
                    la.y.next = $z;
                    z.y.prev = $la;
                }
                o.y.tw.>$t = $z;
                o.y.tv.>$t.>$cv = $z;
                $la = $z;
            }
        }
    }
    
    my $i = {};
    my $n = ii.i;
    while ($n) {
        if (n.c.code) {
            $i->{n.t} = n.c.code;
            ii.i.y.tw->{n.t} = $n;
        }
        $n = n.y.in || n.y.next;
    }
    
    c&iii && push @{c&iii}, $i,$ii;
    ($i,$ii)
CoBabbler: | # bake code
    my $sw = {};
    $sw.>$_ = 'say' for qw'saygr saybl sayyl sayre say';
    %$sw = () if C.sc.nobasay;
    for (keys %$sw) {
        my $if = $_ ne 'sayre' ? "A\.V && " : "";
        C.c.s =~ s/^(\s*)$_ ([^\n]+?)((?: (?:for|if) .+)?;?)$/${1}${if}G\.h->(\$A,\$C,\$G,\$T,'$sw->{$_}','$_',$2)$3/sgm;
    }
    
    C.c.s =~ s/\bs\&(\w+)/C\&$1/sgm;
    C.c.s =~ s/\bA\&(\w+)/A\.c\.$1/sgm;
    C.c.s =~ s/\ba\&(\w+)/A\.sc\.$1/sgm;
    C.c.s =~ s/\b((?!u)\w)s\&(\w+)/$1\.sc\.$2/sgm;
    C.c.s =~ s/\b(\w)c\&(\w+)/$1\.c\.$2/sgm;
    
    C.c.s = G&parse_babbl,C.c.s;
    
    # change J.n 
    C.c.s =~ s{\$J->\{([unm])\}->\((\$A,\$C,\$G,\$T?)(, ?\$M)?}
        {\$G->\{h\}->($2,"$1"$3}sgm;
    
    C.c.s
of: |
    # of
    #1 && sayyl "of C.t C.y.cv: _.t _.y.cv  _.c.code" for e&_z;
    for my $z ( e&_z ) {
        if (!zc&s) {
            sayre "z.t z.y.cv has no s: ".ki $z;
        }
        if (!z.c.code && (zs&args || zs&acgt)) {
            # shade the edge, args etc.
            Rw CoArgulate $C:z;
            # translate into perl
            Rw CoBabbler $C:z;
            
            my $y = eval zc&s;
            die "Nocompile of=C.t z.y.cv: z.t:"
                .ind('  ',$@)."\n\n z.c.s\n" if $@;
            die "Not code: z.t z.y.cv: $@\n".wdump 2, $z if ref $y ne 'CODE' && !z.sc.subpeel;
            z.c.code = $y;
        }
        # track etc
        zs&dige = slm 12, dig zc&s if exists zc&s && !ref zc&s;
    }

    C.sc.hi = 'lo';
    T.nose = 1;
    
CoArgulate: |
    s&of || die "No of on ".ki$C;
    
    s&args ||= join',','A,C,G,T',grep{$_ ne '1'}s&acgt if s&acgt;
    s&args =~ s/[\+ ]/,/sgm;
    
    s&code && sayre "CoArgu C.t C.y.cv has scode: s&code:\n  ".ki$C;
    
    my $ara = [];
            
    exists s&t &&
        Rw conot $C;
    
    # the nk/gk it wants to wake up
    if (my $v = s&v) {
        my ($nk,$gk,$more) = $v =~ /^([tycs])(\S*)(?: (.+))?$/;
        $nk = 'sc' if $nk eq 's';
        $nk || die"strv:$v";
        s&nk = $nk;
        s&gk = $gk;
        die "More v: $more: ".ki$C if $more;
    }
    
    if (my $nk = s&nk) {
        push @$ara, "my \$".$nk." = C\.".$nk.";";
        if (my $gk = s&gk) {
            # dont remy v=cs in acgts
            my $my = "my " unless s&args =~ /\b$gk\b/;
            warn "Redefined the $gk ($nk\.$gk): ".ki$C if $gk =~ /^[ACGT]$/;
            push @$ara, "$my\$".$gk." = C\.".$nk."\.".$gk.";";
        }
    }
    
    C.sc.>$_ && die "Given $_: ".ki $C for qw'rg cg';
    
    s&args ||= 1;
    if (my $args = s&args) {
        #die "wonky C.t   of ".ki $C if C.t =~ /\W/;
        my $gl = "";
        my $und = "_";
        # it becomes something
        my ($sf,$sa) = ('(',')->($A,$C,$G,$T)') if s&subpeel;
        my $sub = "sub {\n";
        if ($args ne '1') {
            my @args;
            my $und = '_';
            if ($args =~ s/^(A,C,G,T,)(?!s$)//) {
                push @args, 'my ($A,$C,$G,$T,@M)=@_;';
                $und = 'M';
            }
            push @args, "my (".join(',',map{'$'.$_}
                split',',$args).',@Me) = @'.$und.";";
            unshift @$ara, @args;
        }
        c&s = $sf
            ."sub {\n"
            .join("",map{"$_\n"} @$ara)
            .c&s
            ."}"
            .$sa
            .";";
    }
conot: | # expand sc.t->ip, compiled throat clause
    my $ip = C.sc.ip = {};
    for my $k (split ' ', C.sc.t) {
        my $is;
        # $is is our C.t
        $k =~ s/^(\w+):\^$/"$1:".C.t/e;
        # $is is $op?.$v
        $is = $2 if $k =~ s/^(\w+):(.+)$/$1/;
        # complication
        $is = C.sc.>C$k if exists C.sc.>C$k;
        my $p;
        my ($n,$g,$m) = $k =~ /^(t|y|c|sc?)?(.+?)?(\d+)?$/;
        $n ||= 'sc';
        $n = 'sc' if $n eq 's';
        # C.$nk.$gk.$tk
        p.nk = $n;
        p.tk = $2 if $n eq 'y' && $g =~ s/^([A-Z])(\w+)$/$1/;
        p.gk = $g if defined $g;
        die "merge in? ".ki$is if ref $is;
        # peels inside peels of sc.t
        if ($is =~ /^(\w+):(.+)$/) {
            $is =~ s/(?<!\\)\+/,/g;
            my $i = G&peel,$is;
            for (qw'in nin') {
                my $s = $i.>$_ || next;
                $s =~ s/\;/,/g;
                $i.>$_ = G&peel,$s;
            }
            G&xo,$p,$i;
        }
        elsif (defined $is) {
            my $i;
            my $neg = $is =~ s/^\!//;
            $i = 'gt' if $is =~ s/^>//;
            $i = 'lt' if $is =~ s/^<//;
            $i.= 'eq' if $is =~ s/^=//;
            $i = 're' if $is =~ s/^~//;
            $i ||= 'is';
            if ($neg && $i eq 'is') {
                undef $neg;
                $i = 'not';
            }
            p.neg = 1 if $neg;
            $p.>$i = $is;
        }
        delete p.gk if !p.gk;
        delete p.tk if !p.tk;
        $ip.>$k = $p;
    }
Zome: | # return a new J
    my $iii = [];
    n MakePi=>W=>{iii=>$iii},'%qz'
    my ($i,$ii) = @$iii;#Rw MakePi;
    
    my $B = $A;
    my $A = {};
    A.sc.i = A.i = $i;
    A.sc.ii = A.ii = $ii;
    my $G = A.i.G->($A,$C,$G,$T);
    A.i.>$_ = B.I.>$_ for qw'parse_babbl';
    G.w = A.i.w || die "No w way";
    
    $A = G&A,'so';
    my $J = G&J,$A,'os';
    $J.>$_ = $A.>$_ = $J for 2,3,4;
    
    
    # A.* will inherit, A.sc.* is ours (usually)
    A.sc.ii = A.ii;
    A.sc.i = A.i;
    
    my $z = [sort {a.y.cv <=> b.y.cv || a.t cmp b.t}values%{A.ii}];
    my $ola;
    for my $o (@$z) {
        if ($ola) {
            ola.y.next = $o;
            ola.y.over = $o;
            o.y.prev = $ola;
            o.y.under = $ola;
        }
        $ola = $o;
    }
    my $u = G&Ct,[theu=>1=>'steve',{z=>$z}];
    A.ii.>u.t = $u;
    u.y.tw->{_.t} = $_ for @$z;
    u.y.in = $z->[0];
    u.sc.i = A.i;
    u.sc.ii = {%{A.ii}};
    delete u.sc.ii.theu;
    # ^ so no not found in self
    
    $J
Zop: |
    u urw
    y.clos = 1;
    my $beg = hitime();
    
    J.thou++ || do {
        n ElvisWhole=>-test
        #n ElvisThinks=>-test=>{man=>'Zupe'}
    };
    
    sayyl "Took ".G&ron,hitime()-$beg;
    J.output || exit;
    
    sayyl "Making pud...";
    m _.t=>-pud=>{s=>_.c.s},'%hs:375,ws,wi:30%' for @{J.output||[]};
    
    
Zupe: | # run Zome, output pud
    u urw
    y.clos = 1;
    my $beg = hitime();
    
    J.thou++ || do {
        n ElvisLeaves=>-test
        n ElvisWorld=>-test
        n ElvisWads=>-test
        n ElvisWorlds=>-test
        n EpiWaveletting=>-test
        n ElvisThinks=>-test
        n ElvisDialects=>-test
        n ElvisWay=>-test
    };
    
    sayyl "Total ".G&ron,hitime()-$beg;
    J.output || exit;
    
    sayyl "Making pud...";
    m _.t=>-pud=>{s=>_.c.s},'%hs:675,ws,wi:30%'    for @{J.output||[]};
    
pi/test: |
    my $c;
    c.pin = 'ATest';
    c.tell = J.mo.J;
    c.man = c&man if c&man;
    n C.t =>W=> $c
ATest: |
    my $m = [ C.t ];
    my $out = Rw Tesh + $m;
    if ($out) {
        my $el = c&tell;
        push @{el.output ||= []}, {t=>C.t,c=>{s=>$out}};
    }
    
Tesh: | # wrap test way
    # give prototype J/A to the t, the test J as oJ
    my ($t,$sel) = @$m;
    my $tes = sub {
        my $C = G&tC,\@_;
        c&test ||= do {
            C&l = C.t;
            C.t = $t;
            J.testRun;
        };
        C.c.tac = 1 if C&l =~ s/!$//;
        C.c.question = 1 if C&l =~ s/\?$//;
        c&tac = 1 if J.tacall;
        my ($aye) = map {_.M->[0]}
        n $C
        aye.c.return
    };
    
    #die "Just $sel" if $sel;
    
    J.R ||= Rw Zome;
    
    my $beg = hitime();
    while (!J.begins || J.testsRun > J.lasttestsrun) {
        J.lasttestsrun = J.testsRun;
        J.testUntil = J.testRun + 1;
        my $n = defined $sel ? $sel :
            Rw Dwive + $notime=1;
        J.begins ||= do {
            ok(1, "J.name begins");
            $beg;
        };
        $beg = hitime();
        
        my $oJ = J.R; # v inside oJ is J
        my $oG = oJ.y.G;
        Rw $t + $tes $n $oJ:J $J:oJ $A:oJ.1 $G:oG;
        
        J.output = oG.ouJ if oG.ouJ;
        delete J.tacall;
        $sel || J.testsRun > J.lasttestsrun &&
        ok(1, "Took ".G&ron,hitime()-$beg );
        return J.output if J.output && defined $sel;
    }
    $sel ||
    ok(1, "Total ".G&ron,hitime()-J.begins );
    
    J.output
Telvis: |
    c&te = A.ii.theu;
    c&ot = "";
    my $Q = $C;
    A.4.c.testC = $C;
    # same C each time as Tesh notime
    delete C&ofts;
    my $t;
    
    t.es = $tes;
    t.cs = sub {
        my ($c,$t) = @_;
        $c = {ntos=>$c} if $c && !ref $c;
        C.c.ot = $1 if c.ntos =~ s/^(\w+)\///;
        map { G&xot,$c,$_ } G&peel,$1 if c.ntos =~ s/,(.+)$//;
        $tes->($t,1,$c)
    };
    t.ntos = sub { # get the oscillator A (s) given e is n of J
        my ($j,$want) = @_;
        ($j) = values %{j.c.tug};
        return $j if $want eq 'mo';
        $j = j.c.s || die "No C on ".ki$j;
        # the last Hows mo C
        $j = j.sc.J || die "No J on ".ki$j;
        return $j if $want eq 'J';
        $j = j.sc.s || die "No s on ".ki$j;
        $j
    };
    my $toc = t.toc = {};
    c&mks = sub {
        my ($C,$T) = @_;
        T.oke = 1;
        my $se = Q.c.te;
        my $bang = 0; # path?! means avoid o
        if (my $p = c&ntos) {
            my $sp = sub {[split / |,/, shift ]};
            my $output = $sp->($1) if $p =~ s/^(.*)\?(\S+)?(!)( .+)?$/$1$4/;
            my $nav = $2;
            $bang = 1 if $3;
            $p = $sp->($p);
            $se = t.ntos->($se);
            
            if ($output || C.c.see) {
                $output ||= $sp->(C.c.see) if C.c.see && C.c.see ne '1';
                $output = $output ? G&pint,$se,@$output : $se;
                $output = G&pint,$output,split'-',$nav if $nav;
                oJ.output = $output;
                C.c.return ||= oJ.output;
                return [] if C.c.see;
            }
            
            $se = G&pint,$se,@$p
        }
        C.c.return ||= $se;
        $bang && return ['Outputting something'];
        
        my $oc = {};
        oc.noz = 1 if c&noz;
        oc.nonext = 1 if c&nonext;
        $oc.>$_ = $toc.>$_ for keys %$toc;
        my $ot = c&ot = c&ot || Q.c.ot || c&test.'-'.C&l;
        
        
        my $AV = delete A.V;
        my $cv = Q.c.ocv || 6;
        my $i = Q.c.oi || $J;
        my $o = c&o = G&A,o=>$cv=>$i=>$se,$ot,$oc;
        A.V = $AV if $AV;
        
        # c&tac=1;
        my $l = o.c.rsl || die "no rsl";
        $l = [grep { c&grepl ->($_) } @$l] if c&grepl;
        $l
    };
    c&posts = sub {
        my ($C,$T) = @_;
        return unless A.V || A.Ve || C.c.question;
        1 && saybl "No items for: C.sc.l" if !@{c&s};
        1 && saybl "the ".slim(10,c&ot).": ".$_ for @{c&s};
    };
    #c more stuff
    t.siim = sub {
        my ($Y,$sc,$h) = @_;
        my $ii = Y.ii;
        $ii = Y.sc.ii if $sc;
        $h = sprintf"%-12s",$h if $h;
        $h .= " Y.c.sip Y.t 2=Y.2.t: ";
        $h .= 'sc' if $sc;
        return "$h undef" if !$ii;
        "$h   ii ".join" - ",
        map { 
        my $de;
        if ($_ eq 'mo') {
            my $mo = $ii.>$_ || die "No mo";
            my $tw = mo.y.tw || die "No tv: ".ki$mo;
            $de = "*" if tw.fis;
        }
        $_.$de
        } sort keys %$ii
    };
    t.gout = sub {
        my ($Y,$p) = @_;
        $p = [split '-', $p] if !ref $p;
        my $h = join(' ',@$p);
        my $sc = pop @$p if $p->[-1] eq 'sc';
        $Y = G&pint,$Y,@$p if @$p;
        t.siim->($Y,$sc,$h);
    };
    c&iiuse = 'next';
    t.lookii = sub {
        my ($p) = @_;
        my $s = t.ntos->(c&te);
        my $ii;
        if ($p) {
            $p = [split '-', $p] if !ref $p;
            $ii = G&pint,$s,@$p;
        }
        else {
            $ii = s.sc.ii;
        }
        t.anii->($ii);
    };
    t.anii = sub {
        my $ii = shift;
        my @m;
        my $anii;$anii = sub {
            my ($c) = @_; #
            my @m;
            push @m, "c.t c.y.cv has:";
            if (c&iiuse eq 'z') {
                for my $e (@{c.sc.z}) {
                    push @m, " - e.t e.y.cv    ".ki(e.c)."      ".ki(e.sc);
                    $m[-1] =~ s/\n/\\n/g;
                }
            }
            else { # use next
                my $e = c.y.in;
                while ($e) {
                    push @m, " - e.t e.y.cv    ".ki(e.c)."      ".ki(e.sc);
                    $m[-1] =~ s/\n/\\n/g;
                    $e = e.y.next;
                }
            }
            if (my $ov = c.y.over) {
                push @m, " y over:",
                    map { "  $_" } $anii->($ov);
            }
            @m;
        };
        for my $t (sort keys %$ii) {
            my $c = $ii.>$t;
            push @m, $anii->($c);
        }
        \@m;
    };
    return $t
ElvisElvises: | # J e J,
    my $t = Rw Telvis;
    
ElvisWhole: | # o replicates C tv,i,ii
    my $t = Rw Telvis;
    # feed J.sc.ii onto s.sc.ii without osc
    # see ii as a vortex including tv
    # even lv
    # whose objects we copy, since y.in
    
    if ($n == 0) {
        c&te =
        n ElvisWhob
        t.cs->('sc lastK c s','source');
        
        my $W = t.ntos->(c&te,'J');
        my $ii = W.sc.ii;
        t.cs->({s=>t.anii->($ii)},'source ii');
        
        ii.men.y.oun = ii.seg;
        ii.men.y.tw.singing.y.monic = ii.seg.y.tw.eye;
        ii.whatever = ii.seg.y.tw.ran;
        
        # is A, see for C too
        c&te = $W;
        c&ot = 'whole';
        c&ocv = 7;
        
        t.es->("See somewhat");
        
        my $uu = J.sc.ii;
        t.cs->({s=>t.anii->($uu)},'destination ii');
        
        is uu.men.y.oun, uu.seg, "men youn = seg";
        is uu.men.y.tw.singing.y.monic,
            uu.seg.y.tw.eye,
            "men singing ymonic = seg eye";
        isnt uu.seg, ii.seg, 'seg not seg';
        isnt uu.men.y.tw.singing, ii.men.y.tw.singing,
            'men singing not men singing';
        
        is uu.whatever, uu.seg.y.tw.ran, "whatever can be seg ran";
        isnt uu.whatever, ii.whatever, "whatever not whatever";
    }
    elsif ($n == 1) {
        # is C, we arg m=A to get understandings
        c&te = A.ii.theu;
        c&ot = 'whole';
        c&ocv = 7;
        t.toc.m = 'A';
        my $i = c&oi = G&Ct,[receiver=>5=>{s=>'whatisnow'},{efopia=>'n'}];
        ok !i.sc.ii, "i no ii yet";
        t.es->("A whole thing"=>''=>{grepl=>sub {
            $_[0] =~ /W\+of|  xot/;
        }});
        my $ii = i.sc.ii;
        ok $ii, "i has ii";
        isnt ii.D, A.ii.D, "D not D";
        isnt ii.i.y.tw.xot, A.ii.i.y.tw.xot, "xot not xot";
        
    }
DodA: |
    local A.V = 1;
    my $s = c&f = c&s;
    my $top = ss&top || s.y.in || die "o A from no sc top or yin: ".ki$s;
    c&finds.i = 1 if ss&i;
    c&finds.ii = 1 if ss&ii;
    c&s = $top;
    c&m = 'C';
    
DodEven: |
    local A.V = 1;
    # make an o.y.D ref index at the top
    # warn if same thing in many places, unless diff is same?
    my $l = c&j.y.in;
    my $Dl = {};
    my @Do;
    my $el;$el = sub {
        my ($l,$ind,$way) = @_;
        my $r = l.y.r || die "l no yr: ".ki$l;
        my $o = r.c.o || die "r no co: ".ki$r;
        my $D = o.y.D || die "o no yD: ".ki$o;
        my $j = o.y.j || die "o no yj: ".ki$o;
        if (my $pre = $Dl.>$D) {
            die "Has already a D.t D.y.cv: from ".ki$pre;
        }
        $Dl.>$D.>j.c.Co.t = $l;
        push @Do, $o;
        
        #saybl "$ind $way l.t l.y.cv     ".ki o.y;
        l.y.in && $el->(l.y.in, $ind."    ", "yin  ");
        l.y.next && $el->(l.y.next, "$ind", "ynext");
    };
    $el->($l);
    
    # indexes
    for my $fi (keys %{c&finds||{}}) {
        my $fr = c&f.sc.>$fi || die "o cf no $fi; ".ki$C;
        my $to = c&i.sc.>$fi ||= {};
        for my $k (keys %$fr) {
            my $v = $fr.>$k;
            if (my $re = $Dl.>$v) {
                if (1 < keys %$re) {
                    die "Many same yonder:"
                        ." y$k\t v.t v.y.cv: ".wdump 2, $re;
                }
                my ($c) = values %$re;
                $to.>$k = $c;
            }
            elsif (ref $v ne 'HASH') {
                $to.>$k = $v;
            }
            else {
                die "Not coming: ".ref($v).'  '.ki($v)
                    .wdump 2, A&rsl;
            }
        }
        for my $k (keys %$to) {
            $fr.>$k || next;
            delete $to.>$_;
        }
    }
    
    # our C's ys, in/up/next/prev already linked
    # TODO grow to seeing same objects in many places
    #   even inside a z? 
    # how? el + T like to lv for both places
    #   el=6 when things it cares about happen in this wave?
    for my $o (@Do) {
        my $D = o.y.D || die "o no yD: ".ki$o;
        my $l = o.y.l || die "o no yl: ".ki$o;
        for my $k (keys %{D.y}) {
            my $v = D.y.>$k;
            ref $v || next;
            my $re = $Dl.>$v;
            # only keeps links to things we were given
            $re || next;
            if (1 < keys %$re) {
                die "Many same yonder:"
                    ." y$k\t D.t D.y.cv: ".wdump 2, $re;
            }
            my ($c) = values %$re;
            if (l.y.>$k eq $c) {
                # already
            }
            else {
                l.y.>$k = $c;
            }
        }
    }
    
ElvisWhob: |
    n do=>1
    my $mod = sub {
        my $of = shift;
        n /(.+)-()(.+)/,'%of:'.$of for @_
    };
    $mod->(qw{seg ran-dome eye-stuff taking-sat to-places});
    $mod->(qw{men singing-bride of-south east-cs});
    # random ii
    u alact
    n \'of:mo'
    duire 3:
        # pieces
    n \'of:u'
    moreso 2:
        # moreso
ElvisDialects: | # J u Dialect, deeply rooted # TODO TODO TODO
    my $t = Rw Telvis;
    #A.V = 1;
    
    # localised implica expanded into universal (still localised)
    # eg make everything acgt:s
    
    # how to isolate pure data entry from Jing
    # encode not sJ or anywhere in the mo that sJ:
    # so our J/their our-minded parts (eg n root) dont get the encoding
    
    #  # may want to use a clear head at mo J 5, ie
    # takes our readings of impulse in 4 to the control dome
    # J inter language space of 5, the permissions, net gear
    # so for now A.2.ii = A.5.ii and T.seek=1 re G&t us
    # and eg the root n in J 6 will be a normal op
    
    #  # decompression wants to live in of=D and be for nonJ
    # and be the thing knowing/isolating a ghost
    # making A.D = receipt for the pin/scheme/O cause/elvis handling
    # or the convo/dialect state applied within
    # falling A bounds like .mo:
    
    # U al4noJ 3 spawns our encoding on the J6ing.mo:
    #     A.D = {self,J=A.D}
    #         marking D above ours (unless already) as the norm for doing J
    # then mo dome 2:
    #    A.D = A.D.J if c&J && A.D && A.D.J;
    #       peels off encodings/holes to A.mo.up.mo's intention
    #         for this A.mo, so it can speak nonJ n normally
    #   runs D
    #        with A.D for direction/self
    # and U al4noJ 7:
    #    finishes our encoding
    
    # D may make good interface to pages to reset (when J 6)
    # or unrestart (when S sleeps)
    # or partition (with names) and despatch to whatever process
    
    # so encodings should all of=D
    # a W reverses line protocols from remote stream
    # via m into golden box acum space
    # fills <5 at lum top, 8-9 lum/3, 7-8 lum/7, etc towards 555555555555
    # into streams of atoms for your A.3 to officially reposition
    
    # of=U = runs when mind made up/down
    # of=M = for the $M produced by 6, incs depth of atoms
    # of=S = check for escaping gas (sleeps minor changes)
    
    # A.2 to change to A.1 whenever
    
    # but for now:
    # the encodings are all in 42-43, which s& or cv=9 skips over
    # could be more pronounced how its not for J or its descendants
    #  by hanging encodings on/in an A.D, which replants at 6
    #  until that J brings its own mind onto the A
    # simple stuff should work
    
    if ($n == 0) {
        c&te =
        n ElvisDialecto
        t.cs->('sc lastK c s','dialect decompressed');
        t.cs->({s=>t.lookii->()},'have ii');
    }
    elsif ($n == 1) {
        c&te =
        n ElvisDialecto
        t.cs->('sc lastK c s','dialected change stuff');
    }
    elsif ($n == 2) {
        c&te =
        n ElvisDialecto
        t.cs->('sc lastK c s','dialect changes');
    }
    elsif ($n == 3) {
        c&te =
        n ElvisDialectos
        t.cs->('sc lastK c s','u Cee with i things once collasped in pin');
        t.cs->('sc lastA 2 sc u sc ii i y tw rand,nonext','see i rand');
        # T # the kind that keeps a fork waiting,
        # does the new ghost's remainder of this way, lexicals -> $ar
        # and maybe knows how to serve data/analysis forms to pud,
        # which keeps running in the end of the first run
    }
ElvisDialectos: |
    u Cee
    n $_=>2=>$_ for "Doowop";
    n $_ eq 4 && 3 || $_=>'3'.$_ => G&rand,7  for 1..7;
ElvisDialecto: | # TODO n alact before u alact drops stuff
    1&&sayyl "Actred";
    if (J.bowls++ < 2) {
        u alact
    }
    else {
        u alacgts
    }
    n alact
    my $hum = ',cr:ab' if J.bowls > 1;
    jasm: %fo:late$hum
        # rubbing
    joints: %fo:river,of:42
        "southward $s"
    n \'of:not'
    semio:
        # tic tic;sdigjshgisdf
    u alacgts
    sedio:
        # tic tic
    
alact: | # aka a
    # make acts
    n alacgts
    alact 423: %acgt:s,act,of:mo
        s&act = 1 if !exists s&act;
        s&of ||= C.t;
alacgts: | # aka i
    n alof
    alacgts 421: %acgt:s,act,of:mo
        s&acgt = 's' if !exists s&acgt;
alof: | # auto of, i or whatever was .c.of'd
    n al4noJ
    alof 422: %acgt:s,act,of:mo
        return if s&J;
        my $Y = A.mo.up.mo;
        if (c&of) {
            C.t && die "of had t: ".ki$C;
            Y.sc.vse.of = c&of;
            return T.not = 1;
        }
        my $def = 'i';
        $def = Y.sc.vse.of if Y.sc.vse && Y.sc.vse.of;
        s&of ||= $def;
al4noJ: | # skip codings for J
    al4noJ 42: %acgt:s,act,v:sJ,of:mo
        T.Z.43 = $A;
    # the mo J 6 may use mind for created's root, etc.
    al4nonine 42: %acgt:s,act,t:ycv:0.9,of:mo
        T.Z.43 = $A;

a: | # act
    u allact
    n allact
    n 'allareact=1'=>42,<<''
        C.sc.act = 1 if !exists C.sc.act;
        C.sc.code = C.t if !exists C.sc.code;
i: | # ACGTs sub for h/A.i
    n allacgts
O: | # s&OSCillators
    n allsvse
c: | # of something c.? acts
    n allc
s: | # of something sc.? acts
    n alls
    

