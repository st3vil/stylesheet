PiMachine: | # all that is
    n Sequencing
    n ForJ
    n Jingle
    n Stuff
    n ThatWillBe
Sequencing: |
    n C
    n To
    n Day
    n Tube
ForJ: |
    n Sea
    n With
    n Tunnel
    n Jelly
Jingle: |
    n Compliers
    n Walks
    n Stashi
Stuff: |
    n Triangle
    n Hoop
    n Circle
ThatWillBe: |
    n Tan
    n Tal
    n Komp
MakePi: | # make code,
    my $ii = {};
    
    my $dig = sub {
        my $tW = shift || return;
        $tW = {%{$tW}};
        $tW->{$_} = readlink "w/digway/$_" for keys %$tW;
        $tW;
    };
    
    my $main = 'PiMachine';
    my $see = G.way.>$main;
    my (@bit) = $see =~ /^n (\w+)$/sgm;
    
    my $s = {};
    for my $bit (@bit) {
         my $fd = "w/pimash/$main/$bit";
        my $ol = LoadFile($fd.'.g') if -f $fd.'.g';
        
        my $v = {};
        if (!$ol || ki($ol) ne ki($dig->($ol))) {
            sayre "$main $bit unstuck: \n".ki($ol)."\n ne\n".ki($dig->($ol)) if $ol;
            n $bit
            my $jt = G.oin.inJ;
            my $Day = $jt->{$bit};
            my $tW = {};
            my $su;$su = sub {
                my $J = shift;
                my $v = J.El.Pre.tv || die "J.name no tv";
                map { _.sc.J ? ($_,$su->(_.sc.J)) : $_ }
                grep { _.y.cv < 0.9 || do{$tW->{_.t} = $_; 0} } values %$v;
            };
            my $N = [$su->($Day)];
            for my $C (@$N) {
                Rw ym/conoi $noAI=1 $C $v;
            }
            DumpFile($fd.'.g',$dig->($tW));
            DumpFile($fd.'.v',$v);
        }
        else {
            $v = LoadFile($fd.'.v');
        }
        while (my ($k,$tv) = each %$v) {
            while (my ($t,$cvs) = each %$tv) {
                while (my ($cv,$C) = each %$cvs) {
                    $s.>$k.>$t.>$cv = $C;
                }
            }
        }
    }
    
    my $v = $s;
    for my $of (keys %$v) {
        my $o = $ii->{$of} = {t=>$of,y=>{cv=>0.001},c=>{W=>'of'}};
        my $c = $v->{$of};
        my $la = $o;
        for my $cv (sort keys %$c) {
            my $ts = $c->{$cv};
            for my $t (sort keys %$ts) {
                my $z = $ts->{$t};
                Rw CoBabbler $C:z;
                my $y = eval z.c.s;
                die "Throcompile $of z.y.cv: z.t:"
                    .ind('  ',$@)."\n\n z.c.s\n" if $@;
                die "Not code: z.t z.y.cv: $@\n".ki $z if ref $y ne 'CODE' && !z.sc.subpeel;
                z.c.code = $y;
                if ($la eq $o) {
                    la.y.in = $z;
                }
                else {
                    la.y.next = $z;
                    z.y.prev = $la;
                }
                $la = $z;
            }
        }
    }
    
    my $i = {};
    my $n = ii.i;
    while ($n) {
        if (n.c.code) {
            $i->{n.t} = n.c.code;
            ii.i.y.tw->{n.t} = $n;
        }
        $n = n.y.in || n.y.next;
    }
    
    ($i,$ii)
CoBabbler: | # bake code
    my $sw = {};
    $sw.>$_ = 'say' for qw'saygr saybl sayyl sayre say';
    %$sw = () if C.sc.nobasay;
    for (keys %$sw) {
        my $if = $_ ne 'sayre' ? "A\.V && " : "";
        C.c.s =~ s/^(\s*)$_ ([^\n]+?)((?: (?:for|if) .+)?;?)$/${1}${if}G\.h->(\$A,\$C,\$G,\$T,'$sw->{$_}','$_',$2)$3/sgm;
    }
    
    C.c.s =~ s/\bs\&(\w+)/C\&$1/sgm;
    C.c.s =~ s/\bA\&(\w+)/A\.c\.$1/sgm;
    C.c.s =~ s/\ba\&(\w+)/A\.sc\.$1/sgm;
    C.c.s =~ s/\b((?!u)\w)s\&(\w+)/$1\.sc\.$2/sgm;
    C.c.s =~ s/\b(\w)c\&(\w+)/$1\.c\.$2/sgm;
    
    C.c.s = G&parse_babbl,C.c.s;
    
    # change J.n 
    C.c.s =~ s{\$J->\{([unm])\}->\((\$A,\$C,\$G,\$T?)(, ?\$M)?}
        {\$G->\{h\}->($2,"$1"$3}sgm;
    
    C.c.s
Zome: | # return a new J
    my ($i,$ii) = Rw MakePi;
    
    my $B = $A;
    my $A = {};
    A.sc.i = A.i = $i;
    A.sc.ii = A.ii = $ii;
    my $G = A.i.G->($A,$C,$G,$T);
    A.i.>$_ = B.I.>$_ for qw'parse_babbl';
    
    $A = G&A,'so';
    my $J = G&J,$A,'os';
    $A.>$_ = $A for 2,3,4;
    
    # A.* will inherit, A.sc.* is ours (usually)
    A.sc.ii = A.ii;
    A.sc.i = A.i;
    
    my $z = [sort {a.y.cv <=> b.y.cv || a.t cmp b.t}values%{A.ii}];
    my $u = G&Ct,[theu=>1=>'steve',{z=>$z}];
    A.ii.>u.t = $u;
    u.y.tw->{_.t} = $_ for @$z;
    
    $J
P: |
    u urw
    u UpPg
    n Zupe=>-run
pi/run: |
    symb: %hs:394,fs:12
        R
    n jeio=>2=>C.t=>'%dos:runs'
runs: |
    my $i = e&hC ->[-1];
    saybl ki $_ for @{ e&hC };
    G&zen,Com=>[dollarsworth=>''=>"Blagna",{pi=>'dae'}];
Com: |
    u urw
    u UpPg
    y.at.anch = "Noteal";
    ($A)=
    stuff:
        is
    say "Yer $$";
    G&liz,Com=>$_ for sub {
        my ($k,$s) = @_;
        saygr "Yer $$";
        #Rw waitme re;
        fork() ||
        Rw comput $s;
    };
comput: |
    say "Yer $$";
    sayyl "Yup: ".wdump 3, $s;
    exec 'perl got Zupe 4 b';
    die "BVack:";
    exit;
    
Zop: |
    u urw
    y.clos = 1;
    
    J.thou++ || do {
        n ElvisWorlds=>-test
    };
    J.output || exit;
    
    sayyl "Making pud...";
    m wk=>-pud=>{s=>J.output},'%hs:375,ws,wi:30%'
    
    
Zupe: | # run Zome, output pud
    u urw
    y.clos = 1;
    
    J.thou++ || do {
        n ElvisWorld=>-test
        n ElvisLeaves=>-test
    };
    J.output || exit;
    
    sayyl "Making pud...";
    m wk=>-pud=>{s=>J.output},'%hs:375,ws,wi:30%'
    
pi/test: |
    my $c;
    c.pin = 'ATest';
    c.tell = J.mo.J;
    c.man = c&man if c&man;
    n C.t =>W=> $c
ATest: |
    my $m = [ C.t ];
    my $out = Rw Tesh + $m;
    if ($out) {
        my $el = c&tell;
        el.output.>C.t = $out;
    }
    
Tesh: | # wrap test way
    # give prototype J/A to the t, the test J as oJ
    my ($t,$sel) = @$m;
    my $tes = sub {
        my $C = G&tC,\@_;
        c&test ||= do {
            C&l = C.t;
            C.t = $t;
            J.testRun;
        };
        C.c.tac = 1 if C&l =~ s/!$//;
        C.c.question = 1 if C&l =~ s/\?$//;
        c&tac = 1 if J.tacall;
        my ($aye) = map {_.M->[0]}
        n $C
        aye.c.return
    };
    
    #die "Just $sel" if $sel;
    
    J.R ||= Rw Zome;
    
    my $beg = hitime();
    while (!J.begins || J.testsRun > J.lasttestsrun) {
        J.lasttestsrun = J.testsRun;
        J.testUntil = J.testRun + 1;
        my $n = defined $sel ? $sel :
            Rw Dwive + $notime=1;
        J.begins ||= do {
            ok(1, "J.name begins");
            $beg;
        };
        $beg = hitime();
        
        my $oJ = J.R; # v inside oJ is J
        my $oG = oJ.y.G;
        Rw $t + $tes $n $oJ:J $J:oJ $A:oJ.1 $G:oG;
        
        J.output = oG.ouJ if oG.ouJ;
        delete J.tacall;
        $sel ||
        ok(1, "Took ".G&ron,hitime()-$beg );
        return J.output if J.output && defined $sel;
    }
    $sel ||
    ok(1, "Total ".G&ron,hitime()-J.begins );
    
    J.output
    J.sc.u.c.o = 'oscd';
Telvis: |
    c&te = A.ii.theu;
    c&ot = "this";
    my $Q = $C;
    
    my $tos = sub {
        my ($c,$t) = @_;
        $c = {ntos=>$c} if $c && !ref $c;
        C.c.ot = $1 if c.ntos =~ s/^(\w+)\///;
        map { G&xot,$c,$_ } G&peel,$1 if c.ntos =~ s/,(.+)$//;
        $tes->($t,1,$c)
    };
    my $ntos = sub { # get the oscillator A (s) given e is n of J
        my $j = shift;
        ($j) = values %{j.c.tug};
        $j = j.c.s || die "No C on ".ki$j;
        # the last Hows mo C
        $j = j.sc.J || die "No J on ".ki$j;
        $j = j.sc.s || die "No s on ".ki$j;
        $j = G&pint,$j,@_ if @_;
        $j
    };
    my $toc = {};
    c&mks = sub {
        my ($C,$T) = @_;
        T.oke = 1;
        my $se = Q.c.te;
        if (my $p = c&ntos) {
            my $sp = sub {[split / |,/, shift ]};
            my $output = $sp->($1) if $p =~ s/^(.*)\?( .+)?$/$1$2/;
            $p = $sp->($p);
            $se = $ntos->($se);
            
            if ($output || C.c.see) {
                $output ||= $sp->(C.c.see) if C.c.see && C.c.see ne '1';
                oJ.output = $output ? G&pint,$se,@$output : $se;
                C.c.return ||= oJ.output;
                return [] if C.c.see;
            }
            
            $se = G&pint,$se,@$p
        }
        C.c.return ||= $se;
        my $oc = {};
        oc.noz = 1 if c&noz;
        oc.nonext = 1 if c&nonext;
        $oc.>$_ = $toc.>$_ for keys %$toc;
        my $ot = c&ot || Q.c.ot;
        
        my $AV = delete A.V;
        my $o = G&A,o=>6=>$J=>$se,[$ot,'',$oc];
        A.V = $AV if $AV;
        
        # c&tac=1;
        
        my $l = o.c.rsl || die "no rsl";
        
        (A.V || A.Ve || C.c.question) &&
        1 && saybl "the Q.c.ot: ".$_ for @$l;
        $l
    };
    ($tos,$ntos)
ElvisWorlds: | # J makes J, gather We in self
    my ($tos,$ntos) = Rw Telvis;
    
    if ($n == 0) {
        c&te =
        n Whys
        $tos->('s1omp/sc lastK c s','two wormholes unite');
    }
    elsif ($n == 1) {
        c&te =
        n Whys
        $tos->('s1omp/sc lastK c s','two wormholes unite');
    }
    elsif ($n == 3) {
        c&te =
        n Whys
        $tos->('s1omp/sc lastK c s','two wormholes unite');
    }
    elsif ($n == 3) {
        c&te =
        n Whys
        $tos->('s1omp/sc lastK c s','two wormholes unite');
    }
    elsif ($n == 4) {
        c&te =
        n Whys
        $tos->('s1omp/sc lastK c s','two wormholes unite');
    }
Whys: |
    J.herefirst = "Was htis";
    J.bowls++;# == 1 || 3;
    n Whysl
    
    mix: %acgt:s,v:chume,oft:i
        G&yellow,$C,'tool'
    elect: %acgt:s,v:chume,oft:i
        G&blues
        # e
    music: %acgt:s,v:sJ,oft:dowse
        # of sandy
    bull: %oft:tools
        motorise time machine
    trail 16: %acgt:s,v:cmoresel,oft:tools,Wv:2
        1c&dol++;
    
Whysl: |
    J.bowls++ ||
    n skinny=>4=>{}
    J.herefirst && die "Was not J.t";
    my $hum = ',hum:4' if J.bowls == 2;
    
    trail: %acgt:s,v:ctar,oft:tools$hum
        G&yam,$A,'tool';
    mix: %acgt:s,v:chume,oft:i$hum
        G&yam,$A,'tool';
    dowse: %acgt:s,v:sJ,oft:dowse
        G&yam,$A,'tool';
    trail 22: %acgt:s,v:ctar,oft:tools
        # and
        1c&dali++;
    J.bowls < 3 &&
    trail 16: %acgt:s,v:ctar,oft:tools,Wv:2
        # or
        1c&dali++;
        
        
        
        
ElvisWorld: | # J makes, puts elvised We in self
    J.sc.u.c.o = 'oscd';
    my $e = A.ii.theu;
    my $ot = "this";
    my $o;
    
    my $tos = sub {
        my ($c,$t) = @_;
        $c = {ntos=>$c} if $c && !ref $c;
        $ot = $1 if c.ntos =~ s/^(\w+)\///;
        map { G&xot,$c,$_ } G&peel,$1 if c.ntos =~ s/,(.+)$//;
        $tes->($t,1,$c)
    };
    my $ntos = sub { # get the oscillator A (s) given e is n of J
        my $j = shift;
        ($j) = values %{j.c.tug};
        $j = j.c.s || die "No C on ".ki$j;
        # the last Hows mo C
        $j = j.sc.J || die "No J on ".ki$j;
        $j = j.sc.s || die "No s on ".ki$j;
        $j = G&pint,$j,@_ if @_;
        $j
    };
    my $toc = {};
    c&mks = sub {
        my ($C,$T) = @_;
        T.oke = 1;
        my $se = $e;
        if (my $p = c&ntos) {
            my $sp = sub {[split / |,/, shift ]};
            my $output = $sp->($1) if $p =~ s/^(.*)\?( .+)?$/$1$2/;
            $p = $sp->($p);
            $se = $ntos->($se);
            
            if ($output || C.c.see) {
                $output ||= $sp->(C.c.see) if C.c.see && C.c.see ne '1';
                oJ.output = $output ? G&pint,$se,@$output : $se;
                C.c.return ||= oJ.output;
                return [] if C.c.see;
            }
            
            $se = G&pint,$se,@$p
        }
        C.c.return ||= $se;
        my $AV = delete A.V;
        my $oc = {};
        oc.noz = 1 if c&noz;
        oc.nonext = 1 if c&nonext;
        $oc.>$_ = $toc.>$_ for keys %$toc;
        $o = G&A,o=>6=>$J=>$se,[$ot,'',$oc];
        A.V = $AV if $AV;
        
        #A.V = 1 if $n == 10;
        # c&tac=1;
        
        my $l = o.c.rsl || die "no rsl";
        
        (A.V || A.Ve || C.c.question) &&
        1 && saybl "the $ot: ".$_ for @$l;
        $l
    };
    if ($n == 0) { #c
        $e =
        n Hows
        $tos->('ziptop/c zip sc top','Hows zip top');
        $tos->('zoptop/c zop sc top','Hows zop top');
        $tos->('zipp/c zip sc aroz,noz','Hows zip aroz');
        $tos->('zip1zop/c zip sc zop,noz','Hows zip zop');
        $tos->('zop1allz/c zop sc aroz,noz','Hows zop aroz');
    }
    elsif ($n ==1) {
        $e =
        n Hows
        my $zip =
        $tos->('zlp/c zip? sc top','Hows zip top again');
        delete oJ.output;
        my $cha = zip.c.cha.C;
        is 0+keys%$cha, 3, "3 changed";
        my $gone = cha.gone;
        ok $gone, "was gone";
        is join(', ',sort keys %$gone), 'skinny', "gone has keys == skinny";
        my $sk = G&pint,$gone,skinny=>0.4;
        is sk.t, 'skinny', "skinny is";
        ok !G&pint,$gone,Hows=>0.9 , "Hows tv not gone";
        ok !G&pint,$gone,'Hows' , "Hows t not gone";
        
        my $u =
        $tos->('zop2top/c zop? sc top','Hows zop top');
        delete oJ.output;
        $tos->({s=>u.c.rsl},'zop rsl shows goner');
        toc.noz = 1;
        $tos->('zip2zop/c zip sc zop','zip zop shows gone skinny');
        $tos->('zop2zop/c zop sc zop','zop zop shows gone skinny');
        $tos->('zop2inz/c zop sc inz','zop inz shows gone skinny');
        $tos->('zop2outz/c zop sc outz','zop outz shows gone skinny');
        delete oJ.output;
        delete toc.noz;
        $tos->('scomp/sc lastK c s','compression of gone skinny');
    }
    elsif ($n == 2) {
        $e =
        n Hows
        
        $tos->('zlo3p/c zip sc top','Hows zip top shows new trail');
        $tos->('zol3p/c zop sc top','Hows zop top shows new trail');
        # cant look at zop/inz because unhandled duplicate ty of trail
        $tos->('s3omp/sc lastK c s','compression of etc + trail');
    }
    elsif ($n == 3) {
        $e =
        n Hows
        
        $tos->('zlo4p/c zip sc top','Hows zip top shows changed trail');
        $tos->('zol4p/c zop sc top','Hows zop top shows changed trail');
        $tos->('zlo3p/c zip sc top','Hows zip top o diff');
        $tos->('zol3p/c zop sc top','Hows zop top o diff');
        $tos->('s4omp/sc lastK c s','compression of etc + changed trail');
        
        my $ii = 
        $tos->('s4ii/sc ii? tools,nonext','made ii tools');
        delete oJ.output;
        $tos->({s=>[ki$ii,1]},"ii looks good");
        my $s = $ntos->($e);
        is s.sc.ii, $ii, "ii same a tos'd return";
        ok !exists s.sc.i, "no i on s";
        my $Y = s.sc.lastA;
        my $H = Y.2;
        is H.sc.ii, $ii, "ii same on A2sii";
        ok !exists H.sc.i, "no i on A2si";
    }
    elsif ($n == 4) {
        #A.V = 1;
        #return;
        # explodes: unpositing into zopul makes empty We thing
        $e =
        n Hows
        
        $tos->('zlo5p/c zip sc top','Hows zip top shows gone trail');
        $tos->('zol5p/c zop sc top','Hows zop top shows gone trail');
        $tos->('zlo3p/c zip sc top','Hows zip top o diff');
        $tos->('zol3p/c zop sc top','Hows zop top o diff');
        my $s = $ntos->($e);
        ok !exists s.sc.ii, "no ii on s";
        ok !exists s.sc.i, "no i on s";
        my $Y = s.sc.lastA;
        my $H = Y.2;
        ok !exists H.sc.ii, "no ii on A2sii";
        ok !exists H.sc.i, "no i on A2si";
        #G.ouJ = j.sc.lastK.c.s;
        $tos->('s5omp/sc lastK c s','compression of gone trail');
    }
    
Hows: |
    J.sc.u.c.o = 'oscd';
    my $so = 's o,towe:l';
    $so = 's,tele:vise' if J.bowls;
    rakes: %acgt:$so
        robino
    
    leaves: %some:other,ma:ni,fo:la,t:e
        traces
    
    J.bowls &&
    surf:
        to rise
    
    J.bowls++ ||
    n skinny=>4=>{}
    my $hum = ',hum:4' if J.bowls == 4;
    J.bowls >= 3 && J.bowls <= 4 &&
    trail: %acgt:s,v:ctar,oft:tools$hum
        G&yam,$A,'tool';
        
        
        
        
        # and
        1c&dali++;
oft: | # perl modulator, stuff with you
    1 && saybl "We things C.c.W named C.t:   ".ki C.c.e;
    # should hup & acum C.sc.z
    for my $e ( e&_z ) {
        ec&s =~ s/\n\s*\n+/\n\n/sgm;
        es&seen = 2;
        ec&code = sub { "does e.t e.y.cv from C.t" };
    }
    C.sc.hi = 'lo';
    T.nose = 1;
    
ElvisLeaves: |
    #A.V = 1;
    #exit if $n > 3;
    my $tf = 't/Zupe/ElvisLeaves/theu';
    DumpFile($tf, A.ii.theu) unless -f $tf;
    my $e = J.theu ||= LoadFile($tf);
    my $o;
    my $ot = 'zimb';
    
    my $lshot = sub {
        my ($C,$l) = @_;
        my $m = c&lshot;
        return unless @$l > $m;
        @$l = (@{$l}[0..$m]);# "... snip x".(@$l-$m));
    };
    c&mks = sub {
        my $C = shift;
        $o = G&A,o=>6=>$J=>$e,$ot;
        
        #A.V = 1 if $n == 10;
        
        my $l = o.c.rsl;
        #  c&tac = 1;
        
        c&lshot && $lshot ->($C,$l);
        (A.V || A.Ve) &&
        saybl "the Dujis: ".$_ for @$l;
        $l
    };
    
    if ($n==0) { #c
        $tes->('whole u','',{lshot=>32});
    }
    elsif ($n==1) {
        my $m = e.sc.z->[4];
        m.sc.was = 'Here';
        $m = e.sc.z->[3];
        $m = m.y.in;
        $m = m.y.next || $m for 1..3;
        m.sc.epl = "Dop";
        m.c.s = "ACGT {} !";
        e.sc.eo = 'popup';

        $m = e.sc.z->[5];
        $m = m.y.in;
        $m = m.y.next || $m for 1..2;
        
        my $pr = m.y.prev;
        G&apart,next=>$pr;
        pr.sc.herre = 'OOOO';

        pop @{e.sc.z};
        
        $tes->('u messed with');
    }
    elsif ($n==2) {
        my $m = e.sc.z->[4];
        m.sc.was = 'Hur';
        $m = e.sc.z->[1];
        $m = m.y.in;
        G&apart,next=>$m for 1..3;
        G&toget,next=>m.y.next.y.next,$_ for G&Ct,[available=>6=>'makeether','%eo:fil'];
        $tes->('couple more');
    }
    elsif ($n >= 3 && $n <= 4) {
        $ot = 'dwell';
        my $la = G&Ct,[row=>6=>is=>'%hs:588'];
        my $te = G&Ct,[seen=>8=>is=>'%hs:588'];
        $e = [
            G&Ct,[row=>1=>is=>'%hs:588'] ,
            G&Ct,[reow=>1=>is=>'%hs:588'] ,
            G&Ct,[rodw=>5=>is=>'%hs:588'] ,
            $la, $te
        ];
        $e = G&Ct,[wo=>2=>{}=>{z=>$e}];
        
        if ($n == 3) {
            $tes->('el=1 when dup t');
        }
        else {
            la.t = 'som';
            te.sc.hs = 359;
            te.sc.know = 'ing';
            $tes->('mount');
        }
    }
    elsif ($n >= 5 && $n <= 8) {
        my $mo = e.sc.z->[1];
        my $om = G&Ct,[J=>4=>'codedpassage'=>'%acgt:3'];
        my $z = [
            $om,
            G&Ct,[moving=>6=>'codedpassage'=>'%acgt:3'] ,
            G&Ct,[squara=>7=>'codedpassage'=>'%acgt:3'] ,
        ];
        my $lom = G&Ct,[mo=>0.001=>{W=>'of'},{z=>$z}];
        my @io = (
            G&A,o=>2=>$J=>$mo,'Themo' ,
            $n < 7 && G&A,o=>2=>$J=>$lom,'Extra'
        );
        $e = {map{_.c.sip => $_ }grep{$_}@io};
        $ot = 'zip';
        
        if ($n == 5) {
            # c&mks ->();
            $tes->('W over without innards');
        }
        elsif ($n == 6) {
            om.sc.oh = "yeah $n";
            mo.y.in.sc.no = "case $n";
            $tes->('W over change some');
        }
        elsif ($n == 7) {
            mo.y.in.sc.casa = "case $n";
            $tes->('W over, chang, Extra gone');
        }
        elsif ($n == 8) {
            om.sc.oh = "yeah $n";
            mo.y.in.sc.no = "case $n";
            $tes->('W over, more change');
        }
    }
    elsif ($n == 9) { #c
        $ot = 'thanks';
        $e = [
            G&Ct,[innert=>6=>'codedpassage'=>'%acgt:3'] ,
            G&Ct,[snapsof=>6=>'codedpassage'=>'%acgt:3'] ,
            G&Ct,[moving=>6=>'codedpassage'=>'%acgt:3'] ,
            G&Ct,[squara=>7=>'codedpassage'=>'%acgt:3'] ,
        ];
        $tes->('see two');
    }
    elsif ($n == 10) {
        $ot = 'thanks';
        my $z = [
            G&Ct,[movie=>3=>'mae'=>{acgt=>3}] ,
        ];
        $e = [
            G&Ct,[innert=>6=>'codedpassage'=>'%acgt:3'] ,
            G&Ct,[moving=>6=>'codedpassage'=>{acgt=>3,z=>$z}] ,
            G&Ct,[gonk=>7=>'codedpassage'=>'%acgt:3'] ,
        ];
        $tes->('see one go, one come');
    }
    elsif ($n == 11) {
        $ot = 'thanks';
        $e = [
            G&Ct,[innert=>6=>'codedpassage'=>'%acgt:3'] ,
            G&Ct,[moving=>6=>'codedpassage'=>'%acgt:3'] ,
            G&Ct,[gonk=>7=>'codedpassage'=>'%acgt:3'] ,
        ];
        $tes->('see z disappear');
    }
    my $so = $o;
    my $one = 0.001;
    #$so = so.c.oo.C.theu.>$one;
    $so = J.sc.jo.zip.sc.oo.C.mo.>$one; # from oJ, the zip's mo 0.001
    return {p=>33};
    $so = so.sc.jo->{"z mo $one"};
    $so = so.c.Co; # the C currently othering under the recursionship of j
    $so = so.c.j.sc.oo.C.W; # through to the j again, all C it can see named W
a: | # act
    u allact
    n allact
    n 'allareact=1'=>42,<<''
        C.sc.act = 1 if !exists C.sc.act;
        C.sc.code = C.t if !exists C.sc.code;
i: | # ACGTs sub for h/A.i
    n allacgts
O: | # s&OSCillators
    n allsvse
c: | # of something c.? acts
    n allc
s: | # of something sc.? acts
    n alls
    

