PiMachine: | # all that is
    n Sequencing
    n Intel
    n ForJ
    n Tangle
    n Stuff
    
    n Art
    
    n Storage
    n Elvising
    n Tripical
Sequencing: | # stuff throat
    n To
    n Day
    J.gloway.>$_ = 1 for qw'CoBabbler CoArgulate';
    n Spells
    n Tube
Intel: | # congealments
    n FactorEase
ForJ: | # civilisation
    n Sea
    n With
    n Tunnel
    
    n Sleep
    n Jelly
Tangle: | # clamorous industrial
    n Circle

    n Compliers
    n Walks
    n Stashi
Stuff: | # oscillates time
    n Triangle
    
    n Hoop
    n Komp
    # time leaks:
    n Tal
MakePi: | # make ii of PiMachine
    my $ii = {};
    
    my $dig = sub {
        my $tW = shift || return;
        $tW = {%{$tW}};
        $tW->{$_} = readlink "w/digway/$_" for keys %$tW;
        $tW;
    };
    
    my $main = 'PiMachine';
    my $see = G.way.>$main;
    my (@bit) = $see =~ /^n (\w+)$/sgm;
    
    my $s = {};
    for my $bit (@bit) {
         my $fd = "w/pimash/$main/$bit";
        my $ol = LoadFile($fd.'.g') if -f $fd.'.g';
        
        my $v = {};
        if (!$ol || ki($ol) ne ki($dig->($ol))) {
            sayre "$main $bit unstuck: \n".ki($ol)."\n ne\n".ki($dig->($ol)) if $ol;
            n $bit
            my $jt = G.oin.inJ;
            my $Day = $jt->{$bit};
            my $tW = {};
            G&xot,$tW,Day.gloway if Day.gloway;
            my $su;$su = sub {
                my $J = shift;
                my $v = J.El.Pre.tv || die "J.name no tv";
                map { _.sc.J ? ($_,$su->(_.sc.J)) : $_ }
                grep { _.y.cv < 0.9 || do{$tW->{_.t} = $_; 0} } values %$v;
            };
            my $N = [$su->($Day)];
            for my $C (@$N) {
                Rw ym/conoi $noAI=1 $C $v;
            }
            DumpFile($fd.'.g',$dig->($tW));
            DumpFile($fd.'.v',$v);
        }
        else {
            $v = LoadFile($fd.'.v');
        }
        while (my ($k,$tv) = each %$v) {
            while (my ($t,$cvs) = each %$tv) {
                while (my ($cv,$C) = each %$cvs) {
                    $s.>$k.>$t.>$cv = $C;
                }
            }
        }
    }
    
    my $v = $s;
    for my $of (keys %$v) {
        my $o = $ii->{$of} = {t=>$of,y=>{cv=>0.001},c=>{W=>'of'}};
        my $c = $v->{$of};
        my $la = $o;
        for my $cv (sort keys %$c) {
            my $ts = $c->{$cv};
            for my $t (sort keys %$ts) {
                my $z = $ts->{$t};
                
                z.sc.coded ||
                Rw CoBabbler $C:z;
                
                my $y = eval z.c.s;
                
                die "Throcompile $of z.y.cv: z.t:"
                    .ind('  ',$@)."\n\n z.c.s\n" if $@;
                die "Not code: z.t z.y.cv: $@\n".ki $z if ref $y ne 'CODE' && !z.sc.subpeel;
                
                z.c.code = $y;
                
                if ($la eq $o) {
                    la.y.in = $z;
                }
                else {
                    la.y.next = $z;
                    z.y.prev = $la;
                }
                o.y.tw.>$t = $z;
                o.y.tv.>$t.>$cv = $z;
                $la = $z;
            }
        }
    }
    
    my $i = {};
    my $n = ii.i;
    while ($n) {
        if (n.c.code) {
            $i->{n.t} = n.c.code;
            ii.i.y.tw->{n.t} = $n;
        }
        $n = n.y.in || n.y.next;
    }
    
    c&iii && push @{c&iii}, $i,$ii;
    ($i,$ii)
Zome: | # compile PiMachine, return a new J
    my $iii = [];
    n MakePi=>W=>{iii=>$iii},'%qz'
    my ($i,$ii) = @$iii;#Rw MakePi;
    
    my $B = $A;
    my $A = {};
    A.sc.i = A.i = $i;
    A.sc.ii = A.ii = $ii;
    my $G = A.i.G->($A,$C,$G,$T);
    A.i.>$_ = B.I.>$_ for qw'parse_babbl';
    G.w = A.i.w || die "No w way";
    
    $A = G&A,'so';
    my $J = G&J,$A,'os';
    $J.>$_ = $A.>$_ = $J for 1,2,3,4,5;
    
    
    # A.* will inherit, A.sc.* is ours (usually)
    A.sc.ii = A.ii;
    A.sc.i = A.i;
    
    my $z = [sort {a.y.cv <=> b.y.cv || a.t cmp b.t}values%{A.ii}];
    my $ola;
    for my $o (@$z) {
        if ($ola) {
            ola.y.next = $o;
            #ola.y.over = $o;
            o.y.prev = $ola;
            #o.y.under = $ola;
        }
        $ola = $o;
    }
    my $u = G&Ct,[theu=>1=>'steve',{z=>$z}];
    A.ii.>u.t = $u;
    u.y.tw->{_.t} = $_ for @$z;
    u.y.in = $z->[0];
    u.sc.i = A.i;
    u.sc.ii = {%{A.ii}};
    delete u.sc.ii.theu;
    # ^ so no not found in self
    
    $J
CoBabbler: | # bake code
    my $sc; # exports, for bab caching

    my $sw = {};
    $sw.>$_ = 'say' for qw'saygr saybl sayyl sayre say';
    %$sw = () if C.sc.nobasay;
    for (keys %$sw) {
        my $if = $_ ne 'sayre' ? "A\.V && " : "";
        C.c.s =~ s/^(\s*)$_ ([^\n]+?)((?: (?:for|if) .+)?;?)$/${1}${if}G\.h->(\$A,\$C,\$G,\$T,'$sw->{$_}','$_',$2)$3/sgm;
    }
    
    #
    # 22Cs&blue -> A.2.2.c.s.sc.blue
    for my $l (qw'y c s') {
        my $nk = $l eq 's' ? 'sc' : $l;
        C.c.s =~ s/\b(up|\d+|A\w+?)(C)?$l\&(\w+)/
            my ($net,$see,$gks) = ($1,$2,$3);
            if ($net eq 'up') {
                $net = join'.','A',$net;
            }
            elsif ($net =~ m{^A.+}) { # A.L...
                # TODO split lc like words, know cs is c.s, etc
                $net = join'.',split'',$net;
            }
            else { # numbers
                $net = join'.','A',split'',$net;
            }
            $see = ".c\.s" if $see;
            $gks = "\.$gks" if $gks ne 'C';
            "$net$see\.$nk$gks"
        /smeg;
    }
    
    # s&eo -> C.sc.eo etc
    C.c.s =~ s/\bs\&(\w+)/C\&$1/sgm;
    C.c.s =~ s/\bA\&(\w+)/A\.c\.$1/sgm;
    C.c.s =~ s/\ba\&(\w+)/A\.sc\.$1/sgm;
    C.c.s =~ s/\b((?!u)\w)s\&(\w+)/$1\.sc\.$2/sgm;
    C.c.s =~ s/\b(\w)c\&(\w+)/$1\.c\.$2/sgm;
    C.c.s =~ s/\b(\w)y\&(\w+)/$1\.y\.$2/sgm;
    # S / T
    # sleepomatics
    my @num;
    for my $s ('S','T') {
        # become gotoable, for test frames
        c&s =~ s{^(\s*)$s(?: (\S+.*?))?\s*$}{
            my $l = $2;
            (my $label = $l) =~ s/\W+/_/sgm;
            if ($label eq '' && $s eq 'S') {
                $label = $l = 1 + @num;
                push @num, $label;
            }
            $label = $s."_$label: ";
            qq[$1${label}G\&$s,"doming","$l" || return;]
        }sgme;
    }
    sc.num = @num if @num;
    
    # look for th/$ing in A.?.th.ing and A.c.?.th.ing
    # trip if so
    for my $s ('trip') {
        c&s =~ s{^(\s*)$s (\S+)\s*$}{
            my $ind = $1;
            # 
            my (@n) = split '/', $2;
            my @opt = map {
                my $st = $_;
                my @lot;
                join " && ", $st, map {
                    push @lot, $_;
                    $st . join('',map{
                        /^\w+/ && !/\./ ? "\.$_" : "\.>$_";
                    } @lot);
                } @n;
            } "A\.$s", "A\.c\.$s";
            my $in = "(".join(" || ", @opt).")";
            my $quot = join',',map { /^\w+/ && !/\./ ? qq{"$_"} : $_ } @n;
            "$ind$in && G&"."$s,$quot;"
        }sgme;
    }
    
    c&s =~ s/^(\w+:)\s+$/$1/smeg && sayre "Blockquoter whitespace trimmed";
    
    # little sub maker
    # G may like to track lamda meta in a coderef => $D like way
    #    wants to be a function the sub passes through
    # one word args assumed to be many single letter args
    my $codes = sub {
        my @r = split',',shift;
        my $acgt;
        $acgt = shift(@r) if $r[0] eq 'acgt';
        $acgt = 1 if $r[0] =~ s/^acgt//;
        @r = split '', $r[0] if @r == 1;
        unshift @r, qw'A C G T' if $acgt;
        my $arg = " my (".join(',',map{'$'.$_}@r).") = \@_;"
            if @r;
        "sub {".$arg
    };
    c&s =~ s[(\W)\&(\w+(?:,\w+)*)?\{][$1.$codes->($2)]smeg;
    
    # each etc $data {    into:
    # while (my ($e,$tv) = each %$data) {
    # while (my ($t,$c) = each %$tv) {
    #   so the value tv is for t-ing into
    # DIY closing brackets
    # could replace with G&chew-ish call if more spec
    # and know indents to close
    my $doi = sub {
        my ($ind,$in,$from) = @_;
        my @in = split ',', $in;
        @in = split '', $in[0] if @in == 1;
        my @open;
        while (@in) {
            my $s = 'while (my ($'.shift(@in).',$';
            my $v = @in > 1 ? 
                $in[0].'v' : shift(@in);
            $s .= $v;
            $s .= ') = each %{'.$from.' }) {';
            $from = '$'.$v;
            push @open, $s;
        }
        @open = map { $ind.$_ } @open;
        join "\n", @open;
    };
    c&s =~ s/^(\s*)each (\w+(,\w+)*) (\S+) \{(\s*)$/
        $doi->($1,$2,$4);
    /smeg;
    
    
    # all without the not-in-blockquote intelising of:
    C.c.s = G&parse_babbl,C.c.s;
    
    # change J.n 
    C.c.s =~ s{\$J->\{([unm])\}->\((\$A,\$C,\$G,\$T?)(, ?\$M)?}
        {\$G->\{h\}->($2,"$1"$3}sgm;
    
    $sc
Spells: | # compile pabble (perlouse) and jabble (jsouse)
    # see  and levitate
    u i
    
    # bab:non,,'%subpeel'
    bitsof_babble:
        my $p;
        p.alive = qr/\$[\w]*[\w\->\{\}]+/;
        p.dotha = qr/[A-Za-z_]\w{0,3}(?:\.[\w-]*\w+)+/;
        p.oing = qr/\w*p.alive|p.dotha|[-\w]{8,}/;
        p.oint = qr/[\w\$\/\->\{\}\*]*[\w\$\/\->\.\}\*]+/;
        p.mwall = qr/(?:= |if |unless |^\s*)/;
        p.sur = qr/ if| unless| for| when|,?\s*$|;\s*/;
        $p
    
    #,'%bab:non'
    parse_babbl:
        G&pabble,$s
    
    pabble:
        my $p = G.sc.bitsof_babble ||= G&bitsof_babble;
        # gone:
        my $Jsrc = qr/(J\d*(?:\.\w+)?) (\w+)/;
        my $Jlump = qr/(\S+) (\S+)\s+(\S.+)/;
        $s =~ s/p.mwall$Jsrc $Jlump$/$1.$2->("$3\\t$4" => $5);/smg;
        .
        .
        my @s;
        my $indbe;
        my $inend;
        my $indun;
        my $angt = '<'.'<';
        for my $l (split "\n", $s) {
            my $s = $l;
            # things:
            $s =~ s/^(\w+)(?: (-?\w+))?:(?: (%.+))?$/n $1 =>'$2',$angt'',"$3"/smg;
            if ($indbe) {
                if ($indun eq 'NEXT') {
                    $s =~ /^(\s+)/ || die "Must Indunext:\n$s[-1]\n$s";
                    $indun = $1;
                }
                if ($s =~ $indbe) {
                    $s =~ s/^(\s*)\.(\s*)$/$1$2/;
                    $s =~ s/^$indun//
                        if defined $indun;
                    push @s, $s;
                    next;
                }
                else {
                    undef $indbe;
                    undef $indun;
                    if ($s !~ /^\s*$/) {
                        if ($inend) {
                            pop @s  if $s[-1] eq '';
                            push @s, $inend;
                        }
                    }
                    else {
                        $s = $inend if $inend;
                    }
                    undef $inend;
                }
            }
            my $ze = qr/$angt['"](\w*)['"]/;
            if ($s =~ /^(\s*)(?!#)\S.*$ze/) {
                if ($2) {
                    # for <#<'EOD' til ^EOD, etc
                    $indbe = qr/^(?!\Q$1\E)/;
                }
                else {
                    $indbe = qr/^($1\s+|\s*$)/;
                    $indun = 'NEXT';
                    $s =~ s/$ze/$angt.($1?"'$1'":"'STEVE'")/e;
                    $inend = 'STEVE' if !$1;
                }
            }
            .
            #c babable # expect closing brackets and insert J
            
            # eg Atime(2) = A.time->($J, 2)
            $s =~ s/(p.mwall)(\w*A)(\w+)\(/$1$2\.$3->(\$J, /smg;
            $s =~ s/(p.mwall)(\w*G)(\w+)\(/${1}G\.$3->(\$A,\$C,\$G,\$T, /smg;
            $s =~ s/(p.mwall)(\w*J)(\w+)\(/$1$2\.$3->(\$A,\$C,\$G,\$T, /smg;
            $s =~ s/(p.mwall)(\w*[MN])(\w+)\(/
                ${1}J\.m->(\$A,\$C,\$G,\$T, \$$2, /smg;
            
            $s =~ s/(p.mwall)(u|n) (.+?)(;| for(\s*$| .+?))?$/
                "${1}J\.$2->(\$A,\$C,\$G,\$T,$3=>'')".($4||';')/smeg;
            
            $s =~ s/(p.mwall)(m) (.+?)(;| for .+?)?$/
                "${1}J\.$2->(\$A,\$C,\$G,\$T,\$M,$3=>'')".($4||';')/smeg;
            
            $s =~ s/I\.d\&(p.oint)/G\&$1/g;
            
            # C&hs = 388 # C.sc.>hs
            $s =~ s/\bC&(\w+)\b/C\.sc\.$1/g;
            $s =~ s/\bc&(\w+)\b/C\.c\.$1/g;
            # e&you -> G&e,"you"
            $s =~ s/\b([e])&(\w+)\b/G\&$1,"$2"/g;
            
            # also e&so -> G&e,"so"...  generalised name pickup, spiral slumping
            # us&hJ works sometimes somehow?
            $s =~ s/ ((?!G)\w+)\&(p.oint)/ G\&$1,"$2"/g;
            
            # G&:"with space in args";
            1 &&
            $s =~ s/(p.oing|\w+)\&(p.oint)(:\S+[^\n;]+)(;)?/
                saybl "Babs: $1, $2, $3, $4";
                
                my ($on,$p,$e,$t) = ($1,$2,$3,$4);
                $e =~ s{^:}{,};
                ($on,my$in) = ("G\.h",'$A,$C,$G,$T,')
                    if $on eq 'G';
                my $s = $on."->($in\"$p\"$e)$t";
                $s = '$'.$s if $on !~ m{\.};
                $s
            /smge;
            # G&usi,$s -> G.h->(acgts)
            $s =~ s/(p.oing|\w+)\&(p.oint)(,[^\s;]+)?(;)?/
                my ($on,$p,$e,$t) = ($1,$2,$3,$4);
                ($on,my$in) = ("G\.h",'$A,$C,$G,$T,')
                    if $on eq 'G';
                my $s = $on."->($in\"$p\"$e)$t";
                $s = '$'.$s if $on !~ m{\.};
                $s
            /smge;
            # $sc.>$k -> $sc->{$k}
            $s =~ s/(p.oing)((?:\.>p.oing)+)/
                join '->', $1, map {'{"'.$_.'"}'}
                grep {$_} split m{\.>}, $2;
            /smge;
            
            #c Rw
            while ($s =~ /(Rw (p.oint)(?:(?!p.sur) (.+?))?)p.sur/gsm) {
                my ($old, $op, $oa) = ($1, $2, $3);
                my $g;
                $g ||= '$G';
                .
                my $ne = ""; # hidden reverse
                $ne = $1 if $oa =~ s/(p.sur)$//;
                .
                my @n;
                my @m;
                # want to mix {m m m %$ar m m} whereever + is
                my $wanr = $oa =~ s/^\+ ?//;
                $wanr = 'stick' if $oa =~ s/^- ?//;
                for (split /\,| |\, /, $oa) {
                    # sweet little pool... $J:geo etc
                    if (/^\$((\w+(:|=))?\S+)$/) {
                        my ($na, $fa, $wa) = ($1, $2, $3);
                        if (!$fa) { # fake name, to ar
                            $fa = $na;
                        }
                        else {
                            $na =~ s/^\Q$fa\E//;
                            $fa =~ s/(:|=)$//;
                            if ($wa eq '=') {
                                $na = '"'.$na.'"';
                            }
                        }
                        $na = '$'.$na unless
                            $wa eq '=' || $na =~ /^\S+\.\S/;
                        push @n, "$fa=>$na" ; # also avail a listy position
                    }
                    else {
                        push @m, $_;
                    }
                }
                unshift @n, '$ar' if (!@n || $wanr) && $wanr ne "stick";
                push @n, "m=>[".join(',',map{'"'.$_.'"'}@m).']'
                    if @m;
                .
                my @e;
                push @e, '"'.$op.'"';
                push @e, join(",",@n);
                my $en = join ",", @e;
                .
                my $wa = $g.'->{w}->($A,$C,$G,$T,'.$en.')'.$ne;
                $s =~ s/\Q$old\E/$wa/          || die "Ca't replace $1\n\n $s";
            }
            .
            # sc.k -> $sc->{k};
            $s =~ s/([A-Za-z_]\w*)((?:\.\w+)+)/"\$$1".join"",map {"->{$_}"} grep {length} split '\.', $2;/segm;
            # 
            $s =~ s/aft \{/acum \$F[0] => _after_do => sub {/sg;
            #
            .
            push @s, $s;
        }
        push @s, $inend if $indbe && $inend;
        $s = join "\n", @s;
        .
        $s;

of: | # compile/collect
    # container process is traveling bunches of code, see 99 Traweil
    # place toward A.ii.>$s, linked list of embryo
    my $of = C.t;
    my $ark = G.sc.codeark ||= {};

    # rennovating around town
    # a geodesic self-mover
    # keeps rebuilding in different locations
    
    # this way should export osc hooks and another way...
    for my $C ( e&_cz ) {
        c&s || sayre "C.t C.y.cv has no s: ".ki $C;
        if (!c&code && (s&args || s&acgt)) {
            # may already be compiled
            # shades code through the wall
            # the W listened to needs one osc in G, then all can whole it
            # coded while the W goes through the wall
            my $coded = delete(s&coded) || s&args && s&acgt;
            my $digs;
            my $scbab;
            unless ($coded) {
                # shade the edges, args, parsables etc.
                Rw CoArgulate $C;
                # CoB/Code must depend on c&s now and make only c&code
                # unless a track is cut for adding universals...
                # like a map of extra lines babbled
                #   (caused by block quotes, argulation...)
                $digs = dig c&s;
                if (my $y = $ark.>$of.>C.t.>$digs) {
                    (c&s, c&code, $scbab) = @$y;
                    undef $digs;
                }
                else {
                    # translate into perl
                    $scbab = Rw CoBabbler $C;
                }
            }
            G&Code,$C,"Of=$of" if !c&code;
            
            G&hoh,C.sc,$scbab if $scbab;
            $ark.>$of.>C.t.>$digs = [c&s,c&code,$scbab] if $digs;
            
        }
        track: # etc
        s&dige = slm 12, dig c&s if exists c&s && !ref c&s;
    }

    C.sc.hi = 'lo';
    T.nose = 1;
    T.pos = 0;
    
CoArgulate: |
    s&of || die "No of on ".ki$C;
    
    s&args ||= join',','A,C,G,T',grep{$_ ne '1'}s&acgt if s&acgt;
    s&args =~ s/[\+ ]/,/sgm;
    
    s&code && sayre "CoArgu C.t C.y.cv has scode: s&code:\n  ".ki$C;
    
    my $ara = [];
            
    exists s&t &&
        Rw conot $C;
    
    # the nk/gk it wants to wake up
    my $pasn = sub {
        my $v = shift;
        my ($nk,$gk,$more) = $v =~ /^([tycs])?(\S*)(?: (.+))?$/;
        $nk = 'sc' if $nk eq 's';
        $nk ||= 'c';
        $nk && $gk || die"strv:$v -> $nk,$gk from ".ki $C;
        ($nk,$gk);
    };
    (s&nk,s&gk) = $pasn->(s&v) if s&v;
    (s&nnk,s&ngk) = $pasn->(s&v) if s&Nv;
    
    if (my $nk = s&nk) {
        push @$ara, "my \$".$nk." = C\.".$nk.";";
        if (my $gk = s&gk) {
            # dont remy v=cs in acgts
            my $my = "my " unless s&args =~ /\b$gk\b/;
            warn "Redefined the $gk ($nk\.$gk): ".ki$C if $gk =~ /^[ACGT]$/;
            push @$ara, "$my\$".$gk." = C\.".$nk."\.".$gk.";";
        }
    }
    
    C.sc.>$_ && die "Given $_: ".ki $C for qw'rg cg';
    
    s&args ||= 1;
    if (my $args = s&args) {
        #die "wonky C.t   of ".ki $C if C.t =~ /\W/;
        my $gl = "";
        my $und = "_";
        # it becomes something
        my ($sf,$sa) = ('(',')->($A,$C,$G,$T)') if s&subpeel;
        my $sub = "sub {\n";
        if ($args ne '1') {
            my @args;
            my $und = '_';
            if ($args =~ s/^(A,C,G,T,)(?!s$)//) {
                push @args, 'my ($A,$C,$G,$T,@M)=@_;';
                $und = 'M';
            }
            push @args, "my (".join(',',map{'$'.$_}
                split',',$args).',@Me) = @'.$und.";";
            unshift @$ara, @args;
        }
        c&s = $sf
            ."sub {\n"
            .join("",map{"$_\n"} @$ara)
            .c&s
            ."}"
            .$sa
            .";";
    }
conot: | # expand sc.t->ip, compiled throat clause
    my $ip = C.sc.ip = {};
    my $or;
    my @o;
    my $t = C.sc.t;
    
    # convert 3-4 or 3 to >=0.3 <0.4
    #            or 33 to >=0.33 <0.34
    #            or 3+ to >=0.3   (with 9er)
    if ($t =~ /^((\d+)(?:(\-|\+)(\d+))?)/) {
        my $s = $1;
        my $n = 0+('0.'.$2);
        my $se = "ycv:>=$n";
        if ($3 ne '+') {
            my $u = $4 ? 0+('0.'.$4)
                : $n + 1 / 10 ** length($2);
            $se .= " ycv:<$u";
        }
        $t =~ s/^\Q$s\E/$se/s || die "Not replacable $se in $t";
    }
    
    for my $k (split ' ', $t) {
        $or++, next if $k eq '||';
        my $ok = $k;
        my $is;
        # ^ our C.t
        $k =~ s/^(\w+):\^$/"$1:".C.t/e;
        # complication
        $is = C.sc.>C$k if exists C.sc.>C$k;
        
        my $p;
        # simple key:val ing
        if ($k =~ /^(\w+):([^:]*)$/) {
            $k = $1;
            $is = $2;
            (p.nk,p.gk) = G&pang,$k;
            p.gk || delete p.gk;
        }
        # pint further
        elsif ($k =~ /\w+:\w+/) {
            my @p = split ':', $k;
            $k = $p[0];
            $is = ''; # exists
            $is = $1 if $p[-1] =~ s/([^\w\.-]+.+$)//;
            p.pint = \@p;
        }
        else {
            die "Unknown sc t bit: $k";
        }
        die "merge in? ".ki$is if ref $is;
        (p.or,$or) = (1,0) if $or;
        
        if (defined $is) {
            my $i;
            my $neg = $is =~ s/^\!//;
            $i = 'gt' if $is =~ s/^>//;
            $i = 'lt' if $is =~ s/^<//;
            $i.= 'eq' if $is =~ s/^=//;
            $i = 're' if $is =~ s/^~//;
            $i ||= 'is';
            if ($i eq 'is') {
                if ($is eq "''") {
                    $is = '';
                }
                elsif (!length($is)) {
                    $i = 'true';
                    $is = 1;
                }
            }
            p.neg = 1 if $neg;
            $p.>$i = $is;
        }
        $k =~ s/(\d+)?$/$1+1/e while exists $ip.>$k;
        push @o, $k;
        $ip.>$k = $p;
    }
    ip.order = \@o if @o > 1;
Zop: | # a G
    J.space = 1;
    Rw Bagin
    || do {
    
        # Travels:
        n ElvisSoftu=>-test
        #n ElvisPaintedStripes=>-test=>{man=>'Zup',ray=>1}
        #n ElvisZpace=>-test=>{man=>'Zre',ray=>1}
        
        
        # Display:
        #n ElPictMany=>-test=>{man=>'Zup',ray=>1}
        #n ElPictMany=>-test=>{man=>'Zup'}
        
        #n ElvisLeaves=>-test=>{man=>'Zupe'}
        #n ElvisAny=>-test=>{man=>'Zre'}
        #n ElvisMany=>-test=>{man=>'Zup'}
        #exit; #  #
        n $_=>-test for @{c&also||[]};
        
        # patch/spare:
        1 ?
            Rw TripScaler
        :
            n ElvisOver=>-test=>{man=>'Zre'}
        
        #n ElvisMutato=>-test=>{man=>'Zre'}
        
        #n ElPassTape=>-test
        #n ElvisSaves=>-test
        
        
        # goal:
        #n ElvisDoolify=>-test
        
        
        #n ElvisHosting =>-test=>{man=>'Zup'}
        #n ElvisDialects =>-test=>{man=>'Zupe'}
        
    };
    Rw Bagend
    
Zre: | # a G for creativity
    Rw Bagin
    || do {
        # 3 creativity
        
        # imparted Hosting
        n ElvisZpace=>-test
        n ElvuseZpace=>-test
        
        # sharing
        
        # compose over normal
        n ElvisMutato=>-test
        n ElvisAny=>-test
        
        n ElvisDesi=>-test
        n ElvisRhythmSection=>-test
        
        # timing
        
        # ghoster
        
    };
    Rw Bagend
    
Zo: | # extra Zre
    Rw Bagin
    || do {
        # sharing/82
        # way update receiver
        n ElvisOver=>-test,{man=>'Zre'}
    };
    Rw Bagend
Zup: | # a G
    Rw Bagin
    || do {
    
        # 2 self consciousness
        
        # e
        n ElvisElvises=>-test
        n ElvisHandles =>-test
        # meta
        n ElvisHoists =>-test
        n ElvisRopeWay =>-test
        # Hosthing
        n ElvisHostingAndNot=>-test
        n ElvisHosting=>-test
        n ElvisPaintedStripes =>-test
        # ghosting
        n ElvisSimpleGhost =>-test
        n ElvisDiMachine=>-test
        # La many
        n ElPictMany=>-test
        n ElvisMany=>-test
        n ElvisResMany=>-test
        
        
        
    };
    Rw Bagend
    
Zupe: | # a G
    Rw Bagin
    || do {
        if (G.justthat) { # enter 'q' at waitme
            n ElvisMany=>-test=>{man=>'Zop'}
            n ElvisHostingAndNot=>-test
            n ElvisHandles=>-test
            exit;
        }
        
        # 1 string world
        
        # o
        n ElvisLeaves=>-test
        # J
        n ElvisWorld=>-test
        n ElvisWads=>-test
        n ElvisWorlds=>-test
        n EpiWaveletting=>-test
        # u/n
        n ElvisThinks=>-test
        n ElvisDialects=>-test
        n ElvisEltus=>-test
        # o 6,7
        n ElvisLinkage=>-test
        n ElvisWhole=>-test
        # Rw
        n ElvisWay=>-test
        # A.1..5
        n ElvisFalls=>-test
        
        
    };
    Rw Bagend
Bagin: |
    u urw
    y.clos = 1;
    J.bagbeg = hitime();
    
    J.thou++
Bagend: |
    sayyl "Total ".G&ron,hitime()-J.bagbeg;
    Rw MemCpu;
    
    G.outrun && return T.nose = 1;
    J.output || exit;
    
    sayyl "Making pud...";
    m _.t=>-pud=>{s=>_.c.s},'%hs:675,ws,wi:30%'    for @{J.output||[]};
    
MemCpu: | # print memory and cpu time (non-waiting)
    my @top = `top -bn1 -p $$ -c`;
    my $line = pop @top;
    my $headers = pop @top;
    chomp $headers;
    chomp $line;
    $headers =~ s/\s+/ /sg;
    $headers eq ' PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND'
        || die "top headers off:\n$headers";
        
    my @r = split /\s+/, $line,12;
    shift @r for 1..5;
    my $v = shift @r;
    my $r = shift @r;
    my $state = shift @r;
    my $pc_cpu = shift @r;
    my $pc_mem = shift @r;
    my $cpu_time = shift @r;
    my $mem = Rw sciun $s:v;
    my $memr = Rw sciun $s:r;
    my $num = $v ne $mem && $r ne $memr;
    $mem .= " virt, $memr res" if !$num || $r < $v * 0.7 || $r > $v * 1.3;
    saygr "Proc $$ size: $mem time: $cpu_time";
Zuup: | # Zupe slowly
    G.slowly = 4;
    n Zupe
pi/test: | # wants to run slowly by osc above
    no warnings 'recursion';
    G.wakey.>C.t = 'restar';
    my $c;
    c.pin = 'ATest';
    c.tell = J.mo.J;
    c.man = c&man if c&man;
    c.estC = $C;
    c.tell.space ? ++G.outrun && Rw timer $d=0.00001 $cb:_
        : $_->() for sub {
        #Carp::confess( "It");
        n C.t =>W=> $c
    };
ATest: |
    my $m = [ C.t ];
    my $out = Rw Tesh + $m;
    if ($out) {
        my $el = c&tell;
        push @{el.output ||= []}, {t=>C.t,c=>{s=>$out}};
    }
    
    map { say(''), snooze 9000 * G.slowly } 1..5 if G.slowly;
    
Tesh: | # wrap test way
    # give prototype J/A to the t, the test J as oJ
    my ($test,$sel) = @$m;
     #J.tacall = 1;
    
    # twist towards n
    my $tes = sub {
        my $C = G&tC,\@_;
        c&test ||= do {
            C&l = C.t;
            C.t = $test;
            J.testRun;
        };
        C.c.tac = 1 if C&l =~ s/!$//;
        C.c.question = 1 if C&l =~ s/\?$//;
        # c&tac = 1;# if J.tacall; #c
        my ($aye) = map {_.M->[0]}
        n $C
        aye.c.return
    };
    
    #die "Just $sel" if $sel;
    
    J.R ||= Rw Zome;
    my $t = {};
    t.rig = J.R;
    t.mkoJ = sub {
        my ($t,$c) = @_;
        G.outrun = 1;
        my $J = G.oin;
        return unless $t;
        n $t=>W=>$c||{}
    };
    
    my $beg = hitime();
    while (!J.begins || J.testsRun > J.lasttestsrun) {
        J.lasttestsrun = J.testsRun;
        J.testUntil = J.testRun + 1;
        my $n = defined $sel ? $sel :
            Rw Dwive + $notime=1;
        J.begins ||= do {
            ok(1, "J.name begins");
            $beg;
        };
        $beg = hitime();
        
        my $oJ = J.R || die "NoZome"; # v inside oJ is J
        my $oG = oJ.y.G || die "nozome y G";
        delete ar.m;
        Rw $test + $t $tes $n $oJ:J $J:oJ $A:oJ.1 $G:oG;
        
        J.output = oG.ouJ if oG.ouJ;
        delete J.tacall;
        $sel || J.testsRun > J.lasttestsrun &&
        #ok(1, "Took ".G&ron,hitime()-$beg );
        return J.output if J.output && defined $sel;
    }
    $sel ||
    ok(1, "Total ".G&ron,hitime()-J.begins );
    
    J.output
Telvis: |
    c&te = A.ii.theu;
    c&ot = "";
    my $Q = $C;
    A.4.c.testC = $C;
    # same C each time as Tesh notime
    delete C&ofts;
    
    G.mkoJ = t.mkoJ;
    t.es = $tes;
    # twist towards n
    t.cs = sub {
        my ($c,$t) = @_;
        $c = {ntos=>$c} if defined $c && !ref $c;
        C.c.ot = $1 if c.ntos =~ s/^(\w+)\///;
        map { G&xot,$c,$_ } G&peel,$1 if c.ntos =~ s/,(.+)$//;
        $tes->($t,1,$c)
    };
    t.ntos = sub { # get the oscillator A (s) given e is n of J
        my ($j,$want) = @_;
        $j = 'not' if !@_;
        ($j,$want) = (t.se->(),$j) if $j && !ref $j && !$want;
        if (j.t eq 'n') {
            ($j) = values %{j.c.tug};
            return $j if $want eq 'mo';
            $j = j.c.s || die "No C on ".ki$j;
            # the last Hows mo C
            $j = j.sc.J || die "No J on ".ki$j;
            return $j if $want eq 'J';
        }
        $j = j.sc.s || die "No s on ".ki$j;
        $j
    };
    my $toc = t.toc = {};
    c&mks = sub {
        my ($C,$T) = @_;
        T.oke = 1;
        my $se = t.se->($C);
        my $bang = 0; # path?! means avoid o
        if (my $p = c&ntos) {
            my $sp = sub {[split / |,/, shift ]};
            # tes/cs returns thing if ? (output pud) or ! (skips o-ing)
            my $output; # surface to work $p from
            my $nav;
            if ($p =~ s/^(.*)(\?)(\S+)?(!)?( .+)?$/$1$5/ ||
                $p =~ s/^(.*)()()(!)( .+)?$/$1$5/) {
                $output = $sp->($1) if $2;
                $nav = $3 if $3;
                $bang = 1 if $4;
            }
            $p = $sp->($p);
            $se = t.ntos->($se);
            Qc&so = $se;
            
            if ($output || C.c.see) {
                $output ||= $sp->(C.c.see) if C.c.see && C.c.see ne '1';
                $output = $output ? G&pint,$se,@$output : $se;
                $output = G&pint,$output,split'-',$nav if $nav;
                oJ.output = $output;
                C.c.return ||= oJ.output;
                return [] if C.c.see;
            }
            my $o = {};
            $se = G&pint,$se,@$p,$o;
            if (exists o.fail) {
                sayre "Path @{o.have}   !o.fail    (@{o.mong})";
            }
        }
        C.c.return ||= $se;
        $bang && return ['Outputting something'];
        my $o;
        if (c&isl) {
            c&rsl = $se;
        }
        if (c&dd eq '1') {
            G&oleak,$se,10 && return ["Leaky massive: ".ki$se];
            c&rsl = [split"\n",ddump $se];
        }
        if (c&rss) {
            c&rsl = [split "\n", $se];
        }
        if (!c&rsl) {
            my $oc = {};
            oc.noz = 1 if c&noz;
            oc.nonext = 1 if c&nonext;
            $oc.>$_ = $toc.>$_ for keys %$toc;
            $oc.>$_ = c&toc.>$_ for keys %{c&toc||{}};
            my $ot = c&ot = c&ot || Q.c.ot || c&test.'-'.C&l;


            my $AV = delete A.V;
            my $cv = Q.c.ocv || 6;
            my $i = Q.c.oi || $J;
            my $oi = 0;
            c&rsl = [];
            for (c&olv ? @$se : $se) {
                my $oto = $ot.($oi&&"-$oi");
                $o = c&o = G&A,o=>$cv=>$i=>$_,$oto,$oc;
                push @{c&rsl}, @{oc&rsl};
                $oi++;
            }
            A.V = $AV if $AV;
        }
        
        # c&tac=1;
        my $l = c&rsl || oc&rsl || die "no rsl";
        $l = [grep {
            !ref c&grepl ? c&grepl =~ /^\/(.+)\/$/ ? $_ =~ /$1/
                : die "notundogrepl: c&grepl"
            : c&grepl ->($_) } @$l] if c&grepl;
        $l
    };
    c&posts = sub {
        my ($C,$T) = @_;
        return unless A.V || A.Ve || C.c.question;
        1 && saybl "No items for: C.sc.l" if !@{c&s};
        1 && saybl "the ".slim(10,c&ot).": ".$_ for @{c&s};
    };
    #c more stuff
    t.siim = sub {
        my ($Y,$sc,$h) = @_;
        my $ii = Y.ii;
        $ii = Y.sc.ii if $sc;
        $h = sprintf"%-12s",$h if $h;
        $h .= " Y.c.sip Y.t 2=Y.2.t: ";
        $h .= 'sc' if $sc;
        return "$h undef" if !$ii;
        "$h   ii ".join" - ",
        map { 
        my $de;
        if ($_ eq 'mo') {
            my $mo = $ii.>$_ || die "No mo";
            my $tw = mo.y.tw || die "No tv: ".ki$mo;
            $de = "*" if tw.fis;
        }
        $_.$de
        } sort keys %$ii
    };
    t.gout = sub {
        my ($Y,$p) = @_;
        $p = [split '-', $p] if !ref $p;
        my $h = join(' ',@$p);
        my $sc = pop @$p if $p->[-1] eq 'sc';
        $Y = G&pint,$Y,@$p if @$p;
        t.siim->($Y,$sc,$h);
    };
    c&iiuse = 'next';
    t.lookii = sub {
        my ($p) = @_;
        my $s = t.ntos->(t.se->());
        my $ii;
        if ($p) {
            $p = [split '-', $p] if !ref $p;
            $ii = G&pint,$s,@$p;
        }
        else {
            $ii = s.sc.ii;
        }
        t.anii->($ii);
    };
    t.anii = sub {
        my $ii = shift;
        my @m;
        my $anii;$anii = sub {
            my ($c) = @_; #
            my @m;
            push @m, "c.t c.y.cv has:";
            if (c&iiuse eq 'z') {
                for my $e (@{c.sc.z}) {
                    push @m, " - e.t e.y.cv    ".ki(e.c)."      ".ki(e.sc);
                    $m[-1] =~ s/\n/\\n/g;
                }
            }
            else { # use next
                my $e = c.y.in;
                while ($e) {
                    push @m, " - e.t e.y.cv    ".ki(e.c)."      ".ki(e.sc);
                    $m[-1] =~ s/\n/\\n/g;
                    $e = e.y.next;
                }
            }
            if (my $ov = c.y.over) {
                push @m, " y over:",
                    map { "  $_" } $anii->($ov);
            }
            @m;
        };
        for my $t (sort keys %$ii) {
            my $c = $ii.>$t;
            push @m, $anii->($c);
        }
        \@m;
    };
    t.pinote = sub {
        my ($s,$p,$do) = @_;
        $p = [grep{$_}split/\W/,$p] if !ref $p;
        my @ok;
        my $l;
        while (@$p) {
            if (ref $s ne 'HASH') {
                $l = ["Broken: @ok   (rest: @$p)"];
                last;
            }
            my $k = shift @$p;
            push @ok, $k;
            $s = $s.>$k;
            @$p || last;
        }
        $l ||= $do->($s) if $do;
        $l;
    };
    t.grind = sub {
        my $J = shift;
        T.givech = '';
        my $uz = G&grind,$J;
        my $ch = delete T.givech;
        $uz || return ["nothing for J.t . $ch"];
        my $l = t.grimd->($uz);
        push @$l, "For J.t . $ch";
        $l
    };
    t.grimd = sub { 
        my $uz = shift;
        [map{my$c=_.c.s;"_.t _.cv: c.t c.y.cv ("
            .join(' ',sort keys %{c.c}).")  "
            .join(' ',sort keys %{c.sc})
        } map {$uz.>$_ } sort keys %$uz];
    };
    t.popi = sub {
        my ($J,$i,$C) = @_;
        my $step = c&popl && c&popl.>$i || "something";
        my $tac = '!' if $step =~ s/\!$//;
        my $name = "C.t @ $i: $step";
        my $gr = sub {
            my $l = t.anii->(shift);
            @$l = grep {/^\S.+has:| al\w+ 0/} @$l;
            $l
        };
        t.cs->({s=>$gr->(J.ii)},"$name: .ii$tac");
        t.cs->({s=>$gr->(J.sc.ii)},"$name: sc\.ii$tac");
        
        t.cs->({s=>t.grind->(J.sc.u)},"$name: u ground zipper$tac");
        
        t.cs->({s=>t.grind->($J)},"$name: ground zipper$tac");
        
        my $l = t.pinote->($J,<<'',t.grimd);
            sc.u.sc.s.c.zip.c.s.c.s.ground.c.s.c.s
        t.cs->({s=>$l},"$name: u osc'd ground zipper$tac");
    };
    t.se = sub { #c return the item     + en, el, dd, xo
        my $C = shift;
        # v per test n, which are behind t.cs etc
        #       v assigned mo in test pins
        #               v per test enclosure (c&te in test pins)
        c&te || t.e || Q.c.te
    };
    t.en = sub { # see J and W within separately
        my $l = pop;
        my $p = shift;
        $p ||= 'sc lastK c s';
        $l ||= 'lastK';
        my $o = t.ntos->(t.se->());
        my @W = o.sc.lastA.1;
        $o = o.sc.top;
        while ($o) {
            $o = o.y.in || o.y.next || last;
            push @W, o.sc.J if o.sc.W;
        }
        for my $j (@W) {
            t.cs->({te=>$j,ntos=>$p},"j.t: ".$l);
        }
        wantarray ? @W : pop @W;
    };
    t.el = sub { # send W e{t,c,p}
            my ($W,$t,$c,$p) = @_;
            ($p,$c) = ($c,{}) if ref $c eq 'ARRAY';
            my $c ||= {};
            c.p = $p if $p;
            my $e = G&Ct,[$t=>2=>$c];
            n $W=>W=>{e=>$e}
    };
    t.dd = sub {
        my ($s,$l,$grepl) = @_;
        my $c = {rsl=>[split"\n",ddump $s]};
        c.grepl = $grepl if $grepl;
        t.cs->($c,$l);
    };
    t.xo = sub {
        my $s = t.ntos->(t.se->());
        t.dd->(s.sc.xo,shift);
    };
    
    return $t
ElvisTimely: | # J know whatnot, pins (see Jam 82)
    my $t = Rw Telvis;
    # a T marker tells J trains to revisit it for isolated way haps
    # see pud re T
    # such massive hoisting wants 
    
aly: | # something wiry
    # make acts
    n alvy
    n alact
    n alofmo
alc: | # aka c
    # make acts
    n alvc
    n alact
    n alofmo
als: | # aka s
    # make acts
    n alvs
    n alact
    n alofmo
    
alY: | # something vastly wiry
    # make acts
    n alvy
    n alact
    n alofS
alC: | # vast empirica
    # make acts
    n alvc
    n alact
    n alofS
    
alS: | # vast universal 
    # make acts
    n alvs
    n alact
    n alofS
    
alvs: | # v universal
    alvs 4223: %acgt:s,act,of:mo
        s&v ||= 's'.C.t;
alvc: | # v empirica
    alvc 4223: %acgt:s,act,of:mo
        s&v ||= 'c'.C.t;
alvy: | # v wires
    alvy 4223: %acgt:s,act,of:mo
        s&v ||= 'y'.C.t;
alofmo: | # of=mo TODO but not
    n alof
    alofmo 4223: %acgt:s,act,of:mo
        a&suggest.of = 'mo';
alofS: | # of=S, several We times though Jgress... mo J mo 
    alofS 4223: %acgt:s,act,of:mo
        s&of ||= 'S';
alact: | # aka a
    # make acts
    n alacgts
    alact 421: %acgt:s,act,of:mo
        s&act = 1 if !exists s&act;
        s&of ||= C.t;
alacgts: | # aka i
    n alof
    alacgts 421: %acgt:s,act,of:mo
        s&acgt = 's' if !exists s&acgt;
alof: | # auto of, i or whatever was .c.of'd
    n al4noJ
    alof 422: %acgt:s,act,of:mo
        die "HadJ: ".ki$C if s&J;
        my $Y = A.mo.up.mo;
        if (c&of) {
            C.t && die "of had t: ".ki$C;
            Y.sc.vse.of = c&of;
            return T.not = 1;
        }
        my $def = a&suggest.of || 'i';
        $def = Y.sc.vse.of if Y.sc.vse && Y.sc.vse.of;
        s&of ||= $def;
al4noJ: | # skip codings for J
    al4noJ 42: %acgt:s,act,v:sJ,of:mo
        T.Z.43 = $A;
    # the mo J 6 may use mind for created's root, etc.
    al4nonine 42: %acgt:s,act,t:ycv:0.9,of:mo
        T.Z.43 = $A;
a: | # act
    A.5.t && return
        Rw alact;
    u allact
    n allact
    n 'allareact=1'=>42,<<''
        C.sc.act = 1 if !exists C.sc.act;
        C.sc.code = C.t if !exists C.sc.code;
i: | # ACGTs sub for h/A.i
    n allacgts
Oscil: | # s&OSCillators
    n allsvse
c: | # of something c.? acts
    n allc
s: | # of something sc.? acts
    n alls
    

