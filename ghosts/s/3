Triangle: | # <>< sim, oscillator, s n, 7, peel electro ground moments
    u a
    # sevenatim
    # time passes independently of your being in the room
    # once you know about the room
    s 1:
        A.2 = shift @$s;
        A.c.n = G&sJ,A.2,'n';
        # C is self for s
        # C is 's many for o
        A.c.s = G&sJ,A.2,'s';
    s 2:
        # number of things plugged in to s from J
        for my $J (A.2) {
            C.c.>$_ = J.c.>$_ for grep{ J.c.>$_ } qw'whole base';
        }
        if (my $W = c&whole) {
            my $s = G&t,$W || die "no $W";
            G&A,o=>8,$C,$s,'whole';
            # place on us
            return T.Z.8 = $A;
        }
        my $tug;
        if (my $W = c&base) {
            my $s = G&t,$W || die "no $W";
            say "Base ! ".ki $s;
            tug.base = G&A,o=>2,$C,$s,'base';
        }
        if (my $n = A.c.n) {
            s&ch = A.2.sc.ch if !defined s&ch;
            s&ch = '' if !defined s&ch;
            tug.ground = G&A,o=>2,$C,n.sc.a->{s&ch},'zip';
        }
        $tug || die "No ground to A.2.t";
        c&zip = G&A,o=>4,$C,$tug,'zipover';
    s 3:
        say "S  3 A.2.t";
        my $z = c&zip;
        saybl "AN zip: z.t z.cv / z.c.sip ".wdump 7, z.c.cha;
        # J t/y awakens
        # W t/y awakens
    s 4:
        # pieces sorted
        # brings up W inners <9 like t/y clang
    s 5:
        # goS made
        sayyl "5  A.2.t";
    s 6:
        # going - figure difference
        c&el = '2' if 1 == 3;
    s 7:
        # pack down goods
    s 8:
        # tie together
        A.c.expo.>$_ = 1 for qw'tv i ii';
        A.2.sc.>$_ = C.sc.>$_ for keys %{A.c.expo};
        A.2.c.o = "Steved ".++C.c.imp;
        # send out
    
    
Circle: | # < copy things
    u a
    # listen, insward, moral law, has to give us power
    
    # cases:
    #  J.i <- o.i
    #  - i porty J..p.i tell non-$o of overwrites
    #  - recur bit J..b.i.>$o <- last C we make 
    #  - may see lv/otherness settling clues on o
    #  - knows i means pull o.i as t=>s
    #  - recur C shell of just t and c.s
    # so around t/cs/sc the other stff
    #
    # eats other, splats self 
    # the splat modes of ts, tv (shade c), 
    
    #c o1 all making a big rising of data, you could 
    o 1:
        my ($i,$f,$t) = @$s;
        i.y eq $i || die "i must A";
        
        ($f,my $fis) = ($$f,1) if ref $f eq 'REF';
        $t = G&Ct,@$t if ref $t eq 'ARRAY';
        %$C = %$t if ref $t eq 'HASH';
        C.t = $t if $t && !ref $t;
        
        
        c&i = $i;
        c&m ||= C.t;
        c&m = 'zip' if c&m =~ /^zip(.+)$/;
        if (ref $f eq 'ARRAY') {
            c&m = 'z';
            c&s = $f;
        }
        elsif ($fis) {
            c&s = $f;
        }
        elsif (f.y) {
            if (f.y eq $f) {
                # A/J
                c&h = $f;
            }
            else {
                # C mo 3 W:of ...
                #  C mo 1 s:... of:mo,dig:...
                # y.in or sc.z
                c&s = $f;
                c&m = 'C';
            }
        }
        else {
            # a zip
            c&s = $f;
        }
        if (c&m eq 'i' || c&m eq 'ii') {
            c&kno = c&m;
        }
        if (c&kno) {
            my $h = c&h || die "unhoused kno C.t m:c&m";
            c&s = h.sc->{c&kno} || $h->{c&kno};
            # may have lvism & more via h.sc.s.
        }
    #c o2 intermediate whats-where
    o 2:
        my $oo = A.c.oo = {};
        # < space-for (C) < t < y [many o with .c.s = $e, o.y.etc = etc]
        # per other itself in 3, way in is noise-ish
        if (c&m eq 'zip') {
            my $ads = [];
            for my $k (keys %{c&s}) {
                my $v = c&s ->{$k};
                v.y && v.y eq $v || die "zip yon not A";
                next if $v eq $A;
                # light cones holding C or doing another o bunch
                my $D = v.c.s;
                if (v.t eq 'o') {
                    # D is inner o's C - index windups
                    push @$ads, $v;
                    D.c.i eq c&i || die "o oth i C.c.i.t <-> D.c.i.t";
                    D.c.j && die "o D.c.t already got j";
                    D.c.jC && die "o D.c.t already got jC";
                    D.c.jC = $C;
                    my $ii = v.c.oo || die "Too early to oo: D.t";
                    my $i = 0;
                    for my $t (keys %{ii.C}) {
                        my $vs = ii.C->{$t};
                        for my $cv (keys %$vs) {
                            my $os = $vs->{$cv};
                            push @{oo.C->{$t}->{$cv}||=[]}, map {
                                $_ = G&hup,$_;
                                $_
                            } @$os;
                            $i++ for @$os;
                        }
                    }
                    say "A.t A.c.sip C.t claims $i from: v.t v.c.sip D.t";
                }
                else {
                    # D is J moment C material to shade
                    my $e = G&Chade,$D;
                    my $o = G&Chs,$e;
                    o.y.D = $D;
                    o.y.R = $v;
                    o.y.k = $k;
                    push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
                }
            }
            @$ads = G&sortysip,$ads,'1' if @$ads > 1;
            G&entug,$_ for @$ads;
        }
        elsif (c&m eq 'i') {
            for my $k (keys %{c&s}) {
                my $v = c&s ->{$k};
                # inflated t -> s
                my $e;
                e.t = $k;
                e.y.cv = 0.1;
                e.c.s = $v;
                my $o = G&Chs,$e;
                o.y.k = $k;
                push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
            }
        }
        elsif (c&m eq 'ii') {
            for my $k (keys %{c&s}) {
                my $v = c&s ->{$k};
                # t -> C
                my $e = G&hup,$v;
                my $o = G&Chs,$e;
                o.y.k = $k;
                push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
            }
        }
        elsif (c&m eq 'C') {
            # C
            my $S = c&s;
            my $pr;
            while ($S) {
                my $e = G&hup,$S;
                my $o = G&Chs,$e,$S;
                push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
                if ($pr) {
                    o.sc.oz.yprev = $pr;
                    pr.sc.oz.ynext = $o;
                }
                $pr = $o;
                $S = S.y.next;
            }
        }
        elsif (c&m eq 'z') {
            # [ C... ]
            for my $S (@{ c&s }) {
                my $e = G&hup,$S;
                my $o = G&Chs,$e;
                push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
            }
        }
        else {
            die "How to read ".ki $C;
        }
        
    #c o3 make diff
    o 3:
        # opens recursive shop on i called j using C.t
        my $j = G&offis,i=>j=>'t';
        j.c.Co = $C;
        my $jj = j.sc.oo;
        my $oo = A.c.oo;
        my $cha = A.c.cha ||= {};
        # falls until array, oo.C.t.cv = [thamany]
        G&Chew,$oo,'x,t,cv',$_ for sub {
            my ($o,$x,$t,$cv) = @_;
            my @o = @$o;
            
            # sort by zipped from A sips
            @o = G&sortysip,$o,'A','R' if @o > 1;
            # later overwrite
            @o = reverse @o;
            
            sayre join"\n","Dupl: ",map{"  $t $cv from _.y.A.c.s.t"}@o if @o > 1;
            
            $o = $o[0];
            my $e = o.c.s;
            
            $oo.>$x.>$t.>$cv = $o;
            my $l = $jj.>$x.>$t.>$cv;
            o.y.l = $l if $l;
            # todo weaken l.y.l
            
            G&Chang,$l,$o;
            
            # throw inward (yin falls to z)
            if (my $z = e.y.in || e.sc.z) {
                my $t = {t=>"C.t/z $t $cv"};
                t.c.jC = $C;
                t.c.oup = $o;
                G&tugA,o=>1,c&i,$z,$t;
            }
            
            # ty in above o
            sayyl "$t $cv is from o.y.A.c.s.t" if o.y.A ne $A;
            
            if (my $u = c&oup) {
                if (my $al = u.sc.bz.>$t.>$cv) {
                    #sayre "ALREADY a C.t: on u.t: $t $cv from al.y.A.c.s.t: al.t al.y.cv";
                    # zip hup'd acquired o but still..?
                }
                o.y.up = $u;
                u.sc.bz.>$t.>$cv = $o;
                #sayyl "Place u.t u.y.cv $u (u.y.A.c.s.t) from C.t: o.t o.y.cv $o";
            }
        };
    #c o4 A -> J t/y images
    #
    o 4:
        my $j = c&j;
        my $jj = j.sc.oo;
        my $oo = A.c.oo;
        my $cha = A.c.cha ||= {};
        G&Chew,$oo,'x,t,cv',$_ for sub {
            my ($o,$x,$t,$cv) = @_;
            my $l = o.y.l;
            
            # o.sc.bz.$t.$cv inward check
            my $sc = 'sc';
            my $z = 'z';
            if (my $bz = o.sc.bz) {
                G&Chew,$bz,'t,cv',$_ for sub {
                    my ($to,$dt,$dcv) = @_;
                    
                    my $m = !to.c.cha ? 'same' : to.y.l ? 'diff' : 'new';
                    o.c.>$m.>$sc.>$z.>$dt.>$dcv = $to;
                    to.c.cha || return;
                    #sayyl " - $t $cv has: $dt $dcv ".ki to.c if to.c.cha; 
                    o.c.cha.>$m.>$sc.>$z.>$dt.>$dcv = $to;
                }
            }
            if (my $dz = $l && l.sc.bz) {
                my $bz = o.sc.bz;
                G&Chew,$dz,'t,cv',$_ for sub {
                    my ($to,$dt,$dcv) = @_;
                    $bz.>$dt.>$dcv && return;
                    my $m = 'gone';
                    o.c.>$m.>$sc.>$z.>$dt.>$dcv = $to;
                    o.c.cha.>$m.>$sc.>$z.>$dt.>$dcv = $to;
                }
            }
            
            # wires
            # notes from 2 - see upmost o's origin C ref index,
            # contributed to by all under
            if (my $oz = o.sc.oz) {
                for my $on (keys %$oz) {
                    my $to = $oz.>$on;
                    if (to.y.A eq $A) {
                        if (oo.C.>to.t.>to.y.cv eq $to) {
                            #sayre "  -- have $on: to.t to.y.cv";
                        }
                        else {
                            die "$t $cv Dont have $on: to.t to.y.cv ".wdump 2, oo.C;
                            # cha.lost? might be above or below o A
                        }
                    }
                    else {
                        sayre "   ++ $on: to.t to.y.cv from other A";
                    }
                }
            }
            
            if (!o.y.l) {
                $cha.>$x.>$_.>$t.>$cv = $o for 'new';
                o.c.el = 1;
            }
            elsif (o.c.cha) {
                $cha.>$x.>$_.>$t.>$cv = $o for 'diff';
            }
        };
        G&Chew,$jj,'x,t,cv',$_ for sub {
            my ($o,$x,$t,$cv) = @_;
            $oo.>$x.>$t.>$cv && return;
            say "Goner C.t C.y.cv  --  $x $t $cv ----";
            $cha.>$x.>$_.>$t.>$cv = $o for 'gone';
        };
        !keys %$cha && delete A.c.cha;
        # names -> A fall replace to check inside
        j.sc.oo = $oo;

