Triangle: | # peel electrosn
    u a
    # sevenatim
    # time passes independently of your being in the room
    # once you know about the room
    s 1:
        A.2 = shift @$s;
        A.c.n = G&sJ,A.2,'n';
        # C is self for s
        # C is 's many for o
        A.c.s = G&sJ,A.2,'s';
    s 2:
        # number of things plugged in
        # o uses recursio as passed in
        if (my $W = c&whole) {
            my $s = G&t,$W || die "no $W";
            say "Whole ! ".ki $s;
            G&tugA,o=>8,$C,$s,'whole';
            return T.Z.8 = $A;
        }
        if (my $W = c&base) {
            my $s = G&t,$W || die "no $W";
            say "Base ! ".ki $s;
            G&tugA,o=>2,$C,$s,'base';
        }
        if (my $n = A.c.n) {
            s&ch = A.2.sc.ch if !defined s&ch;
            s&ch = '' if !defined s&ch;
            G&tugA,o=>2,$C,n.sc.a->{s&ch},'zip';
        }
        c&zip = G&tugA,o=>2,$C,A.c.tug,'zipover';
    s 3:
        say "S  3 A.2.t";
        my $z = c&zip;
        saybl wdump 3, z.c.cha;
        # J t/y awakens
        # W t/y awakens
    s 4:
        # pieces sorted
        # brings up W inners <9 like t/y clang
    s 5:
        # goS made
        sayyl "5  A.2.t";
    s 6:
        # going - figure difference
        c&el = '2' if 1 == 3;
    s 7:
        # pack down goods
    s 8:
        # tie together
        A.c.expo.>$_ = 1 for qw'tv i ii';
        A.2.sc.>$_ = C.sc.>$_ for keys %{A.c.expo};
        # send out
    
    
Circle: |
    u a
    # listen, insward, moral law, has to give us power
    
    # cases:
    #  J.i <- o.i
    #  - i porty J..p.i tell non-$o of overwrites
    #  - recur bit J..b.i.>$o <- last C we make 
    #  - may see lv/otherness settling clues on o
    #  - knows i means pull o.i as t=>s
    #  - recur C shell of just t and c.s
    # so around t/cs/sc the other stff
    #
    # eats other, splats self 
    # the splat modes of ts, tv (shade c), 
    
    # all making a big rising of data, you could 
    o 1:
        my ($i,$f,$t) = @$s;
        i.y eq $i || die "i must A";
        
        $t = G&Ct,@$t if ref $t eq 'ARRAY';
        %$C = %$t if ref $t eq 'HASH';
        C.t = $t if $t && !ref $t;
        
        c&i = $i;
        c&m ||= C.t;
        c&m = 'zip' if c&m =~ /^zip(.+)$/;
        if (f.y) {
            if (f.y eq $f) {
                # A/J
                c&h = $f;
            }
            else {
                # C mo 3 W:of ...
                #  C mo 1 s:... of:mo,dig:...
                # y.in or sc.z
                c&s = $f;
                a&m = 'C';
            }
        }
        else {
            # a zip
            c&s = $f;
        }
        if (c&m eq 'i' || c&m eq 'ii') {
            c&kno = c&m;
        }
        if (c&kno) {
            my $h = c&h || die "unhoused kno C.t m:c&m";
            c&s = h.sc->{c&kno};
            # may have lvism & more via h.sc.s.
        }
    o 2:
        my $oo = A.c.oo = {};
        # < space-for (C) < t < y [many o with .c.s = $e, o.y.etc = etc]
        # per other itself in 3, way in is noise-ish
        if (c&m eq 'zip') {
            for my $k (keys %{c&s}) {
                my $v = c&s ->{$k};
                # light cones holding C or doing another o bunch
                v.y && v.y eq $v || die "zip yon not A";
                my $D = v.c.s;
                if (v.t eq 'o') {
                    # D is inner o's C - index windups
                    D.c.i eq c&i || die "o oth i C.c.i.t <-> D.c.i.t";
                    D.c.j && die "o D.c.t already got j";
                    D.c.jC && die "o D.c.t already got jC";
                    D.c.jC = $C;
                    my $ii = v.c.oo || die "Too early to oo: D.t";
                    my $i = 0;
                    for my $t (keys %{ii.C}) {
                        my $vs = ii.C->{$t};
                        for my $cv (keys %$vs) {
                            my $os = $vs->{$cv};
                            push @{oo.C->{$t}->{$cv}||=[]}, @$os;
                            $i++ for @$os;
                        }
                    }
                    say "A.t A.c.sip C.t claims $i from: v.t v.c.sip D.t";
                }
                else {
                    # D is J moment C material to shade
                    my $e = G&Chade,$D;
                    my $o = G&Chs,$e;
                    o.y.D = $D;
                    o.y.R = $v;
                    o.y.k = $k;
                    push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
                }
            }
        }
        elsif (c&m eq 'i') {
            for my $k (keys %{c&s}) {
                my $v = c&s ->{$k};
                # inflated t -> s
                my $e;
                e.t = $k;
                e.y.cv = 0.1;
                e.c.s = $v;
                my $o = G&Chs,$e;
                o.y.k = $k;
                push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
            }
        }
        elsif (c&m eq 'ii') {
            for my $k (keys %{c&s}) {
                my $v = c&s ->{$k};
                # t -> C
                my $e = G&xot,$v;
                my $o = G&Chs,$e;
                o.y.k = $k;
                push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
            }
        }
        elsif (c&m eq 'C') {
            # C
            my $e = G&xot,c&s;
            e.y && e.y ne c&s || die "nonyiv";
            my $o = G&Chs,$e;
            # if y.in or sc.z make oo.all.
            push @{oo.C->{o.t}->{o.y.cv}||=[]}, $o;
        }
        else {
            die "How to read ".ki $C;
        }
        
    o 3: %johnny guitar:#c 
        say " O three";
        # opens recursive shop
        my $j = G&offis,i=>j=>'t';
        my $jj = j.sc.oo;
        for my $t (keys %{jj.C}) {
            my $vs = oo.C.>$t;
        my $hh = {C=>{map{ $_=>$jj->{$_} 
        my $oo = A.c.oo;
        # sort by zipped from A sips
        for my $t (keys %{oo.C}) {
            my $vs = oo.C.>$t;
            for my $cv (keys %$vs) {
                my $Cs = $vs->{$cv};
                @$Cs = reverse G&sortysip,$Cs,'A','R' if @$Cs > 1;
                my ($o,@out) = @$Cs;
                sayre "Dupl ".ki $_ for @out;
                oo.C->{o.t}->{o.y.cv} = $o;
                my $e = o.c.s;
                my $l = jj.C->{o.t}->{o.y.cv};
                my $v = l.c.s if $l;
                if (o.y.A ne $A) {
                    sayyl "e.t e.y.cv is from A.t";
                }
                G&Com,$
                sayre "Compare:";
                saybl ki $l;
                saybl ki $v;
                saygr ki $o;
                saygr ki $e;
            }
        }
        # names -> A fall replace to check inside
        
        
        
        
        
        
        
        
        
        
        #
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        # A -> J t/y images
Walks: | # othering
    u i
    # osc blinds previous empirica
    Chade:
        my $C = {};
        C.y.A = $A;
        C.t = s.t;
        C.y.cv = s.y.cv;
        C.c.s = s.c.s if exists s.c.s;
        C.sc = {%{s.sc}};
        return $C;
    # make an other holding it
    Chs:
        my $C = {};
        C.y.A = $A;
        C.t = s.t;
        C.y.cv = s.y.cv;
        C.c.s = $s;
        return $C;
    # sort by many y.As
    sortysip:
        my $so;$so = sub {
            my ($i,@try) = @_;
            my ($yk) = @try;
            my ($c,$d) = (a.y->{$yk},b.y->{$yk});
            $c && $d || die "sort no y$yk";
            ($c,$d) = (c.c.ip,d.c.ip);
            $c && $d || die "sort noy$yk ip";
            unless (exists $c->[$i] || exists $d->[$i]) {
                shift @try;
                return $so->(0,@try) if @try;
                die "ip sort ran out: a.t a.y.cv";
            }
            c.c.ip->[$i] <=> d.c.ip->[$i]
            || $so->($i+1);
        };
        sort {$so->(0,@Me)} @$s;
    # recur j index sc.jo... on above j or root i (thing)
    # out of throat order, first to 3 in tug scene coops others
    offis: %acgt:r j
        my $ik = $j.'C';
        my $ok = $j.'o';
        my $tw;
        my $oi;$oi = sub {
            my ($C) = @_;
            die "loop C.t" if $tw->{$C}++;
            my $jo;
            if (my $D = C.c.>$ik) {
                # tune in parents first
                $jo = D.c.>$j ||= $oi->($D);
            }
            else {
                # origin
                $jo = C.c.>$r;
            }
            my $i = jo.sc.>$ok ||= {};
            for my $nk (@Me) {
                ($nk,my $gk) = ($1,$nk) if $nk =~ s/^(y|c|sc)//;
                my $v = $C->{$nk};
                $v = $v->{$gk} if $gk;
                $i = $i->{$v} ||= {};
            }
            C.c.>$j = $i;
        };
        $oi->($C);
        
    # current & join expr
    wtch: %acgt:c d
        my $wt = {};
        wt.same = 1;
        for (keys %$d) {
            if (!exists $c->{$_}) {
                wt.new->{$_} = $d->{$_};
                wt.same = 0;
            } 
            elsif ($d->{$_} ne $c->{$_}) {
                wt.diff->{$_} = $c->{$_};
                wt.same = 0;
            }
            else {
                wt.sami++;
                wt.still->{$_} = $c->{$_};
            }
            wt.tot++;
        }
        for (grep { !exists $d->{$_} } keys %$c) {
            wt.gone->{$_} = $c->{$_};
            wt.same = 0;
        }
        $wt;
    

