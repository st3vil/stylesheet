Triangle: |
    u a
    # sevenatim
    # time passes independently of your being in the room (once you know about the room)
    s 1:
        A.2 = shift @$s;
        A.c.n = G&sJ,A.2,'n';
        # C is self for s
        # C is 's many for o
        A.c.s = G&sJ,A.2,'s';
    s 2:
        if (my $W = c&whole) {
            my $s = G&t,$W || die "no $W";
            # o it to here, as wh spacing desires
            # i subs copy same 4
            # ii linked D list per 2
            return T.Z.8 = $A;
        }
        if (my $W = c&base) {
            my $s = G&t,$W || die "no $W";
            # o it to here, with us overlaid
            # mix into indexes under anything from us
        }
        my $n = A.c.n;
        c&a = n.sc.a; # ch/sip = A (n/author)
        my $ch = defined s&ch ? s&ch : A.2.sc.ch || '';
        my $flux = c&a ->{$ch};
        my $tv;
        my $vt;
        my $ov; # overwrites tv []
        for my $k (sort keys %$flux) {
            my $Y = $flux->{$k};
            Y.c || die "noY".ki$Y;
            my $Z = Y.c.s;
            defined Z.t && defined Z.y.cv || die "noZ(C): ".ki$Z;
            if ($tv->{Z.t}->{Z.y.cv}) {
                push @{$ov->{Z.t}->{Z.y.cv}||=[]}, delete $tv->{Z.t}->{Z.y.cv};
                delete $vt->{Z.y.cv}->{Z.t};
            }
            my $z = $tv->{Z.t}->{Z.y.cv} ||= {};
            $vt->{Z.y.cv}->{Z.t} = $z;
            z.t = Z.t;
            z.y.cv = Z.y.cv;
            z.y.f = $Y;
            z.c.s = Z.c.s if exists Z.c.s;
            z.sc = {%{Z.sc}};
        }
        saybl "A.c.sip A.t s2: ".wdump 4, $tv;
        # sort by cv, sip
        
        # names -> A fall replace to check inside
        # A -> J t/y images
    s 3:
        # J t/y awakens
    s 4:
        # pieces sorted
        # brings up W inners <9 like t/y clang
    s 5:
        # goS made
    s 6:
        # going - figure difference
        c&el = '2' if 1 == 
    s 7:
        # pack down goods
    s 8:
        # tie together
        A.2.sc.tv = s&tv;
        # send out
    # listen, insward, moral law, has to give us power
    o 1:
        A.3 = shift @$s; # us
        A.c.z = G&sJ,A.3,'s';
        A.2 = shift @$s; # from
        A.c.s = G&sJ,A.2,'s';
        A.c.V = [ map { _.t ||= _.c.s } map{ G&s,$_ } @$s ];
    o 2:
        #G&A,$_=>
        # makes C of the operation to change A.o.akey
    

