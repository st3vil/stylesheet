
ElvisRhythmSection: | # so the Section c&Se
    # may be about starting plans for the other to 
    my $t = Rw Towering
        || return;
    #return unless c&Se == 1;
    #G.mkoJ->(); # frees us from test exit
    Rw ElvisBulio;
ElvisBulio: |
    my $bowl = ++Js&bowl;
    S
    t.dd($bowl, "bowl one");
    S
    t.dd($bowl, "bowl two");
    S
    t.dd($bowl, "bowl three");
    
    
ElvisDesi: | # decide what to do after Waytch, re T
    # may be about starting plans for the other to 
    my $t = Rw Towering Ang
        || return;
    return unless c&Se == 1;
    #G.mkoJ->(); # frees us from test exit
    
    my @l = qw'ElvisDaury pi/daury';
    my $dow;
    ($dow.>$_ ) = map { _.c.s } G&wops,$_ for @l;
    
    my $pi = \ $dow->{'pi/daury'};
    
    my $had;
    my $ha = &{
        my @r;
        while (my ($pin,$s) = each %$dow) {
            push @r, [$pin=>'',
                {s=>$s},
                {file=>'g/s/84',pi=>'Gup',dig=>slm 9,dig $s}
            ]
                if $had.>$pin ne $s;
            $had.>$pin = $s;
        }
        @r
    };
    $ha->();
    # put our way updates through this instead of the filesystem
    # WayHeave must come after hosted way (to Towering before _)
    my $hadow = &{
        G&elph,Waytch=>$_ for $ha->()
    };
    
    Rw ElvisBabEach;
    
    t.e =
    n Waytch=>W=>{filter=>qr{/s/84$}}
    t.cs->('sc lv,olv', "Waytch holding on to Mez");
    
    t.e =
    n ElvisDaury
    t.cs->('sc top', "complete with ElvisDaury");
    
     5s&desi = "Ghoster";
    
    # for 5 to resolve its intentions
     
    # see that T becomes known in the way by line/name
    # way change in the indent that T is on
    # especially wakes those with that T
    # for the many pi with different insides being tuned
    
    $$pi =~ s/fs = 41/fs = 34/;
    $hadow->();
    # sends way notify ^ re-5s and does Ghosters before returning
    #exit;
    my $Mat = A.4.sc.Mat;
    t.cs->({rsl=>[split "\n", G&sscC,$Mat ]}, "4's Matsoup");
    
    if (0) { # Normal etc get into the 5u?
        local t.e = 5s&u || die "NOu On: ".ki A.5.sc;
        t.cs->('sc lastK c s',"5's u's last lv");
        t.cs->('sc top',"5's u's latop");
        t.cs->('sc KC',"5's u's last KC");
        # somehow Sleepin gets in there
        t.cs->('sc lastK c s sc z 0 sc z,olv',"5's u's w 0.001 z");
    }
    
    t.cs->('sc top', "only odd numbers update");
    t.cs->('sc KC', "only odd numbers K");
    
    $$pi =~ s/time = /inflation = '(3..'./;
    $hadow->();
    #
    t.cs->('sc top', "everything updates");
    G.ouJ = A.5.sc.out if A.5.sc.out;
    
ElvisBabEach: | # each etc $from { babble test
    my $st;
    st.do.eo = 'eol';
    st.eo.flox = '300';
    st.e.four = 'dere';
    my @l;
    each etc $st {
        push @l, "$e $t -> $c";
    }}
    @l = sort @l;
    t.cs->({rsl=>\@l},"each etc babble works");
ElvisDaury: |
    u Zpace

    m $_=>-daury for 1..6;
pi/daury: |
    s&fs = 31; # y
    if ($s % 2) {
        T odd
        s&fs = 41
    }
    s&time = join' ',('~@~') x ++ Jc&bowls;
    
ElvisAny: | # swim cleaver
    my $t = Rw Towering Ang _ Sleepin
        || return;
    return unless c&Se == 1;
    t.toc.slimvague = 1;
    t.e =
    n Sleepin=>V
    t.cs->('sc top,grepl:/45 /', 'Sleepin already');
    t.e =
    n SleepAndin
    t.cs->('sc top,grepl:/45 /', 'Sleep top, prefer later');
    
    t.e =
    n Normal=>W=>{intur=>1}
    t.cs->('sc top,grepl:/45 /', 'Normal pref Sleepin');
    
    t.cs->('c zop c rsl,grepl:/\.45 /,isl', 'Normal rsl');
    
    
SleepAndin: |
    n Sleep
    n Sleepin=>4=>\'W'
Sleepin: | # ways in to knowing which dream is where
    u c
    # classify wave, particle knowing in Matu
    Sleap 31: %of:mo,v:cW
        # cough
    # should be anywhereable, soft linked program structure
    # for when this travel is only for xo.some.some* havers
    # or to do anything to any C at any A, or h/w/n
    # the hard won fishing pole locates truth
    Slope 37: %of:mo,v:cpi
        # cough
    
    # doctro
    # are we in or out
    J 45: %of:mo,laer:lateeer
        # cough
        
ElvisMutato: | # change normal/theu (every u's base)
    my $t = Rw Towering Ang _ EyvisMutante
        || return;
    return unless c&Se == 1;
    #G.mkoJ->(); # frees us from test exit
    
    # use this to:
    # see sc.ii or .y.s.sc.ii in o whole/base maneuvre
    # particularly whole will not work without it
    # and fall back to copying A.4.ii in n 2
    # when u.sc.ii in turn doesn't appear
    
    t.e = 
    n ElvisEmpty
    my $el = t.lookii->();
    t.cs->({rsl=>$el}, "ElvisEmpty has no ii");
    my $j = t.ntos->('J');
    my $yl = t.anii->(j.ii);
    t.toc.slimvague = 200;
    t.cs->({rsl=>$yl,grepl=>'/lying whee/'},
                            "Empty ii not with Mutante");
    t.cs->({rsl=>$yl,grepl=>'/ xo /'},
                             "Empty ii matches some xo");
    ok 0+@$yl > 140 && 0+@$yl < 200, "Empty ii yay many";
    
    
    t.e =
    n ElvisMutante
    my $top = T.op;
    is top.t, 'ElvisMutante',
                          "Mutante top.t = ElvisMutante";
    is top.sc.ii, undef, "No topscii";
    is ref top.y.s, 'HASH', "topys";
    is top.y.s.t, 's', "topys is s";
    is top.y.s.sc.top, $top, "topyssctop is top again";
    
    
    t.toc.slim = 100;
    t.cs->('sc top y tw O,nonext,grepl:/lying whee/',
        "Mutante top ytw O match");
    my $el = t.lookii->();
    t.cs->({rsl=>$el,grepl=>'/lying whee/'},
                                   "Mutante ii O match");
    is 0+@$el, 2+@$yl, "Mutante ii two more";
    
    t.e =
    n ElvisMuClos=>W=>{whole=>T.op}
    my $sl = t.lookii->();
    t.cs->({rsl=>$el,grepl=>'/lying whee/'},
                                    "MuClos ii O match");
    is 0+@$sl, 0+@$el, "MuClos ii count same as Mutante";
    
    t.e =
    n ExvisMutante
    t.cs->('sc top', "ExvisMutante");
    
    t.e =
    n Normal=>V
    t.cs->('sc lv,olv,grepl:/Oiviate/', "Normal");

    t.e =
    n ElvisMutated
    t.cs->('sc lv,olv', "ElvisMutated"); 
    t.xo->("Mutated with T dogon");
    
    # should have T tracked somewhere ^
    
ElvisMuClos: |
    Jc&whole = c&whole || die "Givewhole";
    
ElvisMutante: |
    Jc&base = 'normal';
    n ExvisMutante
ExvisMutante: |
    u alact
    Oxviuta 6: %of:O
        0 && sayyl "Flying wheels: C.t";
        push @{3s&anyO||=[]}, $C;
    u alacgts
    videola:
        $s .= "Lapl";
        $s .= 3 + 5;
    
EyvisMutante: |
    u alact
    Oivilate 6: %of:O
        push @{3s&Orious||=[]}, $C if C.t =~ /^[A-Z]/;
ElvisMutated: |
    so:
        soME
    u ExvisMutante
    T dogon
    n too=>2=> G&videola,'s'  

