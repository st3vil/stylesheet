ElvisMutato: | # change normal/theu (every u's base)
    my $t = Rw Towering Ang _ EyvisMutante
        || return;
    Rw HasWay;
    return unless c&Se == 1;
    #G.mkoJ->(); # frees us from test exit
    
    # use this to:
    # see sc.ii or .y.s.sc.ii in o whole/base maneuvre
    # particularly whole will not work without it
    # and fall back to copying A.4.ii in n 2
    # when u.sc.ii in turn doesn't appear
    
    t.e = 
    n ElvisEmpty
    my $el = t.lookii->();
    t.cs->({rsl=>$el}, "ElvisEmpty has no ii");
    my $j = t.ntos->('J');
    my $yl = t.anii->(j.ii);
    t.toc.slimvague = 200;
    t.cs->({rsl=>$yl,grepl=>'/lying whee/'},
                            "Empty ii not with Mutante");
    t.cs->({rsl=>$yl,grepl=>'/ xo /'},
                             "Empty ii matches some xo");
    ok 0+@$yl > 140 && 0+@$yl < 200, "Empty ii yay many";
    
    
    t.e =
    n ElvisMutante
    my $top = T.op;
    is top.t, 'ElvisMutante',
                          "Mutante top.t = ElvisMutante";
    is top.sc.ii, undef, "No topscii";
    is ref top.y.s, 'HASH', "topys";
    is top.y.s.t, 's', "topys is s";
    is top.y.s.sc.top, $top, "topyssctop is top again";
    
    
    t.toc.slim = 100;
    t.cs->('sc top y tw O,nonext,grepl:/lying whee/',
        "Mutante top ytw O match");
    my $el = t.lookii->();
    t.cs->({rsl=>$el,grepl=>'/lying whee/'},
                                   "Mutante ii O match");
    is 0+@$el, 2+@$yl, "Mutante ii two more";
    
    t.e =
    n ElvisMuClos=>W=>{whole=>T.op}
    my $sl = t.lookii->();
    t.cs->({rsl=>$el,grepl=>'/lying whee/'},
                                    "MuClos ii O match");
    is 0+@$sl, 0+@$el, "MuClos ii count same as Mutante";
    
    t.e =
    n ExvisMutante
    t.cs->('sc top', "ExvisMutante");
    
    t.e =
    n Normal=>V
    t.cs->('sc lv,olv,grepl:/Oiviate/', "Normal");

    t.e =
    n ElvisMutated
    t.cs->('sc lv,olv', "ElvisMutated"); 
    t.xo->("Mutated with T dogon");
    
    # should have T tracked somewhere ^
    
ElvisMuClos: |
    Jc&whole = c&whole || die "Givewhole";
    
ElvisMutante: |
    Jc&base = 'normal';
    n ExvisMutante
ExvisMutante: |
    u alact
    Oxviuta 6: %of:O
        0 && sayyl "Flying wheels: C.t";
        push @{3s&anyO||=[]}, $C;
    u alacgts
    videola:
        $s .= "Lapl";
        $s .= 3 + 5;
    
EyvisMutante: |
    u alact
    Oivilate 6: %of:O
        push @{3s&Orious||=[]}, $C if C.t =~ /^[A-Z]/;
ElvisMutated: |
    so:
        soME
    u ExvisMutante
    T dogon
    n too=>2=> G&videola,'s'  
ElvisDaury: |
    u Zpace

    m $_=>-daury for 1..6;
pi/daury: |
    s&fs = 31; # y
    if ($s % 2) {
        T odd
        s&fs = 41
    }
    s&time = join' ',('~@~') x ++ Jc&bowls;
    