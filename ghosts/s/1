
Day: | # world primitives
    u i
    1 && saygr "Day is awake";
    # sympathetic to design some stuff
    # see 64 got
    # hidey machine thats giving you things
    G:
        $G = {%{$G||{}}, i=>{%{A.i||{}}}, t=>G.t||'nobody'};
        G.h = G.i.h;
        $G
    # find local things, look up trail of con centers
    # could also look down/allways for elvis proto
    t: %acgt:s c y
        ($y,$c) = ($c,$y) if ref $c eq 'CODE';
        $C = !ref $s ? {t=>$s,y=>{},c=>($c||{})} : G&s,$s,$c;
        c&on ||= 'ii';
        c&max ||= 5;
        c&min ||= 0;
        for my $i (c&min .. c&max) {
            my $from = $i == 0 ? $A : $A.>$i;
            $from || next;
            
            my $on = $from.>c&on || next;
            
            my $t = $on.>C.t || next;
            $t = $y->($t,$from,$i) if $y;
            $t || next;
            c&from = $from;
            c&inet = $i;
            return $t;
        }
        return
    
    # look for thing named $s in We thing named $of, on A net
    wup: %acgt:s of
        $of ||= 'w';
        my $want = sub {
            my ($t,$f,$i) = @_;
            # if i > netmask
            # if t mentions some other way to get it
            keys %$t < 2 && sayre "wup t looks funny: ".ki($t)."\n  ".G&sn;
            my $tw = t.y.tw || die "w $s found no ytw on"
                ." A.1.t s A.t @ $i (f.t): ".ki$t;
            $tw.>$s
        };
        G&t,$of,$want;
    
    # wup including G.way (going)
    wops:
        my $w = G&wup,$s;
        
        # or the old way,
        if (!$w) {
            # going, hash tied to a directory
            # makes digest when way entered
            (my $fi = $s) =~ s/\W/-/g;
            $w = {t=>$s};
            wc&s = G.way->{$fi} || die "No way: $fi";
            ws&dige = G.way.o.dige->{$fi}
                || die "Not Gway not diges $fi: wayo: ".ki G.way.o;
            ws&of = 'w';
        }
        $w
    
    # W is the of=W, could be pointer to load the rest
    # 
    Wup: %acgt:s of
        $of ||= 'W';
        my $W = G&wup,$s,$of || return;
        my $s = W.c.s;
        ref $s eq 'HASH' || die "No Wup $of: $s: ".ki $W;
        $s;
    
    #c make call, in i
    # looks up to 5 many rare/little subs
    # s is code or i t
    # Me precompiled args
    # contexts calls, kinds of frame:
    # B lexical cell joinery
    # D cell itself, T.D is of A throat
    # < T.h is an error handler
    h:
        my $y; # code
        my $D; # C about code
        if (ref $s eq 'CODE') {
            $y = $s;
            if (my $d = T.D) {
                # passed code, happens to be T.D
                $D = $d if dc&code && dc&code eq $y;
            }
        }
        elsif (!ref $s && A.i && A.i.>$s) {
            $y = A.i.>$s;
            if (my $i = A.ii && A.ii.i) {
                $D = i.y.tw.>$s;
            }
        }
        elsif (ref $s eq 'HASH' && ref s.c eq 'HASH' && ref sc&code eq 'CODE') {
            $y = sc&code;
            $D = $s;
        }
        else {
            # must be string i name or C for t lookup
            my $C = !ref $s ? {t=>$s,y=>{},c=>{}} : G&s,$s;
            c&on = 'i';
            $y = G.i.t->($A,$C,$G,$T,$C);
            $y || die "t Look fail: ".G&sn ."\n    ".ki $C;
            my $Y = c&from;
            if (my $i = Y.ii && Y.ii.>c&on ) {
                $D = i.y.tw.>$s;
            }
        };
        $y || die "no h: $s";
        
        my $uB = Gc&B || {t=>'nowhere',sc=>{A=>A.up}};
        my $B = {t=>Ds&of||"?",y=>{cv=>D.y.cv||''}};
        B.y.out = $uB;
        if (my $p = uB.y.in) {
            # pevious B-level call inside the uB call
            p.y.next = $B;
            B.y.prev = $p;
        }
        else {
            uB.y.in = $B;
        }
        Bs&y = $y;
        Bs&D = $D if $D;
        Bc&s = $s;
        Bc&h = delete T.h if T.h;
        Bs&A = $A;
        Bs&C = $C;
        Gc&B = $B;
        Gc&mas && Gc&mas->($A,$C,$G,$T," h B.t D.t");
        ref $y eq 'CODE' || ref \$y eq 'GLOB' || die "B.t not code: ($s) ".G&sn ."  $y ref:"
            .ref($y)."\n   refref".ref(\$y)."\n   ".ki($y)."\n   ".ki $D;
        
        my @r;
        if (wantarray || !Ds&raysens) {
            @r = eval { $DB::single = G.ydrop; $y->($A,$C,$G,$T,@Me) };
        }
        else {
            $r[0] = eval { $DB::single = G.ydrop; $y->($A,$C,$G,$T,@Me) };
        }
        Gc&mas && Gc&mas->($A,$C,$G,$T,"<h B.t D.t");
        Gc&B = $uB;
        
        #c sum h
        if ($@) {
            (my$ba,$@) = ($@,'');
            if (Bs&hand) {
                # T.h figured it safe from below
            }
            elsif (Bs&foot) {
                # bang polished, pass out
                die $ba;
            }
            else {
                # tell aboves we did this
                my $S = $B;
                my @B;
                while ($S && !Sc&h) {
                    unshift @B, $S;
                    Ss&foot = $B;
                    $S = S.y.out;
                }
                
                Bc&h && die "< Have the handler to $ba things.";
                
                
                my $d = delete(T.bangC) || $D;
                my $code = dc&s;
                
                my @tri;
                (my $clear = $ba) =~ s/, <DATA> line \d+\.//;
                if ($D && $clear =~ /.+ line (\d+)/g) {
                    my $line = $1;
                    my @s = split "\n", $code;
                    my ($for,$aft) = (5,3);
                    @tri = ([]); # split into three
                    my $i = 1;
                    for (@s) {
                        $i eq $line && push @tri, [];
                        $i > $line - $for && $i < $line + $aft
                            && push @{$tri[-1]}, $_;
                        $i eq $line && push @tri, [];
                        $i++;
                    }
                    @tri = map {join "\n", @$_ } @tri
                }
                
                my $la = {};
                my @Bs;
                for (@B) {
                    my @s = "_.t _.y.cv _s&D.t";
                    next if $s[0] eq 'i 0.1 h';
                    # notice particle hops
                    my $Y = _s&A;
                    if (Y.1 ne la.A.1) {
                        push @s, G&sn,$Y;
                        la.A = $Y;
                    }
                    # fold of=i 0.1 in same A, etc.
                    if (my $L = @s == 1 && $Bs[-1]) {
                        my ($Lt,$st) = map { /(\S+ \S+)/ } $L->[0],$s[0];
                        if ($Lt eq $st) {
                            $L->[0] .= ", _s&D.t";
                            next;
                        }
                    }
                    push @Bs,\@s;
                    # < the one line it came through in D?...
                }
                my $ind = '';
                my $Bs = join "\n", map {$_=$ind.$_;$ind.='  ';$_}
                    map{join'  ',@$_} @Bs;
                
                my $code = join "\n>>>>>>>>>>\n", @tri if @tri;
                
                $ba = join "\n\n", grep {defined} $Bs, $code, $ba;
                
                # die...\n keeps first line number
                die $ba."\n";
            }
        }
        wantarray ? @r : $r[0];
    
    
    
    
    #c Wording meaning of word/contenter
    # compiles for given args
    w:
        my $ar = {};
        # their $ar (+)
        if (ref $Me[0]) {
            my $ra = shift @Me;
            %$ar = %$ra;
        }
        # their args
        my @o = @Me;
        while (@Me) {
            my $k = shift @Me;
            @Me || die "w odd hash after $k: ".ki\@o;
            my $v = shift @Me;
            $ar.>$k = $v;
        }
        ar.__D && die "w __D deprecated: ".ki$ar;
        my $nar;
        # use this w call's ACGT
        # replaced once our A finds code, before its h'd
        $nar.>$_ = delete $ar.>$_ for grep {exists $ar.>$_ } qw'A C G T';
        my @args = sort keys %$ar;
        my $args = join',','A,C,G,T,ar',@args;
        
        # look in of=w up the network to 5
        # they are pins near network of knowledge via T
        my $w = G&wup,$s;
        
        # or the old way,
        if (!$w) {
            # going, hash tied to a directory
            # makes digest when way entered
            (my $fi = $s) =~ s/\W/-/g;
            $w = {t=>$s};
            wc&s = G.way->{$fi} || die "No way: $fi";
            ws&dige = G.way.o.dige->{$fi}
                || die "Not Gway not diges $fi: wayo: ".ki G.way.o;
            ws&of = 'w';
        }
        $w || die "No way to $s (on A.1.t's A.t)";
        
        ws&dige || die "w no dige: ".ki$w;
        ws&of || die "w not of: ".ki$w;
        
        my $ark = G.sc.pinark ||= {};
        # dige same across all arg variations
        my $v = $ark.>w.t.>ws&dige.>$args ||= do {
            my $v = G&hup,$w;
            v.y.argumented = $w;
            vs&args = $args;
            G&perlcode,$v,"MakingWay";
            v.c.code || die "no ccode back: ".ki$v;
            $v;
        };
        v.sc.called++;
        
        G&has,\'mo'=>way=>w.t=>w.sc.dige=>1 if A.mo;
        
        T.w = $v;
        my $A = exists nar.A ? nar.A : $A;
        my $C = exists nar.C ? nar.C : $C;
        my $G = exists nar.G ? nar.G : $G;
        my $T = exists nar.T ? nar.T : $T;
        my @arg = map{ $ar.>$_ }@args;
        if (ref $A ne 'HASH') {
            die "Not hashA: ".wdump 3, [$nar,$ar];
        }
        A.i.h->($A,$C,$G,$T,$v,$ar,@arg);
        #vc&code ->($A,$C,$G,$T,$ar,@arg);
    
    # make s.c.code, see of (which sets dige)
    perlcode:
        $C = $s;
        # encapsulate sub with args
        G&CoArgulate;
        # translate into perl
        G&hoh,C.sc,$_ for grep{$_} G&CoBabbler;
        # c&code = eval c&s
        G&Code,$C,@Me;
    
    # c&code = eval c&s
    # l = name of situation
    Code: %acgt:s l
        ($s,$l) = ($C,$s) if !ref $s;
        $l = "$l: " if $l;
        my $Y = $Bun::A;
        delete Ys&stacktime;
        
        T.bangC = $s;
        my $y = eval sc&s;
        die $l."Nocompile s.t: ".ki($s)
            .ind('  ',$@)."\n\n sc&s \n"
            if $@;
        die $l."Not code s.t: ".ki($s)
            if ref $y ne 'CODE' && !ss&subpeel;
        delete T.bangC;
        sayre join"\n", "Warning from $l s.t s.y.cv"
            if delete Ys&stacktime;
        
        sc&code = $y;
    
    n $_=>1=>G.way.>$_ for qw'CoArgulate CoBabbler';
    
    # compiler for old G.w
    n won=>'',join("\n",map{G.way->{$_} || die "no $_"}qw'CoArgulate CoBabbler')
    
    #
    

