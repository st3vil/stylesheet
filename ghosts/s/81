
Crank: | # add trips for hC to glow more
    my $j = e&hJ ->[-1];
    my $i = 1;
    $i *= -1 if us&S;
    js&boost += $i;
    sayyl "Crank to js&boost: ".G&sn,$j;
    # make into Trips?
    # makes Matu wakeup happen
    # as a G.A would unify
P: |
    u urw
    u UpPg
    n Zupe=>-run
pi/run: |
    symb: %hs:394,fs:12
        R
    n jeio=>2=>C.t=>'%dos:runs'
runs: |
    my $i = e&hC ->[-1];
    saybl ki $_ for @{ e&hC };
    G&zen,Com=>[dollarsworth=>''=>"Blagna",{pi=>'dae'}];
Com: |
    u urw
    u UpPg
    y.at.anch = "Noteal";
    ($A)=
    stuff:
        is
    say "Yer $$";
    G&liz,Com=>$_ for sub {
        my ($k,$s) = @_;
        saygr "Yer $$";
        #Rw waitme re;
        fork() ||
        Rw comput $s;
    };
comput: |
    say "Yer $$";
    sayyl "Yup: ".wdump 3, $s;
    exec 'perl got Zupe 4 b';
    die "BVack:";
    exit;
pi/py: | # tip of the protoberg
    # etc
pi/pud: |
    $s = Rw Typerack;
    # group 12345G
    
    # how many M inners before 'more' (depth first)
    3Cc&intlim ||= 15;
    # max depth before like nothash
    c&dl ||= 2Cc&dl;
    c&dl = 2 if !defined c&dl;
    
    # travel boosts/cons depth
    c&dl += Js&boost * 2 if Js&boost;
    # c&dl += 2 if c&depth < 5 && C.t eq 'sc';
    c&dl += 2 if c&depth < 6 && C.t eq 's' && 22Cs&istycsc;
    c&dl -= 3 if C.t eq 'y' && 2Cs&istycsc;
    c&dl += 2 if C.t eq 'in' && A.2.C.t eq 'y' && 22Cs&istycsc;
    # crawling up a long thin trunk
    if (0 && C.t ne 'y' && (c&dl - c&depth) < 1 && 3Cc&intl < (3Cc&intlim / 3)) {
        T wtf
        c&dl += 1;
    }
    T glow
    
    y.in = 0.21;
    my $ind = join'', ('  ') x (c&depth - 1);
    
    n ind=>o7=>"\n$ind"
    n sli=>o8=>"<  ",'%hs:784,dos:Crank'
    n t=>1=>"C.t ",'%dos:Crank'
    
    my ($return,$sy);
    if (ref $s eq 'HASH' && keys %$s < 5 && 
        G&isC,$s) {
        # try
        if (!keys %{s.y} && !keys %{s.sc}
            && keys %{s.c} == 1 && exists s.c.s) {
            n short=>12=>" t: s.t","%hs:457"
            m "c\.s"=>-pud=>{s=>sc&s,ima=>[qw'c s']}
            $return = 2;
            c&dl += 2;
        }
        s&type = $sy = 'C';
        $return ||=
        Rw Cpud;
    }
    
    c&block = 'same' if $s eq 2Cc&s && 2Cs&pi eq s&pi ;
    c&block = 'b' if C.t eq 'ip' && A.2.C.t eq 'c';
    my $idA = &s{
        my $v = sc&s;
        "s.t"
            .(s.cv > 0 && " s.cv")
            .(ref $v eq 'HASH' && v.t && v.t ne s.t && " (v.t)")
    };
    
    # classify bits of the slide
    if (!c&block && ref $s eq 'HASH') {
        T hashi
        if (C.t eq 'G') {
            my $w = s.w;
            if (ref $w eq 'CODE' || ref \$w eq 'GLOB') {
                c&block = 'G';
            }
        }
        if (s.y eq $s) {
            s&type = 'A';
            c&block = 'yA' if A.2.C.t eq 'y';
            c&block = 'AA' if A.2.C.sc.type eq 'A';
            if (c&block) {
                c&blos = $idA->($s);
            }
        }
    }
    
    if (c&block) {
        n block=>2=>c&block,'%hs:855'
        c&blos &&
        n blocked=>21=>' '.c&blos,'%hs:827'
        return
    }
    
    #c classify
    if (s&type eq 'A') {
        $sy = 'A';
        T Aye
        if (s.1 && s.1 eq $s || s.sc && s.sc.n) {
            $sy = "J";
            
            $return ||=
                Rw Jpud;
        }
        else {
            $return ||=
                Rw Jpud;
        }
        # T # seen to/from ghost, they osc pool up to direct change in
        # chasing up all the J that hit it
        # osc pool meaning a vortex of self, changes moving upward, 
        # just copying changed hashes - replace {} from changed up to root
        # and copy it in at the other J
    }
    if ($sy) {
        n sy=>o75=>$sy=>"%hs:7574,ab:1,poi:0,lh:40%,fs:".int(100 / c&depth)
    }
    return if $return;
    
    my ($ks,$vs);
    if (ref $s eq 'ARRAY') {
        n is=>11=>'[','%hs:457'
        C.sc.type = 'array';
        $vs = [@$s];
        $ks = [0..(@$s-1)];
        if (22Cs&istycsc) {
            if (A.2.C.t eq 'c') {
                c&dl = 1 if C.t eq 'N';
            }
        }
        if (c&depth > c&dl) {
            return
            n no=>2=>ki($s),'%fs:7,hs:458'
        }
    }
    elsif (s&type ne 'C') {
        if (ref $s ne 'HASH' || c&depth > c&dl) {
            T nonhash
            my $z = s&type eq 'A' ? $idA->($s)
                : ki $s;
            my $bg;
            if (!ref $s) {
                $z =~ s/^!%://;
                $bg = ',bg:653';
                if (!defined $s) {
                    n know=>18=>'undef','%hs:845,fs:6'
                }
                elsif (!length $s) {
                    n know=>18=>"''",'%hs:845,fs:6'
                }
                elsif (c&d < 3) {
                    $z = slim((600 / (c&d||1)),$s);
                }
            }
            elsif (200 < length $z) {
                $z = slim(200,$z);
                n short=>18=>'...','%hs:798,fs:7'
            }
            my $fs = 6;
            $fs = 8 if !ref $s;
            if (2Cs&istycsc) {
                if (C.t eq 't') {
                    $z = $s;
                    $fs = 23;
                }
                if (C.t eq 'y') {
                    T ys
                    my $ig;
                    if (s.cv) {
                        ig.cv++;
                        my $cv = s.cv;
                        $cv =~ s/^0\.//;
                        n cv=>191=>$cv,'%hs:286,fs:12'
                    }
                    $z = Rw yki $s $ig $we:A.2.C.c.s;
                }
            }
            if (22Cs&istycsc) {
                if (A.2.C.t eq 'y') {
                    $fs = 16 if C.t eq 'cv';
                }
            }
            
            n no=>2=>$z,"%fs:$fs,hs:398,lh:0.9,mh:5$bg,dis:2"
            return
        }
        if (s.y eq $s && c&depth > c&dl) {
            return
            n A=>2=>"A s.t s.y.cv; ".ki(s.c)."    ".ki(s.sc);
        }
    }
    
    #c hash out
    my ($hash,@ks) = Rw HashKs $s $ks $vs;
    n siz=>12=>" x ".@ks,'%hs:283,fs:6';
    if (my $kg = delete A&kg) {
        my @sh;
        @ks = grep {
            if ($kg->($_)) {
                push @sh, $_;
            } 
            else { $_ }
        } @ks;
        @sh &&
        n sh=>189=>"sh x".@sh=>'%hs:483,fs:6';
    }
    3Cc&intl++ > 3Cc&intlim && return 
        n more=>4=>"more",'%hs:544'
    
    return #sayre "Cos C&type and so..."
        if C.t =~ /^(up|T)$/
        || ( (s&type eq 'A' || 2Cs&type eq 'A') && C.t =~ /^ii?/)
        || ( 2Cs&type ne 'array' && C.t =~ /^\d+$/)
        #|| J.A.d > 5
        ;
    s&css = 'border-left:3px solid 473' if @ks > 3;
    
    my $limit = 30;
    my $lim = @ks > $limit;
    my $was = @ks;
    @ks = @ks[0..($limit-1)] if $lim;
    
    m $_=>-pud=>{s=>$hash->{$_}},'%ma:1' for @ks;
    #m "looking: ".$_=>''=>{s=>ki $hash->{$_}} for @ks;
    
    $lim && 
    m limited=>''=>{s=>"Limited from $was to $limit"},{hs=>"888",ws=>1}
Jpud: |
    my $spc = c&dl - c&depth;
    if ($spc < 1) {
        n Jt=>15=>"s.t",'%hs:588,fs:13'
        n sn=>167=>" $_ ",'%hs:897,fs:7' for G&sn,$s;
        n co=>168=>(sc&o||"?")=>'%hs:374'
    }
    #
    T there
    if ($spc < 1) {
        my $dw = {map{$_=>1}qw'y 1 2 3 4 5 i ii'};
        A&kg = &k{ $dw.>$k };
    }
    # return if
    $spc <= 0;
Apud: |
    my $spc = c&dl - c&depth;
    if ($spc < 1) {
        n Jt=>15=>"s.t",'%hs:588,fs:13'
        n sn=>167=>" $_ ",'%hs:897,fs:7' for G&sn,$s;
        n co=>168=>(sc&o||"?")=>'%hs:374'
    }
    #
    T there
    if ($spc < 1) {
        my $dw = {map{$_=>1}qw'y 1 2 3 4 5 i ii'};
        A&kg = &k{ $dw.>$k };
    }
    # return if
    $spc <= 0;
Cpud: |
    my $spc = c&dl - c&depth;
    $spc = 1 if c&block;
    # scale t fontsize
    my $fss = &s{
        my $over = length($s) / 14;
        my $fs = int(12 / ($over < 1 ? 1 : $over * 0.89));
        $fs = 3 if $fs < 3;
        $fs
    };
    if ($spc < 1) {
        my $ac = G&aC,$s,'Ck5';
        
        $ac->[1] =~ s/^0\.//;
        my $fs = $fss->($ac->[0]);
        #
        n t=>2=>{s=>shift @$ac},"%hs:356,fs:$fs,mw:14"
        n ycv=>2=>{s=>shift @$ac},'%fs:12,ma:0.3'
        my $y = shift @$ac;
        ($y) = Rw Deyer $y;
        n y=>201=>{s=>$y},'%hs:856,fs:7'
        
        my $c = ki s.c;
        my $cac = shift @$ac;
        $c = $cac if length $c > 40;
        my $cfs = $fss->($c);
        n c=>21=>{s=>$c},"%hs:656,fs:$cfs"
        
        # < spot s&J
        my $sc = ki s.sc;
        my $scac = shift @$ac;
        $sc = $scac if length $sc > 80;
        my $scfs = $fss->($sc);
        n sc=>22=>{s=>$sc},"%hs:456,fs:$scfs"
    }
    elsif ($spc < 2) {
        my $ac = G&aC,$s,'Ck5';
        
        $ac->[1] =~ s/^0\./$2/;
        my $fs = $fss->($ac->[0]);
        $fs += 2;
        
        n t=>2=>{s=>shift @$ac},"%hs:356,fs:$fs,mw:14"
        n ycv=>2=>{s=>shift @$ac},'%hs758,fs:12,ma:0.3'
        my $y = shift @$ac;
        $y =~ s/\bcv\b//;
        ($y) = Rw Deyer $y;
        
        n y=>201=>$y,'%hs:856,fs:7'
        
        my $c = {%{s.c}};
        if (exists c.s && 0) {
            my $s = delete c.s;
            my $fs = $fss->($s);
            n s=>23=>$s,"%hs:356,fs:$fs,mw:14,ab:1,mt:2"
        }
        my $dw = {map{$_=>1}qw't y'};
        A&kg = &k{ $dw.>$k };
        return 0;
    }
    else {
        # dive into
        return 0;
    }
    1
Deyer: | # fold y familiar
    my $ig = ar.ig || {};
        my @yt = qw'D r x up|next|prev:+';
        my $m;
        for my $k (@yt) {
            ($k,my$la) = split ':', $k;
            $la ||= $k;
            $m .= "$la " if grep { $y =~ s/\b$_\b//g && ++$ig.>$_ }
                split /\|/, $k;
        }
        my $ys = join " ", grep{$_} split /\s+/, $y;
        $y = join " ", grep{$_} $m, $ys;
        ($y,$m,$ys)
yki: | # ki() again
    my $ig = ar.ig || {};
    my @ks = sort keys %$s;
    my $ks = &v{
        join' ',sort keys %$v
    };
    my $m;
    if ($we && C.t eq 'y') {
        my $y = join ' ', @ks;
        ($y,$m) = Rw Deyer $y $ig;
    }
    my @l = map {
        my $v = $s.>$_;
        ar.ig && ar.ig.>$_ ? '' :
        "$_:".(ref $v eq 'HASH' ? (
            v.y eq $v ? "A:v.t" :
            v.t && v.y && (v.c||v.sc) ? do {
                my $title = ar.we && ar.we.t eq v.t && ar.we.y.cv ? "^"
                    : "v.t v.y.cv";
                "C:$title (".$ks->(v.c).")".$ks->(v.sc)
            } :
            "?:".ki $v
        )
        : ref $v || $v
        );
    } @ks;
    join ' ', grep {$_} $m, @l;
Typerack: | # makes a J for whitespaced typograph
    y.at.qs=1;
    y.at.ws=1;
    y.clos=1;
    
    if (!A.1) {
        A.3 = J.mo.J; # the W planted in A.4
        A.2 = J.Jiter; # the last J
        J.2 = A.2; # its last so A.2.2...
        #y.at.ml=J.A.d;
        c&depth = J.A.d;
    }
    else {
        c&depth = A.2.C.c.depth + 1;
    }
    C.sc.istycsc = 1 if
        ref $s eq 'HASH' && defined s.t && s.y && (s.c || s.sc);
    
    if (A.2.C.sc.pi ne J.C.sc.pi && ar.m) {
        my @p;
        for (@{ar.m}) {
            sayyl "Skiping into $_ ion ".ki$s;
            my $o = $s;
            $s = ref $s eq 'HASH' ? $s->{$_} : 
                ref $s eq 'ARRAY' ? $s->[$_] :
                undef;
            if (!$s) {
                my @off = @{ar.m}[@p .. (@{ar.m}-1)];
                n nopoint=>0.002=>"Broke: @p"
                n nopoint=>0.003=>">@off<",'%hs:687'
                $s = $o;
                last;
            }
            push @p, $_;
        }
    }
    c&s = $s;
HashKs: | # order children, returns $hash,@ks
    # order children
    # use Walks/hord
    my $hord = sub {
        my ($s,$head,$tail) = @_;
        my ($he,$ta) = ([],[]);
        $head ||= [qw't cv y c sc'];
        $tail ||= [qw's z'];
        my $tw;
        for ([$he=>$head],[$ta=>$tail]) {
            my ($to,$k) = @$_;
            for my $t (@$k) {
                $s.>$t || next;
                $tw.>$t ++;
                push @$to, $t;
            }
        }
        my $num = qr/^\-?\d+(\.\d+)?$/;
        my @mi = sort { $a =~ $num && $b =~ $num ? $a <=> $b : $a cmp $b }
            grep { !$tw.>$_ } keys %$s;
        [ map { [ $_ => $s.>$_ ] } @$he, @mi, @$ta ];
    };
    my (@he,@ta);
    push @he, qw't cv y' if c&istycsc || C.sc.istycsc;
    push @ta, qw'c sc' if c&istycsc || C.sc.istycsc;
    push @ta, qw'ip sip ipi T' if (2Cc&istycsc || A.2.C.sc.istycsc) && C.t eq 'c';
    ar.ks = c&ks if c&ks;
    ar.vs = c&vs if c&vs;
    
    my $se = ar.ks ? {map{$_=>shift@{ar.vs}}@{ar.ks}} : $s;
    my @ks = map{$_->[0]}map{@$_} $hord->($se,\@he,\@ta) if ref $se eq 'HASH';
    ($se,@ks)
    

