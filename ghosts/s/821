

Washup: | # G term
    my $d = G.c.bay."/p/$$";
    `mkdir -p $d`;
    Gc&dir = $d;
    if (ar.take) {
        my $l = G.c.bay."/p/ar.take";
        unlink $l if -l $l;
        symlink $$, $l;
    }
    
    my $te = {
        out => \*STDOUT,
        err => \*STDERR,
        in => \*STDIN,
    };
    each ch,ha $te {
        my $f = "$d/$ch";
        -e $f && die "Had $f!";
        `touch $f`;
        close $ha;
        my $mode = $ch eq 'in' ? '<' : '>';
        open($ha, $mode, $f)
            || die "$f open fail: $!";
        $! && sayre "$f open noise: $!";
        undef $!;
    }
    write_file($d."/pa", G.c.oparent);
    my ($so) = $0 =~ /^\S+ (.+)$/;
    $so || die "Not so? $0";
    Gc&so = $so;
    write_file($d."/so", $so);
    
    
    
Baye: | # Opper's readline of <STDIN> loop
    # fantabulously troubled
    # listen to first thing, switch up by remote entrant
    my $til = 0.06;
    #my $bo = Js&bowls++;
    G.d &&
        Rw linkrement upto Baye;
    my $nom;$nom = Js&nom = &{
        G&timer,$til,$nom if $nom eq Js&nom;
        my $s = -s STDIN;
        if (Gc&parent_pid) {
            -e "/proc/Gc&parent_pid" || exit;
        }
        $s && $s > Js&size || return;# sayre " Still $s or ".eof(*STDIN);
        #1 && saygr " ISon or ".eof(*STDIN);
        Js&size = $s;
        Rw Baying;
    };
    G&timer,0.1,$nom;
    
Baying: | # Opper reads line
    while (1) {
        $_ = <STDIN>;
        chomp;
        if (/./) {
            #1 && say "in in: $_";
            my $W = G&Ct,[Bayed=>[s=>$_]];
            4s&toy->({to=>[$W]});
        }
        if (ar.forever) {
            snooze 10000;
            next;
        }
        eof(*STDIN)# && sayyl("The end>?")
            && last;
    }
    
Bayed: | # Opper's read line into mo
    Js&ein.t.s.sMJ = &sMJjeTCA{
        if ($s =~ /^(\[|\{)/) {
            my $C = eval { djson $s };
            if ($@) {
                sayre "NOT json C: $_";
                $@ = '';
                return;
            }
            $C = G&Ct,$C if ref $C eq 'ARRAY'; # TODO may be z
            #sayre "Amos: ".wdump 3, [$s, $C, C.c.e];
            
            G.d &&
                Rw linkrement Bayed;
            n $C
        }
        else {
            sayre "Ames: ".wdump 3, $s;
        }
        T.pos = '';
        # processes the line or forks an interpreter to pull cleanedup C from
        # interpreter = instruction elabouration
    };
    S
    T.nose = 2;
    
Tiot: | # n head of a perspective
    if (A.1 eq A.3) {
        Js&ein.bo = 'Doable';
        Jc&tape = 'Dejo:curve:Junov';
    }
    y.at.dis = 3;
    y.n = 11;
    my $t = exists ar.t ? ar.t : C.t;
    #my $dis = ",dis:2" unless ar.nodis;
    my $fs = A.1 eq A.3 ? 15 : A.2 eq A.3 ? 13 : 11;
    #$dis'
    n t=>o1=>"$t"=>"fs:$fs,hs:488,dos:Reimp,ma:0.2"
Thrext: | # n head of a so
    my $k = ar.m->[0];
    my ($num,$name) = split ':', C.sc.>$k;
    n sip=>o9=>$num=>'%fs:7,dos:Forsys'
    n col=>o95=>':','%hs:489,fs:6'
    if (my $nt = ar.next_t) {
        return if $name eq $nt;
    }
    n t=>1=>$name=>'%fs:12'
    
Reimp: | # W name click shortens lv to one wave
    # can fix it if bunging out
    1 && saygr "Reimpung: ".ki e.c.us;
    1 && saygr "Ono: ".G&sn,$j;
    
    if (my $s = js&Cimp || Js&Cimp) {
        if ( us&C ->{C} ) {
            sayre "Reimp Calling $s";
            Rw ModNs + $s;
        }
    }
    if (my $s = js&Simp || Js&Simp) {
        if ( us&S ) {
            sayre "Reimp Calling $s";
            Rw ModNs + $s;
        }
    }
    if (my $s = js&onimp || Js&onimp) {
        sayre "Reimp Calling $s";
        Rw ModNs + $s;
    }
    return T.pos = '' if delete T.done;
    jc&imping = 1;
    3c&ET &&
    Rw ET 2;
    T.pos = 1;
Sweeptapes: | # empties Js&M (to the trash?)
    sayre "Sweeping j.t tape";
    @{js&M} = ();
    
    3c&ET &&
    Rw ET 1;
Detapes: |
    # remove $c from j2s&M
    $j eq j.3 && die "W t Ctrl click";
    
    my $v = j.2;
    vs&M || die "above no vsM: ".G&sn,$v;
    # if a Remembers, tv is the upstream of M
    my $z = vs&M;
    my $was = @$z;
    my $s = sayyl "Removing j.t from $was";
    @$z = grep { _.t ne j.t } @$z;
    #saybl G&aC,$_ for @$z;
    $was == @$z && die "Didn't find j.t in: ".ki($z);
    
    3c&ET &&
    Rw ET 1;
    
Noop: | # to ignore an elvising, sleep J
    T.pos = '';

