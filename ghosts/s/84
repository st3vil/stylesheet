ElvisObs: | # criteria for travel, observables
    my $t = Rw Towering Ang _ Dimmer Zpace
        || return;
    
    # floatation of Ghrouping and Ghostering
    
    if (c&Se == 1) {
        u Smalldog
        # directs 5 to its minder
        # 5s&desi = "Ghostin";
         5s&desi = "Ghoster";
        # listens for wayups
        t.e =
        n Waytch
        t.cs->("c o,rss", "Waytch up");
    }
    if (c&Se == 2) {
        #n Tape=>['to']
        #n ShoGoings
        #n ShoGoings
        #n ShoGoings
        #t.e =
        #n TapeChecker
        #t.cs->("sc top", "TapeChecker");
        
        #t.e =
        n Ghostig
        # sends its Mat figure to:
        # for regrouping
        t.e =
        n Mudit=>V
        
        t.cs->("sc lv,olv", "you sayn");
        return;
        n ShoGoings
        n ShoGoings

        t.e =
        n Mudit=>V
        n Mat=>V
        t.cs->("sc lv,olv", "you sayn");
        local t.toc.largesse = 1;
        t.cs->("sc lv,olv", "you sayn");
        #t.cs->("sc top y tv view 0.02 sc J sc top", "you say");
    }
    if (c&Se == 4) {
        #sleep 3;
        n Tape=>['to']
        n ShoGoings
        t.e =
        n TapeChecker
        t.cs->("sc top y tw ElvisTape sc J sc top", "TapeChecker again");
    }
    
Smalldog: |
    feji:
        d__)
         nn
TapeChecker: | # see
    Jc&notape = 1;
    is:
        here
    
    n ElvisTape
    my $M = [ G&op ];
    G&elph,Mudit=>[M=>$M];
    
ShoGoings: |
    n flow=>$_=>"Flow" for 1..(6 + Jc&bowls++);
Ghostin: | # for ElM to J Matu+Ghostig
    n Ghostig
Ghostig: | # 5/someone doing ghost networking
    @{$M=[]} = Rw Matu;
    my $s = 4s&Matsup;
    Jc&Wunderu = 2c&Wunderu if 2c&Wunderu;
    
    # A layers of figuring groups, adding hierarchy
    # preening and researching, like Ghoster
    #
    # data is basically M-any C
    # wants to give way for upmod/grouper
    # 
    G&elph,Mudit=>[M=>$M]
Mudit: | # display, with its own travels of groupage
    y.imp = 1;
    u Zpace
    # want a u making in here thing, to make named A
    # mutated with scheme
    # for the many indentation, Rw looking thing...
    #y.res = 1;
    Jc&tape = 'Dejo';
    Js&ein.t.M = &TesC{
        1 && sayyl "Mudit eats ".@$s." from C.y.A.2.t";
        saybl wdump 4, $e;
        Jc&from = C.y.A.2;
        Jc&es = $s;
    };
    Js&ein.bo = 'Doable';
    
    S
    
    n view=>o2=>\'pi:pit,s:cud pud mud'
    n so=>o1=>'       '.G&sn 
    
    c&dimmer = 1;
    #n woov=>2=>$s
    Jc&es || 1 && return
        n n=>''=>nothing
    
    $s = J.c.es;
    my $pi = Js&view || die 'No view';
    
    if (Jc&from.t eq 'Ghostig') {
        y.man = 'Ghroup';
        @$M = @$s;
    }
    else {
        m _.t=>''=>{pi=>$pi,s=>$_} for @$s;
    }
pi/label: |
    n label=>1=>C.t=>'hs:888,fs:20'
pi/pit: | # perception altar
    y.at.dos = 'pitchange';
    S
    my $o = Js&options = [split ' ', $s];
    my $set = A.3.sc.>C.t ||= $o->[0];
    my $i = 1;
    for (@$o) {
        n $_=>'0.0'.$i++=>$_=>($_ eq $set && '%fs:26')
    }
pitchange: | # alter perception
    sayre "Pit chabnge: ".ki($e)."\n ".ki e&hC;
    my ($qua,$lit) = map {_.t} map{ $_->[0], $_->[-1] } e&hC;
    A.3.sc.>$qua = $lit;
Dimmer: | # make colourful
    u a
    ycolour 4: %of:mo
        return unless 1Cc&pi && 3Cc&dimmer;
        my @c = split '', $1 if C.y.cv =~ /(\d+)$/;
        my $c = sum @c;
        $c -= 10 until $c < 10;
        my $l = int 9 / @c;
        $l = int $l + 8 / 2;
        $l = 9 if $l > 9;
        # !? #
        s&hs ||= $c.$l.$l;
        
        
pi/cud: | # Matu piece
    n t=>1=>C.t,'%fs:20'
    G&isC,$s || return
        n notC=>4=>"notC: ".ki $s;
    
    sc&plane &&
        n plane=>o8=>sc&plane.' ','%fs:17,hs:375'
    
    sc&emb &&
        n emb=>12=>' '.join(' ',sort keys %{sc&emb}),'%hs:485'
    
    # should dampen depending on all M
    y.at.ml = sc&ind * 3;
    s&dis = 3; # table-row
    y.at.dis = 2; # inline-block
    
        my $in = sc&inds;
        my $sc = s.sc;
        my $ha = (keys %$sc && "\n").join "\n", map {
            my $v = $sc.>$_;
            $v = ki $v if ref $v;
            "$in  $_:".($v !~ /\n/ ? " $v"
                : "\n".join "\n", map { "$in    $_" }
                split /\n/, $v);
        } grep { $_ ne 'z' && $_ ne 'strung'
            && !(sc.strung && exists sc.strung.>$_ ) } sort keys %$sc;
    
    my $sc;
    sc.hs = '248';
    n s=>2=>$ha,$sc
    
pi/mud: | # visible qualities on Matu mats
    y.at.dos = 'enlighten';
    
    n t=>1=>C.t,'%fs:20,dos:enlighten'
    G&isC,$s || return
        n notC=>4=>"notC: ".ki $s;
    
    sc&inds &&
    n ind=>o1=>sc&inds;
    
    my $i = 4;
    for my $nk (qw'y c sc') {
        my $v = G&pint,$s,$nk || next;
        n $nk=>$i.'1'=>$nk,'%fs:14'
        
        my @k = sort keys %$v;
        if (my $s = join' ', @k) {
            my $sc;
            if ($nk eq 'y') {
                sc.hs = '786';
                T odd
            }
            n $nk=>$i.'2'=>$s,$sc
            @k < 7 &&
            n $nk=>$i.'2'=>ki($v)
            
        }
        $i++;
    }
    

enlighten: | # handle mud clicks, feed change into origin via Trips
    1 && sayyl "Enlighten ".ki $e;
    T.pos = 1;
    # find or create hC in Trips
    # to be fed to growth
    # 
    # Mat to know if C.y.a so travel can skip mo/Many
    #   and hop along slight s to feed change upwards
    # so any resource the osc can feed through should be osc handled
ElvisSaves: | # savepoints, noncontinual continuation
    # wants to fork before the pin
    # stream parent WayHeave from child
    # to pin again, wander off, receive self to up to parent, etc.
    # and check forking pg relistens (xo:forked)
    my $t = Rw Towering Ang
        || return;
    # 1c&forks = 1;
    # 1c&forks so that the result can be merged/objected to the parent,
    # which knows already what to expect and what to allow
    # 
    Rw ElvisMalta;
    sayre "Dune";
ElvisMalta: |
    S
    1 && saybl "Dune";
    t.dd->(1, "One thing");
    S
    sayre "Five finged";
Forks: | # we decide to fork
    my $t = G&sn,3 .(ar.s && " ar.s");
    saygr "We decide to fork $t";
Four: | # savepoint/fork and wait
    my $parent = $$;
    if (my $pid = fork()) {
        1 && saygr "
            oooo
               o o
              o   o";
        
        $SIG{INT} = sub {
            sayre "Killing $pid...";
            kill 'KILL', $pid;
            delete $SIG{INT}
        };
        my $and;
        $SIG{HUP} = sub {
            $and = 1;
        };
        
        waitpid($pid,0);
        
        if ($and) {
            saybl "child wants restart!";
            return
            Rw waitme
        }
        
        saybl "Refork $t ? <";
        
        my $IN = \*STDIN;
        while (my $k = <$IN>) {
            chomp $k;
            return if G.c.loopst;
            #!G.reing && !$k && return 2;
            J.me = $k;
            say "__ $k";
            return 2;
        }
    }
    else {
        G.forked = $parent;
    }
Ghroup: | # convolute muds - make hierarchy
    local A.V = 2;
    
    Rw Normat;
    Rw Joimat;
    Rw Gaint;
Normat: | # normalise into a mind section
    for (@$M) {
        # by G&ind, keep c&ind
        delete _c&inds;
        delete _c&inside;
        
        if (!_s&way) {
            _c&emb->{'!way'} = 'way';
        }
        elsif (_s&way.>_.t) {
            _s&strung.pins = '' if 1 == keys %{_s&way};
            # wants to re-A Matu constringing of way ^
            # and know it's able to do that safely
        }
        else {
            _c&emb->{'!pin'} = 'pins';
        }
        
        if (my $J = _c&J) {
            if (my $s = Js&s) {
                unless (sc&o) {
                    _c&emb->{'!noso'} = '';
                }
                if (sc&imparted) {
                    _c&emb.i = 's.c.imparted';
                }
            }
            else {
                _c&emb->{'!nos'} = '';
            }
        }
        else {
            _c&emb->{'!noJ'} = '';
        }
    }
    
    my $gr = {};
    # notice groupables
    for (@$M) {
        my $r;
        r.u++ if _s&u;
        $r || next;
        my ($to,@much) = keys %$r;
        die "Many for _.t: ".ki $r if @much;
        acu $gr, $to, $_; 
    }
    # TODO things grouped out of that group should retain some trace
    # group change wants to forget is y.resing
    # Travel tussles such cachements
    
    # add them to the end under labels
    my @ad;
    my $su = A&suM ||= {};
    my $no;
    each tN $gr {
        push @ad, map{$su.>$_ = $_} G&Ct,[$t=>'-label'=>{}];
        push @ad, map{$no.>$_ = $_} @$N;
    }
    # dedupe & append
    @$M = grep { !$no.>$_ } @$M;
    push @$M, @ad;
    
Joimat: | # hierarch by jointed-ness
    
    my $su = A&suM ||= {};
    my $en = &{ grep { !$su.>$_ } @$M };

    my $tw = {};
    $tw.>_.t = $_ for $en->();
    
    my $in = {}; # under.t -> over join (t, c.J/oJ)
    # for simplest, joins by one other
    # could also do deepest elvision, first join...
    for ($en->()) {
        my ($sym,$jo) = ('n',_c&jointed);
        ($sym,$jo) = ('e',_c&elvised) if !$jo;
        $jo || next;
        my $c = $jo->{""};
        if (!$c && keys %$jo == 1 && jo.mind && $sym eq 'n') {
            $sym = 'u';
            $c = jo.mind;
        }
        $c || next;
        keys %$c == 1 || next; # to one other
        ($c) = values %$c;
        if (_.t eq c.t) { # jointed to self (4)
            _s&istoppy = 1;
            next;
        }
        if (_c&plane = $sym) {
            my $src = 'jointed' if $sym eq 'n';
            $src = 'elvised' if $sym eq 'e';
            $src = 'u' if $sym eq 'u';
            _s&strung.>$src = '';
        }
        $in.>_.t = $c;
    }
    my $dt = {};
    # prepare by depth + detect loops
    each tc $in {
        my ($see,$l) = ({},[]);
        my $S = $c;
        while ($S) {
            $see.>S.t && die "c.t hier already S.t: ".ki $l;
            $tw.>S.t || last;
            push @$l, S.t;
            $see.>S.t = $S;
            $S = $in.>S.t;
        }
        my $d = @$l || next;
        my ($ut) = @$l;
        $dt.>$d.>$ut.>$t ++;
        #saybl "$t is under @$l";
    }
    #saybl "JOinted: ".wdump 2, $dt;
    # move under overs
    for my $d (sort keys %$dt) {
        my $utt = $dt.>$d;
        my $no = {};
        my $for = {};
        @$M = map { 
            if (my $al = delete $for.>_.t ) {
                ($_, @$al);
            }
            else {
                $_
            }
        } grep { !delete $no.>_.t } map {
            if (my $ts = $utt.>_.t ) {
                my $u = $tw.>_.t;
                my @z = map {
                    $no.>$_ ++;
                    $tw.>$_ || die "Cant find $_ in ".ki $tw;
                } sort keys %$ts;
                #say "Putting $d: u.t: _.t" for @z;
                acu $for, u.t, $_ for @z;
                _c&ind = uc&ind + 1 for @z;
                $_ eq $u || die "No muke sense: ".ki $u;
                $_;
            }
            else {
                $_
            }
        } @$M;
        
    }
    delete $tw.>_.t for @$M;
    die "Lost Maturble: ".ki[sort keys %$tw] if keys %$tw;
    #exit;
    # TODO
    # put those jointed/elvised to only one under them as z-ish
    # care for circular jointedness, which should happen at Os...
    # make instructures a la JJ
    
Gaint: | # paint the view that aint
    my $su = A&suM; # superstructure
    if (my $pi = Js&view) {
        # lastliness
        
        @$M = map {
            if ($su.>$_ ) {
                $_
            }
            else {
                if (_s&istoppy) {
                    _s&strung.istoppy = '';
                    _s&strung.chaos = '' if _s&chaos;
                }
                my $pi = $pi;
                #$pi = "pud" if _.t eq 'ElvisWayliases';
                G&Ct,[_.t=>''=>{pi=>$pi,s=>$_}];
            }
        } @$M;
    }
    
Ghoster: | # Rw being for the 5
    # 1 = 5
    # to nowify this bunch of G
    # by piling reductions
    # thinking about pins/way only to get it going
    #   could host W versions in way namespace...
    #   there is the normal qua-key-val where val = W.c.o
    #   TODO hosting W meta
    #          where an empty W has W.t/ycv and W.c.o
    # TODO generals, timer groups
    ##
    my @l = Rw Matu;
    
    # Ghoster is part of 5, working of its u lv
    # should track lv but not import it
    # assume none missed
    my $s = 1s&u.sc.s || die "Nou";
    my $z = ss&KC.sc.z;
    my $h = 1s&Ghoster ||= {}; # our self
    my @c; # {c:now, l:before}...
    for my $W (grep {_.t eq 'w'} @$z) {
        next if Wc&el >6;
        way: for my $c (@{Ws&z}) {
            next if cc&el >6;
            next if h.adway.>c.t eq $c; # same lv
            
            # TODO previous way should staple onto settled G
            # Matu works off a freshly settled G (ElMa)
            my $l = c.y.r && c.y.r.c.o.y.L && c.y.r.c.o.y.L.c.s;
            if (!$l) {
                # look for it inside the system...
                if ($l = h.adway.>c.t ) {
                    sayre "l c.t found only in hadway, not 5u osc";
                }
                elsif (my $had = G.sc.pinark.>c.t ) {
                    my $ww;
                    each dige,arg,w $had {
                        $w = w.y.argumented;
                        $ww.>$w = $w;
                    }}
                    if (keys %$ww > 1) {
                        my $older;
                        each ref,w $ww {
                            if (my $ha = T.w && T.w.y.argumented) {
                                if ($ha eq $w) {
                                    1 && sayyl "w.t vs w.t";
                                    next way;
                                }
                            }
                            ws&digup || next;
                            if ($older) {
                                sayre "Many older: w.t";
                                undef $older;
                                last;
                            }
                        }
                    }
                    if (keys %$ww > 1) {
                        say "For ".ki $c;
                        my $n = keys %$ww;
                        die "GMany manyways x$n: ".wdump 3, $ww;
                        
                    }
                    ($l) = values %$ww;
                }
                else {
                    sayre "Ghoster: Didnt Rw c.t";
                    next;
                }
            }
            $l || die "Cannot find last ".ki $c;
            h.adway.>c.t = $c;
            push @c, {c=>$c,l=>$l}; # c
        }
    }
    
    # do each 0.1 of either cv at a time? higher higher?
    my $Wwq;
    for my $c (@c) {
        my $la = c.l;
        my $w = c.c;
        for my $W (@l) {
            next unless Ws&way && Ws&way.>w.t;
            $Wwq.>W.t.>w.t = {W=>$W,c=>$c}; # q
        }
    }
    #c tune to reduce travel
    # reductions build up
    my $Wr;
    my $tw;
    each Wt,wt,q $Wwq {
        my $W = q.W; # one Matu atom
        $tw.>$Wt = $W;
        # r.{go|no}.$s = $v
        #   s = k: Description with $etc:$etc
        #   v = C: intel desire, v.t = s
        #       vigor/voltage contributing to overall desires (c)
        my $r = $Wr.>$Wt ||= {};
        my $c = q.c; # many c by w.t
        if (my $in = Ws&Tin && Ws&Tin.>$wt ) {
            each label,line,count $in {
                # forget line and seek the T string
                my ($cs,$ls) = map {
                    my @l = split "\n", _.c.s;
                    my @h;
                    push @h, shift @l until !@l || $l[0] =~ /^\s*T $label/;
                    if (!@l) {
                        sayre "No finding ^\\s+T $label in:", _.c.s;
                        ""
                    }
                    else {
                        my $l = shift @l;
                        my $ind = $1 if $l =~ /^(\s*)/;
                        my @o;
                        unshift @o, pop @h while @h && $h[-1] =~ /^$ind/;
                        push @o, $l;
                        push @o, shift @l while @l && $l[0] =~ /^$ind/;
                        join "\n", @o;
                    }
                } c.c, c.l;
                
                my ($how,$s) = !$cs || !$ls ? ("go","Tinlos")
                    : $cs eq $ls ? ("vague","Tinels")
                    : ("go","Tincha");
                
                # needs to give distributed Travelings
                # clues about only Tin so and so updating
                my $v = $r.>$how.>$s = {t=>"Tin $label $wt:$line"};
                vs&was = $ls;
                vs&now = $cs;
                vc&how = $how;
                vc&forxo = [Tin=>$wt=>$label=>$line] if $how eq 'go';
            }}
        }
        r.go.flow = "ambience";
    }}
    # c-oncerns grouped from r-eductions
    # marks/moves wanting to be made
    # brings its v-igors on cc&with tw
    my $Wc;
    each Wt,W $tw {
        my $r = $Wr.>$Wt;
        my $c = $Wc.>$Wt = {t=>$Wt};
        c.y.V = $W; # Vibe it has, foamed data unpacking layer
        c.y.cv = W.y.cv;
        c.y.c = $c; # Travelers later can see connection to why
        
        my $no = keys %{r.no||{}};
        if ($no / keys %$r > 0.6) {
            saygr "Still Travel W.t";
            c.c.el = 8;
        }
        else {
            # wants to be reality writing itself out
            c.c.el = 3;
            # with vigors
            each how,s,v $r {
                ref $v || next;
                c.c.with.>v.t = $v;
            }}
        }
    }
    
    #c focus c-oncerns, it is go
    # give special actuations from cc&with vigors
    my @to;
    for my $Wt (sort keys %$Wc) {
        my $c = $Wc.>$Wt;
        my $R = {t=>$Wt,y=>{%{c.y}}};
        R.c.W = $Wt;
        my $W = $tw.>$Wt || die "No find Matu atom: $Wt";
        my $J = W.c.J || die "MatuW had no cJ: ".ki$W;
        each name,v cc&with {
            if (my $p = vc&forxo) {
                Rc&forxo.>$name = $p;
            }
            # more actuators
        }
        1 && saybl "Finds to do: R.t (".
            ki([sort keys %{R.c}]).(
                keys %{R.sc} && ", ".
                ki([sort keys %{R.sc}])
            ).")",
            "from: ".ki cc&with;
        if (Jc&am eq 'test') {
            saygr "But not am=test";
            next;
        }
        push @to, $R;
    }
        
    # u/ning sorting update paths
    
    # and jointed consequences
    
    # travel
    
    #G&timer,0.001,$_ for &{
        4s&toy ->({to=>\@to},{l=>$l[0]});
    #};
Matu: | # T room on Os
    # puddle display
    # expanded looks at G settlements
    # that makes T into tests/extremities/thread/upGate landings
    my $fo = A.4;
    # for all that is
    my $Jtv = fo.sc.Jtv;
    my $nine = 0.1;
    $Jtv.>fo.t.>$_ = $fo for 0.1;
    
    my $tt;
    my $ts;
    each t,cv,J fo.sc.Jtv {
        $tt.>$t && die "Already had $t: ".ki($J)."\nunt: ".ki($tt.>$t);
        $ts.>$J = $tt.>$t = G&Ct,[$t,$cv,{J=>$J},{}];
    }}
    
    # make hierarchy by A.2
    # should all be A.4
    # but could include insides with interesting desires
    for my $k (sort keys %$tt) {
        my $C = $tt.>$k;
        my $upJ = c&J.2;
        C.c.>$_ = c&J.>$_ && c&J.>$_ ->{t} for 1..5;
        if (my $upC = $ts.>$upJ) {
            next if $upC eq $C;
            delete $tt.>C.t;
            push @{upC.sc.z||=[]}, $C;
        }
    }
    
    my @t = values %$tt;
    @t > 1 && sayre "Many tops: ".ki \@t;
    
    
    
    
    
    #c protocols on J recognised
    # things recognised into upper language
    my @al = map {
        my $ub = &C{
            my $J = c&J;
            $J || sayre "Matu no J on C.t";
            $J || return; # to G&ind, deselects it, leaves in z
            
            c&s = "C.t";
            
            s&chaos = keys %{Jc&chaos||{}} && Jc&chaos if !Jc&o;
            
            if (my $xo = Js&xo) {
                my $un;
                while (my ($k,$v) = each %$xo) {
                    if ($k eq 'way') {
                        s&way = {%{s&way||{}}, %$v};
                    }
                    elsif ($k eq 'Tin') {
                        s&Tin = $v;
                    }
                    else {
                        $un.>$k = $v;
                    }
                }
                s&xo = $un if $un;
            }
            
            if (my $t = Js&typed) {
                my $un;
                while (my ($k,$v) = each %$t) {
                    my $to;
                    $to = 'jointed' if $k eq 'W';
                    $to = 'elvised' if $k eq 'e';
                    if (!$to) {
                        $un.>$k = $v;
                        next;
                    }
                    while (my ($ref,$R) = each %$v) {
                        # is means its doing that for its 2
                        # eg. Js&u.c.is = 'mind'
                        my $is = Rc&is || '';
                        my $oJ = R.3;
                        $is || undef $oJ;
                        if (!$is && $R ne R.3) {
                            # non A.3 making elvis, probably
                            sayre "C.t typed $k by non3 (3=R.3.t) R.t, JCc=".ki(R.C.c);
                            $oJ = R.3;
                        }
                        my $t = $oJ && oJ.t || R.t;
                        # joints going in to its creation
                        my $c = C.sc.>$to.>$is.>$t ||= {};
                        c.t = $t;
                        # the real J
                        cc&J = $R;
                        cc&J && cc&J ne $R && die
                            "Dup typed->mix $to $is $t/R.t:".ki(cc&J)
                            ."\n   ".ki($R);
                        # the title J
                        cc&oJ = $oJ if $oJ;
                        cc&i++;
                    }
                }
                s&typed = $un if $un;
            }
            #c constring even upper-er language
            if (my $w = s&way) {
                # pin: dige: count
                s&pins = join ',',sort keys %$w;
                s&strung.way.pins++;
            }
            
            for my $to ('jointed', 'elvised') {
                # Jc&is||'': oJ.t||J.t: {i=count, oJ?=J}
                # oJ is the W the is is for
                # becomes more specific
                my $mix = C.c.>$to = delete C.sc.>$to || next;
                my $h = {};
                G&chew,$mix,\'is,t',$_ for &c,is,t{
                    # doesn't use c, with the other J
                    # TODO they might like to know
                    # joins grouped
                    my $k = "$to".($is&&"($is)");
                    $k = 'u' if $k eq 'jointed(mind)';
                    acu $h,$k,$t;
                };
                C.sc.>$_ = join ",",@{$h.>$_ }
                    for sort keys %$h;
            }
            if (my $in = s&Tin) {
                s&Tins = ki $in;
                s&strung.Tin.Tins++;
            }
            $C
        };
        my $d;
        d.zort = &zsd{
            @$z = sort {a.y.cv <=> b.y.cv || a.t cmp b.t} @$z;
        };
        G&ind,$_,$ub,$d;
    } @t;
    
    my $s = join "\n", map {
        my $in = _c&inds;
        my $sc = _.sc;
        my $ha = (keys %$sc && "\n").join "\n", map {
            my $v = $sc.>$_;
            $v = ki $v if ref $v;
            "$in  $_:".($v !~ /\n/ ? " $v"
                : "\n".join "\n", map { "$in    $_" }
                split /\n/, $v);
        } grep { $_ ne 'z' && $_ ne 'strung'
            && !(sc.strung && sc.strung.>$_ ) } sort keys %$sc;
        
        sprintf "%-20s %-30s", $in . _c&s , $ha
    } @al;
    #
    my ($top,@l) = @al;
    if (A.1.t ne "Matu") {
        #1 && saybl "Soup of fo.t:\n$s";
        4s&Matsoup = $s;
        4s&Matsup = $s; # to be more digital
        return @al
    }
    
    Jc&tape = 'Dejo';
    n so=>1=>G&sn 
    n woov=>2=>"\nZouper: fo.t\n$s";

