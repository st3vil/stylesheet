Jive: | # js client, simpler than ever...
    # js other
    # resize canvas to:
      # $('body').width()
        # width/height of the page
      
      # $('someelement').offset()
        # {top,left} of the element in the whole page
    
    # the table is the G
    # so what is the language
    # G.c.go holds A.c.go does C.c.go writes T.?... which someone gets
    # anyway there was this open-topped wormhole
    # a stage where matter could transform
    
    
    # so wanting a animatio toplevel
    # working el and ds/dc
    # maybe post/get W unity, or websocket
    
    # show simplest believer
    # with together/aparter
    
    # make js We things
    
    # believers
    
    # the T reduces mysteries (xo)
    
    # We walker, goes till T passes (stuff poured out)
    
    # T change classified, eg not
    
    # phi emitter
    
    # universal instead of xo
    
    # known i/n/d and addition/etc
    
    # in maths
    # who have joined by many unified
    
    # unvague errors
    # see trace not like last h
    # to suggest if not
Maniable: |
    # see the instructions for the things shared out in forks
    # and the framerate adjusted to hold many things
Canv: | # apulous
    u j
    # portalise public/paperjs/examples/
    scaleimage:
        function drawImageProp(ctx, img, x, y, w, h, offsetX, offsetY) {

            if (arguments.length === 2) {
                x = y = 0;
                w = ctx.canvas.width;
                h = ctx.canvas.height;
            }

            // default offset is center
            offsetX = typeof offsetX === "number" ? offsetX : 0.5;
            offsetY = typeof offsetY === "number" ? offsetY : 0.5;

            // keep bounds [0.0, 1.0]
            if (offsetX < 0) offsetX = 0;
            if (offsetY < 0) offsetY = 0;
            if (offsetX > 1) offsetX = 1;
            if (offsetY > 1) offsetY = 1;

            var iw = img.width,
                ih = img.height,
                r = Math.min(w / iw, h / ih),
                nw = iw * r,   // new prop. width
                nh = ih * r,   // new prop. height
                cx, cy, cw, ch, ar = 1;

            // decide which gap to fill    
            if (nw < w) ar = w / nw;                             
            if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh;  // updated
            nw *= ar;
            nh *= ar;

            // calc source rectangle
            cw = iw / (nw / w);
            ch = ih / (nh / h);

            cx = (iw - cw) * offsetX;
            cy = (ih - ch) * offsetY;

            // make sure source rectangle is valid
            if (cx < 0) cx = 0;
            if (cy < 0) cy = 0;
            if (cw > iw) cw = iw;
            if (ch > ih) ch = ih;

            // fill image in dest. rectangle
            ctx.drawImage(img, cx, cy, cw, ch,  x, y, w, h);
        }
j: |

