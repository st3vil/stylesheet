
Ilan: | # O's zip of U, W switchup
    # & tractor e into a new Udder
    y.res = 100;
    Jc&refit_t = &C{
        "s&so C.t"
    };
    Js&ein.t.f.sMJ = &sMJjeTCA{
        if ($s =~ m{(.+)/p/(\d+)/W/(\w+)\.(\d+)}) {
            my ($d,$p,$t,$i) = ($1,$2,$3,$4);
            my $in = Js&index ||= {};
            my $new;
            my $C = $in.>$t.>$p ||= do { $new++; {y=>{}} };
            C.t ||= $t;
            C.c.pi ||= 'plaz';
            s&flv ||= [];
            # ^ ref will keep between Js&M C and mo C
            # which pi/pin sees
            s&pid = $p;
            
            # find so/pa for self
            s&so ||= do {
                my $p = Rw Fishis $p;
                s&ppa = ps&ppa;
                ps&so;
            };
    
            # continuing W with parent pid
            if (my $p = delete $in.>$t.>s&ppa ) {
                s&ie = ps&ie;
                @$M = map { $_ eq $p ? $C : $_ } @$M;
                $new = 0;
                if (my $hi = ps&history) {
                    @$M = grep { _c&s ne $hi } @$M
                }
                my $M = c&forum = [];
                s&history = $p;
                ps&future = $C;
                m "$t ps&so"=>-pold=>{s=>$p}
                Js&blab = 1;
            }
            # same W stage appears from next fork
            elsif (s&so =~ /^((?:\d+ )+)?(\d+):/) {
                my ($tun,$ti) = ($1,$2);
                $ti--;
                if ($ti >= 0) {
                    my ($p) = grep { _s&so =~ /^$tun$ti:$t/ } @$M;
                    if ($p) {
                        my $t = "$t ps&so";
                        my $n = G&Ct,[$t=>-pold=>{s=>$p}];
                        @$M = grep { ps&progresses ne $_ } @$M;
                        ps&progress = $C;
                        s&progresses = $n;
                        @$M = map { $_ eq $p ? $n : $_ } @$M;
                        Js&blab = 1;
                    }
                }
            }
            
            Rw Rebase $C $d $p $t $i;
            
            return unless $new;
            
            # so takesover parent's t not insys
            #   spawning little differ above, as old self
            # 
            
            $new && push @$M, $C;
        }
        else {
            die "Other Ilan ting: $s";
        }
    };
    Rw Tiot;
    Jc&tape = 'Dejo';
    Js&Simp = 'Sweeptapes';
    Js&Cimp = 'Pause';
    S
    y.imp++;
    Js&Pause && return 
        n Paused=>''=>"Paused"
    my $m = Js&M||[];
    @$m = map { @{delete(_c&forum)||[]}, $_ } @$m;
    m $_ for @$m;
Sweeptapes: | # empties you
    sayre "Sweeping J.t tape";
    @{Js&M} = ();
pi/plaz: |
    s&dis = 3;
    y.at.dos = 'Store';
    y.at.fs = 8;
    
    Rw Thrext so $next_t=C.t;
    
    n t=>2=>C.t=>'%hs:555,fs:18'
    
    s&ie &&
    n ie=>22=>{s=>".s&ie"},'%fs:12,hs:258'
    
    # 3's root's y, should be somewherer
    my $ay = 3s&root.c.mo.c.s;
    my $is = Js&isent unless 3c&imping || ay.y.imp;
    sayyl "C.t: Is $is already (Js&isent) ".ki s&flv;
    my @tip;
    for (reverse @{s&flv}) {
        sayre("Is up $is = _.t") && last if defined $is && $is == _.t;
        my ($C,@jos) = @{_s&lv};
        die "Wormhole jostle: ".ki\@jos if @jos;
        sayyl "Tips to ".ki($_), ki $C;
        unshift @tip, $C;
        Js&isent = _.t;
        c&el && c&el <3 && sayre("Isreset:".ki$C) && last; # imp reset
    }
    
    my $sc;
    sc.dis = Js&Pause ? 0 : 3;
    sc.zout = \@tip if @tip;
    sc.dos = "ElvisRo";
    n z=>89=>{}=>$sc
Tunes: |
    Jc&tape = 'Dejo';
    y.at.fs = 38;
    my $i = Js&bowls++;
    for (0..$i) {
        n "3$_"=>6 + $_ ^ 3=>"Satch",'%hs:696'
        n "2$_"=>3 + $_ ^ 2=>"$_",'%hs:398'
    }
ElvisRo: | # routing to remote from W mount
    my $j = e&_hJ;
    my $p = e&hC ->[-3];
    my $us = e.c.us;
    shift @{us.p} for 1..4;
    unshift @{us.p}, [p.t];
    delete us.p_i;
    delete us.W;
    my $mes = G&Ct,[jse=>''=>{s=>$us}];
    G&elph,Elvis=>[opt=>''=>{s=>"ps&pid:Win",etc=>{e=>$mes}}];
    #G&give,Toter=>breka=>[[$us,$p]];
pi/pold: | # out
    s&dis = 3;
    my $t = s.t || C.t;
    s&so = ss&so;
    y.at.dos = 'Retrieve';
    y.at.fs = 7;
    
    Rw Thrext so $next_t:t;
    
    n t=>2=>$t=>'%hs:555,fs:16'
    
    if (my $C = c&s) {
        s&ie &&
        n ie=>22=>{s=>".s&ie"},'%fs:12,hs:258'
    }
    
    my $symb = "?";
    if (ss&progress) {
        # to another self
        # TODO fork testing
        $symb = ",";
    }
    if (ss&future) {
        # to a future
        $symb = ".";
    }
    n conti=>28=>$symb,'%fs:26'
    
    
Store: | # cops W (dos)
    my $Q = e&_hC;
    my $j = e&_hJ;
    if ( us&S ) {
        # less elviso
        if (js&Pause) {
            # double pause
            if ('thing' eq '-pold to some elvioer') {
                G&give,Toter=>"IQsub"=>[$Q]
            }
            else {
                G&give,Toter=>"IremQ"=>[$Q]
            }
        }
        else {
            js&Pause = 1;
        }
    }
    elsif ( us&C ->{C} ) { # us&C returns whole $us, like e&C
        # spill guts
        G&elph,Valve=>[C=>$Q]
    }
    elsif ( us&A ) {
        # reflect in trees
        # switch to neighbours/parents with most elviso
        G&elph,Valve=>[A=>$Q]
    }
    else {
        # wants diffs to neighbouring versions
        # hijackable
        if (js&Pause) {
            js&Pause = 0;
        }
        else {
            # feed time to the node, more elviso
            G&elph,Valve=>[C=>$Q]
        }
    }
Retrieve: | # resurrect a point
    
    if ( us&S ) {
        my $j = e&_hJ;
        my $m = 3s&M;
        # $_ is source C of J
        my $o = ["j.t: ", map { G&aC,$_ } @$m];
        @$m = grep {_.t ne j.t} @$m;
    }
    else {
        my $j = e&hJ;
        G&give,Toter=>'resurref'=>$j;
    }
    

