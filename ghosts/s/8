ElvisElvises: | # J e J,
    my $t = Rw Telvis;
    # your mo .e 
    # the J minded of=E awaken/resolve options
    # calls handlers or the pin to find handlers or handle as pin
    # handlers register into E (may want to J.ii only u wave '' or so)
    # handling e vars (via e&st -> G&e,'st', etc) tickles clues to pin
    if ($n == 0) {
        c&te =
        n Elviseso
        t.cs->('sc lastK c s','source');
        t.cs->('sc lastA c s c zop c rsl?!','sourceee');
    }
Elviseso: |
    #n ElBridge
    #return;
    my $e = G&s,tool=>{s=>"Sandpaper"};
    n Elvisrec=>W=>{e=>$e}
    n Elvisrec=>3=>{W=>''}
Elvisrec: |
    #u Applophy
    S
    1 && saybl "To C.t: ". wdump 3, e&C;
    n oa=>1=>33
    
    #Js&ein.t.tools = 'fixolid';
Applophy: |
    u e
    
Elvising: | # new way
    n ElVerse
    n ElBridge
    n ElChorus
    
ElVerse: | # hyperactive With
    u i
    # describe A net and e
    es:
        G&sn .": ".ki c&e;
    S:
        1&&saygr "Hyper C.t".G&sn;
        G&A,n=>2,A.1,[];
        
    T:
        1&&saygr "T C.t".G&sn;
    # etc
ElBridge: | # mo joins E
    u c
    n \'of:mo'
    # how the web works
    # event finds a way into remote's mind
    
    # heaven's above me on a street called love
    # J must make known elvising to use .e hooks to answer calls
    
    # elvising
    e 344:
        A.1 eq A.2 && die "Elvising same: ".G&sn;
        sayre "Havelvis: A.1.t -> C.t C.y.cv: e.t  (Minded 1c&o or 1s&ein)";
        A&E = G&tugA,E=>1,$e;
        # tug E
    
    
    # on regular visits - usualise 4
    J 3454:
        return if c&e;
        my $J = A.1;
        # if ! e and ev.amb && that
        1 && saybl "Ambientocheck";
        Rw Js&amb $J if Js&amb;
    
    # three ways in to E:
    # - 36: before/without pin (J has itself)
    # - 63211: within pin at time2 (J becomes)
    #      allowing J completion with th(e)m in one
    # - 67: after pin (J becomes)
    #       T.oke to force J redoing
    #     T.pos = 0 to waylay J redoing
    
    # ^ points to tug E
    # 
    
    # handlers include stuff in of=E
    #  - pin could make handler subs
    #  - pin could always happen, chews e itself
    #      probe if nothing uses eg e&_z
    
    # pre-4 effect
    e 36:
        return sayyl "J elv 36".G&es;
        
        my $J = A.1;
        Rw hevt $J e36;
        if (T.oke) {
            # meaning head in to pin
            # & later dont ground the C on oJ...
            # A.ztime = 6;
            return say "Tanking into J.t";
        }
        # come back if T.pos (default 1)
        Rw waito $J $C if T.pos || !defined T.pos;
    
    # in pin time2/at mind resolve effect
    # can skip out of pin if !T.pos
    J 63211:
        return sayyl "J elv 63211 ".G&es;
        # setup interface to:
        # S maybesomething
        # like Atime(2) || return # piece S now, like u/n/m/T
        #   return if T.pos == 0, def 1, that vector no osc
        #   used to c&e = delete c&elv;
            Rw hevt $J elv2;
            T.pos = 1 unless defined T.pos;
    
    # post pin pre osc
    e 67:
        return sayyl "J elv 76".G&es;
        .
        Rw hevt $J elv76;
        .
        if (T.oke) {
            die "76 thoughtself J.name" if A.J eq $J;
            say "Tanking 76 into J.name";
            Rw waited $J;
            return;
        }
        T.pos = 1 unless defined T.pos;
        T.pos &&
            Rw waito $J $C;
    
    e 72:
        my $E = A&E;
        return if E.cv >= 0.6;
        if (Ec&pines) {
            sayre "e C.t @ E.cv pines: ".1c&o."     ".ki 1s&ein;
        }
        else {
            sayre "e C.t @ E.cv Not completed: ".1c&o."     ".ki 1s&ein;
        }
    
ElChorus: | # E joins your language
    u a
    n \'of:E'
    # where v is for c&e
    # Js&ein - e matching
    e 1:
        #A.V = 2;
        $C=A&s=$s->[0];
        # tugs back to here
        G&block,$_ && return for sub {
            !1c&o || !1s&ein
        };
        sayyl "Is realy: ".1c&o."     ".ki 1s&ein;
    e 4:
        # detect way
    e 55:
        # tug indy uov
    e 6:
        sayre "Happs to: ".wdump 3, $C;
        1 && saybl "Four ".ki 1s&ein;
    
e: | # for elvis handlers
    n alact
    e 4223: %acgt:s,act,of:mo
        # make their v for .c.e
        # and various expand to shape pieces of server/etc protocols
        s&of ||= 'E';
    
ElvisHoists: | # J uphoist any {{{
    my $t = Rw Telvis;
    # J.sc.X fishtail connection, index clues needed, or eg co
    # see pud re T
    

