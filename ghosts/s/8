ElvisElvises: | # J e J,
    my $t = Rw Telvis;
    # your mo .e 
    # the J minded of=E awaken/resolve options
    # calls handlers or the pin to find handlers or handle as pin
    # handlers register into E (may want to J.ii only u wave '' or so)
    # handling e vars (via e&st -> G&e,'st', etc) tickles clues to pin
    if ($n == 0) {
        c&te =
        n Elviseso
        t.cs->('sc lastK c s','source');
        #t.cs->('sc lastA c s c zop c rsl?!','sourceee');
        c&te =
        n Elvisrec
        t.cs->('sc lastK c s','source');
    }
Elviseso: |
    #n ElBridge
    #return;
    my $e = G&s,tool=>{s=>"Sandpaper"};
    n Elvisrec=>W=>{e=>$e}
    n Elvisrec=>3=>{W=>''}
Elvisrec: |
    #u Applophy
    S
    1 && saybl "To C.t: ". wdump 3, e&C;
    n oa=>1=>33
    
    #Js&ein.t.tools = 'fixolid';
Applophy: |
    u e
    
Elvising: | # new way
    n ElVerse
    n ElBridge
    n ElChorus
    
ElVerse: | # hyperactive With
    u i
    # describe A net and e
    es:
        my $cv = A.mo.cv;
        $cv =~ s/^0\.//;
        "elm$cv ".G&sn .": ".ki c&e;
    # means vector is about to do new ground
    # solves mind - which should row the of=S somewhere
    # also tugA,mo so E can resolve and tell S/mo to sleep pin if T.pos=0;
    # spaces out ground over time
    # or headers from bodies of work, making sleep if same
    # want to substrata bits of the ground,
    # make pages of osc for groups of time
    
    S:
        1&&saygr "Hyper C.t".G&sn;
        G&A,n=>2,A.1,[];
    # marks a point for ghost chopchoping
    T:
        1&&saygr "T C.t".G&sn;
    # etc
ElBridge: | # mo joins E
    u c
    n \'of:mo'
    # how the web works
    # event finds a way into remote's mind
    
    # heaven's above me on a street called love
    # J must make known elvising to use .e hooks to answer calls
    
    
    # three ways in to E:
    # - 36: before/without pin (J has itself)
    # - 63211: within pin at time2 (J becomes)
    #      allowing J completion with th(e)m in one
    # - 67: after pin (J becomes)
    #       T.oke to force J redoing
    #     T.pos = 0 to waylay J redoing
    
    # ^ points to tug E
    # 
    
    # handlers include stuff in of=E
    #  - pin could make handler subs
    #  - pin could always happen, chews e itself
    #      probe if nothing uses eg e&_z
    
    
ElChorus: | # E joins your language
    u a
    n \'of:E'
    # tries to route to handlers/pin
    # changing e lingo will disturb ElvisWorlds 1: ofts made
    
    # mo tugs, wait for mind
    e 1:
        #A.V = 2;
        A&s = $C = $s->[0];
        my $e = A&oure = c&e || die "E no e: ".wdump 3, A.c.N;
        # routes do new C.c.e = C this e came from
        # reel in the tube of routes before the request
        my @hz;
        while ($e) {
            push @hz, $e;
            $e = e.c.e || last;
        }
        e.c.hz = \@hz;
        if (!@hz) {
            if (!e.c.us && e.c.s =~ /^\{/) {
                # network line comes in on e as listen event
                # should onward aft hz an e as meaning/request
                # making the meaning beyond the book
                # and the readers in front of it
                my $us = eval{djson e.c.s};
                die "elvis line decode error: $@\n\n cs: ".slim 300, e.c.s if $@;
                # stylehut says {event:{...}}
                if (keys %$us == 1 && us.event) {
                    $us = us.event;
                }
                if (us.p) {
                    # parse string/not to [[t,cv]...]
                }
                
            }
        }
        A&e = $e;
        
        G&block,$_ && return for sub {
            !1c&o || !1s&ein || !A&pines
        };
        sayyl "Elvis ready at first: ".1c&o."     ".ki 1s&ein;
    
    e 2:
        my $E = A&e;
        my $us = E.c.us;
        my $in = 1s&ein;
        
        if (!$in) {
            if (1s&seemstoe || A&pines) {
                T.oke = 1;
                return T.Z.7 = $A;
            }
            else {
                die "Got in to E unknown quick: ".G&es if A.mo.cv < 5
                # doesn't need to know anything,
                # gets route, vent if lost
            }
        }
        
        saygr "Elvising ".G&es;
        
        # tractorbeam makes deeper look even if routable
        unless (in.tractor && Ec&trJ ne A.1
            # or not routable
            || !$us
            # or is routed to us
            || us.ids && do {
                # not anymore, but could warp them up
                # the J finds its easiest way in
                # for now the chain must be linked
                us.ids->[us.idi - 1] eq 1s&id
            }
            || us.p && do {
                # for now the chain must be fully linked also
                my $tcv = us.p->[Ec&us.p_i - 1];
                $tcv && $tcv->[0] eq J.t
            }) {
            return T.Z.6 = $A;
        }
    #c e3 enter linguistically
    e 3:
        my $E = A&e;
        my $us = E.c.us;
        my $in = 1s&ein;
        my $ar;
        ar.J = A.1;
        ar.e = $E;
        
        Ec&trJ eq A.1 && return G&vent,'Doublysendo';
        Ec&trJ = A.1;
        
        # make e& and us& pick into A&e if A&e && A.t eq 'E'
        in.o && A.1 ne A.2 && return # from others only?
            Rw in.o;
            
        in.li && 
            Rw in.li;
        
        my @being = $e;
        being: while (@being) {
            my $e = shift @being;
            if (my $pin = in.f && in.f.>E.sc.pi ) {
                ref $pin && die "More pinfotic";
                Rw $pin;
                next being
            }
            if (my $pin = in.t && in.t.>E.t ) {
                if (!ref $pin) {
                    Rw $pin;
                }
                else {
                    die "e t complexi ".ki $pin if !pin.s || pin.s ne 'M' || keys %$pin !== 1;
                    # s=M used to open envelopes of e etc without leaving here
                    my $M = djson E.c.s;
                    push @be, @$M;
                    sayre "Multied ".@$M." For ".G&es;
                }
                next being
            }
            
        
        
        
        
        
        
    e 4:
        # detect way
    e 55:
        # tug indy uov
    
    #c c6 route beyond here - could have done stuff too
    # may like to build onward meaing if so
    e 6:
        my $E = A&e;
        my $us = E.c.us;
        my $in = 1s&ein;
        return unless ref us.p eq 'ARRAY';
        
        my $point = us.p->[us.p_i||=0];
        my ($t,$cv) = @$point;
        
        if (my $oJ = G.M.>$t) {
            # readers move in in front of the meaning
            n oJ.t=>W=>{e=>$C}
            T.pos = 0;
        }
        else {
            die "space going: $t ".G&es;
            # could also make it up for it wants the name
            # makes networked light injector
        }
    
    # completion desires to J now or in a second
    e 7:
        my $mo = A.mo || die "Nomo"; # mo
        T.pos = 1 if !defined T.pos;
        if (T.oke) { # do pin now
            # meaning head in to pin
            sayre "e Wants in to mo.t mo.cv: ".G&es;
            if (mo.cv < 5) {
                # mo for it is still early
                mo.c.want.elvis = 6;
                # doesnt take T.oke, may Sleep
                # e floatilla should TGW without Toke
            }
            elsif (mo.cv < 6) {
                # doing pin, tugged while S, tell it not to sleep
                mo.c.T.oke = 1;
            }
            else {
                C.c.W || die "aft 6 Toke non W: ".ki$C;
                Rw waited $J;
            }
            sayre "Toking mo.cv into ".G&es;
        }
        elsif (T.pos || !defined T.pos) {
            # do J in a second
            Rw waito $J $C;
        }
    
e: | # for elvis handlers
    n alact
    e 4223: %acgt:s,act,of:mo
        # make their v for .c.e
        # and various expand to shape pieces of server/etc protocols
        s&of ||= 'E';
    
Routable: | # looks for routes in the current J for e
    # using pi to track remote pi
ElvisHoists: | # J uphoist any {{{
    my $t = Rw Telvis;
    # J.sc.X fishtail connection, index clues needed, or eg co
    # see pud re T
    

