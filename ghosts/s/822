  
ElvisMe: | # increase res
    # forked from Udder
    # which needs to release its STDIN loop and Baye for new Opper
    my $pid = $$;
    my @da = qw'bay islan is/fa is/lo is/ma is/se is/do';
    my $now;
    $now = shift @da until !@da || $now eq G.c.bay;
    !@da && die "No day after G.c.bay";
    c&s = shift @da;
    Rw ElvisYou $bay:c&s;
    say "Came out of You $0  ($$)";
    #T.oT.Uddoff = 1 if $pid ne $$;
    
    
ElvisYou: | # YOUR
    my $M = [];
    G.c.lastbay = G.c.bay;
    G.c.bay = c&bay || ar.bay || 'bAy';
    `rm -rf G.c.bay/p/*`;
    `mkdir -p G.c.bay/p`;
    # to fork an output handler (O) and children (U)
    m Opper
    m Udder
    m $_ for @{ar.m||[]};
    my $O;
    my $opid;
    for my $C (@$M) {
        # opens new land
        if ($opid) {
            # sets our W output
            # Opper Ilans it and sends lv elvi to WebHost/in
            $O ||= G.c.bay."/p/Opper/in";
        }
        Rw CellOvulation $C $O;
        s&pid || return
            saygr "Flies out as: C.t $$";
        # first handles output
        if (!$opid) {
            $opid = s&pid;
        }
    }
    G.c.bay;
Opper: | # consolidato
    # Udder blocks, Opper is free to wander around, give Udders time
    Gc&clockon = sub {
        1 && saybl "Starting  G.t     listens: $s";
        Mojo::IOLoop->is_running || Mojo::IOLoop->start;
    };
    if (my $l = G.c.lastbay) {
        # Opper must be seen on W destination to stream
        my $dirs = split('/', $l) - 1 + 2;
        my $ting = join'',('../') x $dirs;
        `ln -s ${ting}G.c.bay/p/$$ $l/p/$$`;
    }
    # receive W and switch through same telephone wire
    n Baye
    #return;
    snooze 222;
    n Fish
    n Opera
CellOvulation: |
    my $i = G.c.oipi++;
    my $pa = $$;
    (s&pid = fork()) && return;
    if (ar.O) {
        # get Dejo to send new chunks of tape (z) to:
        G.c.tapeze = 'Ualve';
        # which stores and sends that address to O-ward:
        G.c.Oin = ar.O;
    }
    G.c.oparent = $pa;
    G.c.oipi = 0;
    $0 .= " $i";
    if ($C && ref $C eq 'HASH') {
        my $Gt = delete(c&Gt) || C.t;
        $0 .= ":$Gt";
        ar.take = G.t = $Gt;
    }
    Rw Washup;
    saybl "CellOvulation: $0";
    n $C
    saybl "Wandering Ovv";
Udder: | # go waiter
    # to resume
    while (1) {
        $_ = <STDIN>;
        chomp;
        snooze 333;
        $_ =~ /\w/ || next;
        my $C = eval { djson $_ };
        if ($@) {
            sayre "NOT json C: $_";
            $@ = '';
            return;
        }
        Rw CellOvulation
            || next;
        saybl "Done Udder";
        if (T.Uddoff) {
            T.not = 1;
            return saybl "Uddoff";
        }
    }
Ualve: | # Udders' W z out goes to Opper
    # 
    e&t eq 'z' || die "Not e z";
    my $z = e&s;
    my ($t) = @$z;
    G.c.Wot.>t.t++;
    my $i = Js&teli.>t.t ++;
    
    my $elv;$elv = &C{
        $C = G&hup,$C;
        C.y = C.y.cv;
        
        C.sc.z = [map{$elv->($_)}@{C.sc.z}] if C.sc.z;
        [C.t,C.y,C.c,C.sc]
    };
    my $d = "G.c.bay/p/$$/W";
    if (!-e "G.c.bay/p/$$") {
        warn "Where am I? $0";
        exit;
    }
    `mkdir -p $d`;
    my $f = "$d/t.t\.$i";
    write_file($f, sjson([map{ $elv->($_) }@$z])."\n");
    
    my $pull = [Ilan=>[f=>$f]];
    G.c.Oin || die "No GcOin from $d $$";
    write_file(G.c.Oin,{append=>1},sjson($pull)."\n");
    
Rebase: | # pull W into C=plaz
    # from many place's writings
    # from d p t i
    my $flv = s&flv ||= [];
    if (@$flv > $i) {
        sayre "Remote IMpreset C.t";
        @$flv = ();
    }
    if ($i >= @$flv) {
        my $M = [];
        if ($i > @$flv) { # jumps ahead, fill in
            my ($oi) = my ($i,$p) = ($i,$p);
            $i--;
            # follow lineage
            branch: while (-f "$d/p/$p/pa") {
                1 && say "   in to: ".`cat $d/p/$p/so`." For W/$t.$i";
                $p = read_file "$d/p/$p/pa";
                -e "$d/p/$p" || die "No find pid $p ";
                while (-f "$d/p/$p/W/$t.$i") {
                    1 && say "    -W $d/p/$p/W/$t.$i";
                    last branch if $i+1 == @$flv;
                    m $i=>-lv=>{s=>"$d/p/$p/W/$t.$i"}
                    last branch if $i == 0;
                    $i--;
                }
            }
            @$M || die "Wanted news $d $t: ".(@$flv-1)."->$oi";
        }
        @$M = reverse @$M;
        m $i=>-lv=>{s=>"$d/p/$p/W/$t.$i"}
        
        for my $C (@$M) {
            my $z = read_file(c&s);
            $z = djson $z;
            
            # [t,y,c,sc] -> C
            my $elv;$elv = &C{
                $C = G&Ct,$C;
                s&z = [map{$elv->($_)}@{s&z}] if s&z;
                $C
            };
            s&lv = [map{ $elv->($_) }@$z];
            push @$flv, $C;
        }
    }
    s&ie = $i;

