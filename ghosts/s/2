Sea: | # folds of the day
    u i
    # is it C
    isC:
        ref $s eq 'HASH' && defined s.t && s.y && (s.c || s.sc);
    # start C by t,c/s
    s: %acgt:t c
        return $t if ref $t eq 'HASH' && ref t.y && t.y ne $t;
        $C = {};
        C.t = $t;
        C.y = {};
        C.c = ref $c eq 'HASH' && !c.y ? $c : {s=>$c};
        $C
    # start C
    Ct:
        my $C = {};
        G&Cs,$s;
        $C;
    # parse [This=>3=>{etc}] into your C
    Cs:
        my ($t,@e) = @$s;
        my $cs;
        if (ref $t eq 'SCALAR') {
            C.c = G&peel,$$t;
            $cs++;
        }
        elsif (ref $t eq 'ARRAY') {
            die "Aray: ".wdump 3, $s;
        }
        elsif (ref $t eq 'HASH') {
            G&xot,$C,$t;
            return;
        }
        elsif (ref $t) {
            die "reft: ".wdump 3, $s;
        }
        else {
            C.t = $t;
        }
        if (!@e && !$cs) {
            C.c.W = C.t;
        }
        else {
            my ($y,$c,$sc,@ex) = @e;
            if (ref $c eq 'HASH') { # the c itself
                C.c = $c;
            }
            elsif (ref $c eq 'SCALAR') { # c as stringed hash
                C.c = G&peel,$$c;
            }
            elsif (@e > 1) { # string or ref to ref
                C.c.s = $c;
            }
            $sc = G&peel,$$sc if $sc eq 'SCALAR';
            $sc = {} if $sc eq '';
            $sc = G&peel,$sc if !ref $sc;
            C.sc = $sc if $sc;
            if (ref $y eq 'ARRAY') {
                if (@$y == 1) {
                    ($y) = @$y;
                    C.c.e = ref $y ? $y : # [$e]
                        G&s,$y; # [t]
                }
                else {
                    C.c.e = @$y <3 ? G&s,@$y : # [t=>s]
                        G&Ct,$y; # C
                }
                $y = 'W';
            }
            if (ref $y eq 'HASH') {
                if (y.y) {
                    c&e = $y;
                    $y = 'W';
                }
                else {
                    C.y = $y;
                }
            }
            if (!ref $y) {
                if ($y =~ s/^-(\w+)_?//) {
                    c&pi = $1;
                    c&s = C.t if !exists c&s;
                }
                # oo2 = 0.002
                $y = '0.'.join('',('0') x length($1)).$2
                    if $y =~ /^(o+)(\d+)$/;
                if ($y =~ /^\d+(\.\d+)?$/ || !length $y) {
                    C.y.cv = $y
                }
                elsif ($y =~ /^(\d+)?(?:\.\.(\d+))?(?:x(\d+))$/) {
                    C.y.in = $1;
                    C.y.out = $2 if defined $2;
                    C.y.thi = $3 if defined $3;
                }
                elsif ($y =~ s/^(\w+)$//) {
                    C.c.>$1 = C.t;
                    C.y.cv = $y; # ''
                }
                else {
                    die "Cs y not: '$y'\n".ki $C
                }
            }
            C.y.cv /= 10 until !C.y.cv || C.y.cv < 1;
            die "Extra: ".wdump 3,$s if @ex;
        }

    # for C seeing (C.c.s) another C, same t/y
    # new C knows y.A
    # like a piece of consc falling
    Chs: %acgt:s hs
        my $C = {};
        C.t = s.t;
        C.y.cv = s.y.cv;
        C.y.A = $A;
        C.c.s = $s;
        return $C;
    
    # round number
    rou:
        0.0001 * int(10000*$s)
    roun:
        0.000001 * int(1000000*$s)
    # 33 -> 0.33
    sca:
        $s /= 10 while $s > 1 || $s < -1;
        $s
    
    # check for rounded datastructure, non sprawl into A
    oleak: %acgt:s n
        length(wdump $n,$s) < length(wdump $n+1,$s);
    #c ways at C, see 2/Sea for C chewing/itself
    peels: %subpeel
        qr/^[\{\%]\w+/;
    
    peel:
        return $s if ref $s;
        $s =~ s/^%//;
        my $c = {};
        for (split ',', $s) {
            my ($k, $v) = split ':', $_, 2;
            $v = 1 if !defined $v;
            $c->{$k} = $v;
        }
        $c
    
    # k into hash path    also T/ip
    pint:
        my $o = ref $Me[-1] eq 'HASH' ? pop @Me : {};
        my @p;
        for (@Me) {
            if ($_ eq '*' && ref $s eq 'HASH' && 1 == keys %$s) {
                ($_) = keys %$s;
            }
            unless (ref $s eq 'HASH' && exists $s.>$_
                || ref $s eq 'ARRAY' && exists $s->[$_]) {
                o.fail = $_;
                o.mong = [ref $s eq 'HASH' ? sort keys %$s
                    : ref $s eq 'ARRAY' ? "0..".(@$s-1) : slim("?was: $s") ];
                o.have = \@p;
                return
            }
            push @p, $_;
            $s = ref $s eq 'HASH' ? $s.>$_ : $s->[$_];
        }
        $s
    
    # sJ = sc J
    pang: %acgt:s def
        my ($nk,$gk) = $s =~ /^([tycs])?(.+)$/;
        $nk || $gk eq 't' && return $gk;
        $nk = 'sc' if $nk eq 's';
        $nk = $def || 'sc' if !$nk;
        $nk && $gk || die"strv:$s";
        ($nk,$gk);
    
    # hash ordering
    hord: %acgt:s head tail
        my ($he,$ta) = ([],[]);
        $head ||= [qw't cv y c sc'];
        $tail ||= [qw's z'];
        my $tw;
        for ([$he=>$head],[$ta=>$tail]) {
            my ($to,$k) = @$_;
            for my $t (@$k) {
                $s.>$t || next;
                $tw.>$t ++;
                push @$to, $t;
            }
        }
        my @mi = sort grep { !$tw.>$_ } keys %$s;
        [ map { [ $_ => $s.>$_ ] } @$he, @mi, @$ta ];
    
    #c flexible data tester
    # \$whereclause
    ip: %acgt:s c u
        my $z;
        $s = G&peel,$$s if ref $s eq 'SCALAR';
        my $n;
        if (ref $s eq 'REF') {
            # do s.do
            $s = $$s;
            $n = $s;
            s.ip || die "sip no ref";
            $s = {%{s.ip}};
            my $ord = delete s.order;
            $s = {map{$_=> \$s.>$_ }keys %$s};
            s.order = $ord if $ord;
        }
        # n.all keeps going after a pass--
        my $pass = 1;
        # the many named checks must pass
        # their name is probably the k in $c.>$k
        my $o = ref s.order eq 'ARRAY' && s.order || [keys %$s];
        EE: for my $k (@$o) {
            my $y = $s.>$k; # intel
            my $x = $c.>$k; # carb
            my $u = $u.>$k ||= {}; # return
            $pass == 1 || n.all || y.or || return 0;
            
            return 1 if y.or && $pass == 1;
            $pass = 1 if y.or;
            
                my $exi;
                if (exists y.nk) {
                    $x = $c;
                    for my $k (grep{defined}y.nk,y.gk,y.tk) {
                        $pass--, next EE unless
                            ref $x eq 'HASH' && exists $x.>$k;
                        $exi = exists $x.>$k;
                        $x = $x.>$k;
                    }
                }
                my $wa = $pass;
                if (y.pint) {
                    my $o = {};
                    $x = G&pint,$c,@{y.pint},$o;
                    $exi = !o.fail;
                    u.pint = $o;
                    u.s = $x;
                }
                !defined $x || $pass-- if y.ndef;
                defined $x || $pass-- if y.def;
                !$exi || $pass-- if y.nexi;
                $exi || $pass-- if y.exi;
                $x || $pass-- if exists y.true;
                y.is eq $x || $pass-- if exists y.is;
                y.eq eq $x || $pass-- if exists y.eq;
                y.not ne $x || $pass-- if exists y.not;
                y.in->{$x} || $pass-- if y.in;
                !y.nin->{$x} || $pass-- if y.nin;
                $x > y.gt || $pass-- if exists y.gt;
                $x < y.lt || $pass-- if exists y.lt;
                $x >= y.gteq || $pass-- if exists y.gteq;
                $x <= y.lteq || $pass-- if exists y.lteq;
                $x =~ y.re || $pass-- if exists y.re;
                $x =~ /y.re/i || $pass-- if exists y.rei;
                if (my $h = y.hasany) {
                    my $is = grep {
                        my $s = $x.>$_;
                        my $u = $h.>$_;
                        $s && (!$u || do {
                            $u eq '!ref' ? !ref $s
                            : 1
                        });
                    } keys %$h;
                    $pass-- unless $is;
                }
                $pass = $pass < $wa ? $wa : $pass-1
                    if y.neg;
        }
        $pass == 1
    #c data
    # oh -  copy c over s, 2 hashes deep, like C
    oh:
        G&xot,$s,@Me;
    xot: %acgt:s c
        ref $c eq 'HASH' && ref $s eq 'HASH'
            || die "Hash up".wdump 3, [$s,$c];
        while (my($k,$v) = each %$c) {
            $s->{$k} = ref $v eq 'HASH' ?
                        {%{$s->{$k}||{}}, %$v}
            : $v;
        }
        return $s
    
    # hoh - copy c over s (half oh)
    hoh:
        G&xo,$s,@Me;
    xo: %acgt:s c
        ref $c eq 'HASH' && ref $s eq 'HASH'
            || die "Hash up".wdump 3, [$s,$c];
        while (my($k,$v) = each %$c) {
            $s->{$k} = $v;
        }
        return $s
    
    # hup - clone s, 2 hashes deep
    hup:
        my $CC = {%$s};
        $CC->{$_} = {%{$CC->{$_}}} for
            grep {ref $CC->{$_} eq 'HASH'} keys %$CC;
        return $CC;
    
    # assign to a hash, pass unless it was already something else
    always: %acgt:s k v
        my $pass = !exists $s.>$k || $s.>$k eq $v;
        $s.>$k = $v;
        $pass;
    
With: | # J's stuff, its Js, osc page, etc.
    u i
    
    yec: %acgt:ck k s
        my $c = A.1.c;
        $s = 1 unless defined $s;
        $c.>$ck.>$k = $s;
    
    noc: %acgt:ck k
        my $c = A.1.c;
        delete $c.>$ck.>$k;
        delete $c.>$ck if !keys %{$c.>$ck };
    
    # make/return J as named universal
    sJ: %acgt:J t
        J.sc.>$t ||= G&J,$J,$t;
    
    # make J, they inherit non c/sc
    J: %acgt:from t
        ($from,$t) = (A.1,$from) if !defined $t;
        my $J = do {
            my $A = $from;
            G&A,'J';
        };
        J.t = $t;
        J.y.G = $G;
        J.u = sub { ($A,$C,$G,$T,@Me) = @_; pop @Me; G&A,u=>8=>$J,\@Me };
        J.n = sub { ($A,$C,$G,$T,@Me) = @_; pop @Me; G&A,n=>8=>$J,\@Me };
        delete(J.u), delete J.n if $t ne 'os';
        $J
    
    # join the A (with .c.s = C) to the J
    # and gives A.c.n
    ground:
        A&n ||= G&sJ,A.1,'n';
        my $ch = 1s&ch || '';
        my $sip = sc&sip || die "no ip: ".ki$s;
        my $n = A&n || die "No Acn: ".G&sn;
        ns&a.>$ch.>$sip = $s;
    
    # get ground zip off J, or osc/ch s
    grind: %acgt:J s
        my $ch;
        if (ref $s) {
            $ch = ss&ch;
        }
        elsif ($s) {
            sayre "Getting ground J.t/$s";
            $ch = $s;
        }
        $ch = Js&ch if !defined $ch;
        $ch = '' if !defined $ch;
        T.givech = $ch if exists T.givech;
        my $n = G&sJ,$J,'n';
        my $zip = ns&a.>$ch;
        $zip = defined $zip && keys %$zip && $zip;
        ($zip,$ch)
    
    # last ground
    grist: %acgt:J s
        #return G&grind,$J,$s unless Jc&chaos && Jc&chaos.rea;
        my $ch = $s || '';
        my $zi = Jc&zi; # page of history
        my $zip = Js&Z && Js&Z.>$zi.>$ch
            || die "No history J.t ($zi/$ch): ".G&sn;
        $zip = defined $zip && keys %$zip && $zip;
        $zip
    
    # partition ground - increment ch and swap out the s
    # all osc s live on Js&S by channel they're for
    # channel is the time dive/page
    # main street (Js&ch aimed) being '', 1, 2...
    sesh: %acgt:J
        my $n = G&sJ,$J,'n';
        Js&ch = '' if !defined Js&ch;
        ns&a->{Js&ch} ||= {}; # so rea goes through blank pages
        my $o = Js&S.>Js&ch = G&sJ,$J,'s';
        delete Js&s;
        my $ch = ++Js&ch;
        my $s = Js&s = Js&S->{$ch} ||= G&sJ,$J,'s';
        os&next = $s;
        ss&prev = $o;
        ss&ch = $ch;
        # makes osc thing.3 etc hang around
        # TODO s adds to .root? files under ch
        # make files out of pi folded
        # which could mean layer or page
    
    # reset ground '', 1, 2...
    # more a given to the A.mo
    # which can switch itself up before s
    rea: %acgt:J s
        my $n = Js&n || return;
        Js&S.>Js&ch = G&sJ,$J,'s';
        my $zi = ++Jc&zi; # page of history
        my $lim = 2; # kept
        my $ch = '';
        while (ns&a.>$ch) {
            Js&Z.>$zi.>$ch = delete ns&a.>$ch;
            if ($zi > $lim) {
                delete Js&Z->{$zi-$lim}
            }
            $ch++;
        }
        Js&ch = '';
        delete Jc&o;
        delete Js&s;
        J.sc.s = Js&S.>Js&ch ||= G&sJ,$J,'s';
    
    # see S no, still osc will always mark Jc&o
    unrea: %acgt:J
        my $n = Js&n || die "Non J.t";
        my $zi = Jc&zi--;
        my $ch = '';
        while (Js&Z.>$zi.>$ch) {
            ns&a.>$ch = Js&Z.>$zi.>$ch;
            $ch++;
        }
        delete Js&Z.>$zi;
    
    #c adapt to J interior as perhaps exterior
    # here A.1 is the doer
    n: %acgt
        pop @Me if $Me[-1] eq '';
        G&A,n=>8=>A.1,\@Me;
    u: %acgt
        pop @Me if $Me[-1] eq '';
        G&A,u=>8=>A.1,\@Me;
    # many slide bywards on $M and then get nailed down
    m:
        pop @Me if $Me[-1] eq '';
        G&A,n=>2=>A.1,[];
        push @$s, G&Ct,\@Me;
    
    # electric line phantom
    # makes n without touching this ground (usu for c.e)
    #   e could be reliabilitied by grounding and osc work
    elph: %acgt
        pop @Me if $Me[-1] eq '';
        my $st = shift @Me if ref $Me[0] eq 'SCALAR';
        my $n = G&A,n=>1=>A.1,\@Me;
        if ($st = $st && G&peel,$$st ) {
            G&hoh,n.c,$st;
        }
        nc&nomind =
            nc&nogro = 1;
        G&A,$n,8;
    
Tunnel: | # mind & world
    # flying into moment
    # machine for finding pi
    # reality is a cave system
    u a
    # dialect of ...
    u 1:
        A.2 = shift @$s; # for J
        A.1 = G&sJ,A.3,'u';
        1c&is = 'mind';
    
    u 2:
        if (A.1.c.o) { # uJ's orderliness mark
            # also its current position relative to itself
            # make many pages of u per A.2 (A.1 doing u)
            G&sesh,A.1;
        }
    # hardwire u's u
    u 3:
        my $n = A.c.n = G&A,n=>1=>A.1,@$s;
        n.c.u.c.whole = 'theu';
        # give u mo W a bed to sleep from
        n.c.T.ATR.H = 8 unless 2c&noHu;
        G&A,$n,8;
        # pull on if not cached mindset (various W merged)
    n 1:
        ref $s ne 'ARRAY' && die "No :".wdump 4, [A.c.N, $s];    
        A.1 = shift @$s;
        A.4 || sayre "NO A4: A.t";
        A.c.u = G&sJ,A.1,'u';
        A&u.c.is = 'mind';
        
    # ground assembles mind
    n 2:
        my $u = A&u;
        return if A.1.t eq 'os' || A&nomind;
        if (!uc&o) {
            u.c.base = 'theu'; # the PiMachine
            # base if grind (ground, needs root), whole if just theu
            my $rev = ".u.sc.ch" if u.sc.ch;
            my $V = A.1.t =~ /^[A-Z]/;
            my $gr = G&grind,$u;
            if ($gr) {
                G&A,n=>8=>$u=>[uuu=>9=>{root=>1}];
                # slowly opening & closing a J of the u better than ^
                # but also want to hold u n at 3 til cachable known
                # the relevant page of s (man sesh) then ^ getting whole=?
                # those u s pages get cached somewhere in 4stw.ucache
                #   if simple enough
            }
            saybl "resolves mind$rev: A.1.t".($gr && " (u)");
            # resolve our mind
            my $so = G&A,s=>8=>$u;
            # merge its i/ii thing ideas into our 1
            if (u.sc.ii) {
                # A.mo = the 6er this n is mindupping
                # A = this A, already fell off A.mo
                # A.1 = an fyi for the J, may want only the most something mind
                for (A.mo, $A, A.1) {
                    _.ii = u.sc.ii;
                    _.i = u.sc.i || die "No i on A.1.t u";
                }
                # the mo of A.2 minds from above til here
                # a J's mind has how to get into a J and do its mind
                # see Elvising for inside-outside cooperation
            }
            else {
                sayre "No ii on A.1.t u (o Whole TODO?)";
                for (A.mo, $A, A.1) {
                    _.ii = A.4.ii;
                    _.i = A.4.i || die "No i on A.1.t u ish A.4.t not-whole";
                }
            }
            T.seek = 1;
        }
    # foldout tape - ground creates moment
    # can be [ [t,y,c], [t,y,c,sc] ]
    # or [ t,y,c ]
    # or [ C, C, C, C ]
    # mo receives A Me (A&N/$s) of [ C ] or [ t,y,c ]
    n 3:
        @$s = ([@$s]) unless ref $s->[0] eq 'ARRAY' || ref $s->[0] eq 'HASH';
        A.m = $A;
        my $grounded;
        my $travel = delete T.ATR;
        for my $l (@$s) {
            $l = [$l] if ref $l eq 'HASH';
            sayre "None in ".ki($l)."   ".G&sn if !@$l;
            my $mo = G&tugA,mo=>1,@$l;
            # know it
            unless (mo.c.s.c.nogro || mo.c.nogro || A&nogro) {
                G&ground,$mo;
                $grounded++;
            }
            # pass travel in
            mo.c.>$_ = A.c.>$_ for grep { A.c.>$_ } qw'nomem';
            G&xot,mo.c.T,$travel if $travel;
            
            A&mo = $mo;
            push @{A&mos||=[]}, $mo;
        }
        if ($grounded && delete 1c&o) { # orderliness
            # T for observing what disturbed it
            # comment T means focal point for ghost cobblingon
            # like commented says
            #&& A.1.t eq 'Panos' && sayyl "uno J.t: ",
            #    map{" _c&s.t _c&s.y.cv"} @{A&mos};
        }
    n 4:
        # become aware of past, surface vibration
    n 5:
        # thinks
    n 6:
        # flights
    n 7:
        # compress
    n 8:
        # inter
    
    # mo-ment fills out the content
    # sprung from n-author, separate put words...
    mo 1:
        A.mo = $A;
        ref $s eq 'ARRAY' || saybl "Was: ".ki($s)."   ".ki(A.c.N);
        G&Cs,$s;
    # join L if lumy
    mo 17:
        C.y.cv = 0.1 if C.y.cv eq '';
        C.y.cv *= -1 if C.y.cv < 0;
        C.y.cv *= 0.1 until C.y.cv < 1;
    # A.ii gets inner's mind, should T.seek
    mo 5:
        # 
    mo 8:
        A.up.la = $A; # never happens?
Sleep: | # desire and not
    u i
    
    # mark/point
    # sleep/engage mind
    # want to substrata bits of the ground,
    # or headers from bodies of work, making sleep if same
    # $e:
    #    name/Caboutname of how we are being
    #    all being is writing on some ground
    # $s:
    #    names sleep/wake features to have
    #    names/numbers groups of time/etc in the pin
    #      eg test frames
    S: %acgt:e s
        $e ||= 'doming';
        die "Featured e=".ki$e if $e ne 'doming';
        # index s and valve into A sleepmoding thing
        # Sleep has modes to deal
        
        if ($s eq 'no') { # backwards for once
            if (1c&want.once) { # got in somehow
                G&unrea,A.1;
                T.nose = 7; # still, osc
                return 0 # || returns from pin
            }
            else {
                1c&want.once = -7;
            }
        }
        
        if (c&Se && $s =~ /^\d+$/) { # goto section
            my $w = T.w;
            my $max = w.sc.num;
            $max || die "No numbers in w.t";
            if (c&Se == $s) {
                # is it
                #1c&forks &&
                #    Rw Forks $s;
            }
            elsif (c&Se < $s) {
                T.more = 1;
                return 0; # next
                # Tesh keeps throwing them,
                # may want to tell something to do more
                # in yay timeframe
                # there go the sections of code that do stuff
            }
            else {
                if (c&Se <= $max) {
                    goto "S_".c&Se;
                }
                else {
                    return 0 # last
                }
            }
        }
        
        G&A,n=>2,A.1,[];
        $A = A.mo;
        local A.V = 0;
        G&tug,0.6; # eg E can pos=1 awake
         
        1 unless "can" eq "sleep";
        
    # marks a point for ghost chopchoping, see ElvisDesi
    # also # 38 makes a numerical
    # know line in the way it came from
    # to disambiguate unnamed T points, which just say 'here'
    # we can wake J with T coverage (Tin)
    T: %acgt:e s
        if ($e ne 'doming') {
            # e type of moment of being
            # unknown should grab our attention
            # and/or make savepoint
            # they are runtime ice picks
            # like Escher joins in the space bends of the buildings
            # also similar to sending duplicate placements in lv
            # as if space was real
            die "Given e=$e s=$s";
        }
        G&S; # no s, just engage mind
        
        my $w = T.w || die "T no w: ".ki $T;
        (my $label = 'T_'.$s) =~ s/\W+/_/sgm;
        my $line = G&find_caller_line_labelled,$label;
        if (my $te = A.mo && A.mo.c.T) {
            G&has,\'mo'=>way=>w.t=>w.sc.dige=>1 if A.mo;
        
            # care for finding for way name > T name
            te.has.Tin.>w.t.>$s.>$line ++;
        }
        else {
            warn "T $s outerspace: ".G&sn
        }
        1;
    
    # could also look back for most h/w/throat/J6 call... somehow
    # c/64 Bun uses confess to find printed list of args
    # which we can lookup refs for A,
    # which could overload to print its t/ip
    find_caller_line_labelled:
        my @h;
        my $line; # to disambiguate unnamed T points
        for (0..7) {
            my $l;
            my @q = qw'package filename line subroutine hasargs
            wantarray evaltext is_require hints bitmask hinthash';
            my @ca = caller($_);
            $l.>$_ = shift @ca for @q;
            @q = qw'hinthash line subroutine';
            $l = {map{$_=>$l.>$_ }@q};
            push @h, $l;
            if (my $hh = l.hinthash) {
                if ($hh->{':'} eq $s) {
                    $line = l.line;
                    last;
                }
            }
        }
        $line || sayre "Cannot find $s above: ".ddump \@h;
        $line
        
    
    #c J4-5 how connection desires
    u c
    
    # ways in to knowing which dream is where
    u c
    # note the connection
    # for particle knowing in Matu
    typed 31: %of:mo,v:W
        my $t = 1s&typed ||= {};
        my $k = c&e ? 'e' : 'W';
        $t.>$k.>A.2 = A.2;
    
    # should be anywhereable
    # softly linked program structure
    # for when this travel is only for xo.some.some* havers
    # or to do anything to any C at any A, or h/w/n
    # the hard won fishing pole locates truth
    # and:
    # to refresh changed xo.way
    # for just wandering around
    
    # see Ghoster for top level figured travels
    # TODO doesn't want to be u c with v:sJ?
    xoJ 44: %of:mo,v:J
        $J = s&J;
        my $xo = Js&xo || return;
        if (my $xo = 1s&xo) {
            if (my $or = 3Cc&forxo) {
                my $any;
                each name,xop $or {
                    G&pint,$xo,@$xop || next;
                    A&want.forxos.>$name = 1;
                    $any++;
                }
                # contends with xo.way
                A&want.forxo = 7 * ($any ? 1 : -1);
            }
            if (my $ow = xo.way) {
                for my $way (keys %$ow) {
                    my $w = G&wup,$way || next;
                    my $od = {%{ $ow.>$way }};
                    delete $od.>w.sc.dige;
                    if (keys %$od) {
                        A&want.pin = 6;
                        A&want.pins.>$way = 6;
                    }
                    else {
                        # tends to travel anyway
                    }
                }
            }
        }
    
    # are we in or out
    J 45: %of:mo
        my $de;
        de.mo = A&want if A&want;
        de.C = c&want if c&want;
        de.J = 1c&want if 1c&want;
        $de || return;
        local A.V = 2;
        my $des = "C.t C.y.cv ".G&sn,3 ." -> ".ki $de;
        
        # want.* is weight if numeric, explanation if ref
        my $eq;
        my @got;
        each ftc $de {
            next if ref $c;
            push @got, $t;
            $eq += $c;
        }}
        my $only = $got[0] if @got == 1;
        
        # want to add counterpoints
        # everything eventually sleeps way/u/W stuff
        
        if ($eq < 0) {
            $only eq 'once' ||
                saybl "Sleep $eq   $des";
            # we can skip 6, our mo C should re-sc from before
             
            my $ou = G&grist,A.2;
            my ($t) = grep {_s&J eq s&J} map {_.c.s} values %$ou;
            die "MIssing ground for C.t c.y.cv: ".ki $t if ts&J ne s&J;
            C.sc = {%{t.sc}};
            
            my $to = $eq < -6 ? '8' : '7';
            T.Z.>$to = $A;
        }
        else {
            saygr "Waker $eq   $des";
        }
Jelly: | # moment of the
    u c
    n \'of:mo'
    # a wake of dynamics to the same particle
    pi 12:
        $pi || die "Give pi: ".ki$C;
        c&J = "pi/$pi";
    # W by name
    V 12:
        c&W = $V;
        # case for T.Z.2.8 go do 8 after 2
        # or T.Z.20.8 for 8 before/without 2
        A&twotoeight++;
    W 12:
        ref $s && die;
        $W = c&W = C.t if !$W || $W eq '1';
        c&J = $W;
        A&Jup = A.4;
        A&Jcv = 0.1;
        s&W = $W;
        # dhcp replanty A.c.ip
    # see self already
    J 2:
        my $J = s&J && return;
        A&Jup ||= A.1;
        A&Jcv ||= C.y.cv;
        $J = G&pint,A&Jup,sc=>Jtv=>C.t,A&Jcv
            unless A&nomem;
        s&J = $J;
        A&twotoeight && return T.not = 1;
        # 1 wants J indexing through rest of now ^
        #     could be for types of the J present,
        #     for doing m organisation
        # via the osc to it could replant the Jtv
        # preserving the tubing if same J, like xo
        # map{_s&J} G&pint,A&Jup,sc=>tv=>C.t,C.y.cv;
    
    # J encode π 
    J 3:
        unless (s&J) {
            s&J = G&J,A&Jup,C.t;
            length(C.t) > 2 && sayyl "J ! C.t"
                .(c&pi && " C.y.cv -".c&pi);
            A&el = c&W ? 2 : 1;
        }
        A&el ||= 3;
        A.3 = s&J if c&W;
        A.2 = A.1;
        A.1 = s&J;
        # J inherits from A before ^
        s&J.1 = s&J;
        s&J.2 = A.4 if s&J.2 eq A.4;
        s&J.3 = s&J if c&W;
        A.1.C = $C;
        A.1.T = $T;
        T.oT = A.mo.up.mo.c.T;
        #G&sJ,A.1,'s';
    
    pi 3:
        s&pi = $pi;
        my $J = s&J;
        Jc&d = A.2.c.d + 1;
        Js&name = "J.c.d $pi*C.t";
        # distance from A.3 as ip
    
    #c J.C/T wants to be? drop in A spawn?
    # the 1Cs&la babs to A.1.c.s.sc.la
    
    u s
    # humming - superline timetug - osc exports that door us here
    # outside the fully self/u mind
    # can see network protocols of elvias
    # A&E would know if it wants to go in
    J 4:
        my $v = J.sc.Tv; # inner surf attracto
        my $ha = J.sc.tv; # things
        
        Rw Js&amb $J if !c&e && Js&amb;
        
        # T wants ha or v wants T (by now, etc)
    
    # impulse -> in pulse
    J 5:
        A&pin = c&pin || c&J || s&J ->{t};
    
    # do the pin
    # could do M-odulate 
    J 6:
        (A.i,A.ii) = (A.4.i,A.4.ii);
        T.nose && return sayyl "C.t 6 knows";
        
        # takeover ground/page
        G&yec,chaos=>'rea';
        Js&n && G&rea,$J;
        Js&u && G&rea,Js&u,$J;
        
        # T to throw in a u on below
        if (my $uz = !Jc&is && 2c&Wunderu) {
            u $_ for values %$uz;
        }
        
        # particle holds our wave:
        # 2Cs&ac -> A.2.c.s.sc.ac, on mo C above
        # 2Cy&A is A.mo.up.mo
        Jc&s = $C;
        
        my $ise = c&e && " (e:".c&e ->{t}.")";
        saybl "St J.t / A.1.t  (A&pin)$ise";
        my $c = {root=>1};
        my $y = {cv=>0.9};
        my $sc = y.at = {};
        my $M = [];
        my $r = J.sc.root = G&A,n=>1=>$J=>[J.t,$y,$c,$sc];
        my $ar = c&ar || {};
        my $s = c&s;
        {
          local A.V = 2;
          Rw A.c.pin + $J $y $M $s;
        }
        
        G&noc,chaos=>'rea';
        T.nose && return;
        G&yec,chaos=>'tilosc';
        
        c.M = $M if @$M;
        Jc&imping = 1
            if delete y.imp; # reset lv
        # spacey y.* apply to M in L/a
        (r.i,r.ii) = (J.i,J.ii);
        G&A,$r,8;
    
    # join moment to moment
    J 7:
        A&Jup.sc.Jtv.>C.t.>A&Jcv = s&J unless T.nose eq '1';
        # no osc us/ground you but keep J ^ (e to)
        T.not = 1 if T.nose eq '2';
        # was skipping out of 6
        delete T.nose if T.nose eq '7'; # 
        T.nose && return
            sayyl "C.t knows";
        # temp - of wants to load elvis understanding like route handlers
        
        sayyl "Oscillate J.t";
        G&A,s=>8=>$J;
        G&noc,chaos=>'tilosc';
        sayyl "Oscillate J.t done!@!";
    
    # J leaves T.op just outside
    J 8:
        T.oT.op = 1s&s.sc.top;
    # TODO do n till 9
    

