

Netodo: | # ode to the net
    # to Zem <-> Mez
    # show reliability, like a mez row...
    # message should subsist in G/Mez W, be completed at the other end
    # our process listens for messages for itself
    # like Ting completion of the G/Mez W bits
    # see 7/Tropics
    
    # Mez also needs to listen only if this fork is active
    # 
ElvisEndo: | # hold lines for abseilers, is Fishes
    my $t = Rw Towering Ang _ Zpace
        || return;
    #
    Rw ElvisFishes + $t;
ElvisFishes: |
    return unless c&Se == 1;
    my $p = $$;
    town: my $to = Rw ElvisYou $bay=bay;
    return unless $p eq $$;
    
    sleep 1;
    
    my $op;
    my $f = "$to/p/Opper";
    sayre "... $f ";
    sleep 1 until -l $f;
    $op = readlink $f;
    saygr "Waiting fr $op $f";
    waitpid($op,0);
    sayyl "Done!";
    sleep 1;
    goto town;

pi/ftw: | # file/pin z lines map
    Jc&save = 'W';
    y.at.dis = 2;
    y.imp = 1;
    for my $f (sort keys %$s) {
        my $tw = $s.>$f;
        m file=>''=>$f,'%fs:7,dis:3'
        for my $t (sort keys %$tw) {
            my $z = $tw.>$t;
            my @l = @{zs&z};
            my $nl = "\n" if @l > 1;
            my $spc = " " if @l == 1;
            m pin=>''=>z.t.$nl,'%fs:14,hs:788'
            for my $l (@l) {
                # l.t = line number
                ls&cs && # number of # c folds
                m "c l.t"=>''=>join('',('c')x ls&cs),"%fs:7"
                m "n l.t"=>''=>$spc."l.t:",'%hs:499'
                m "W l.t"=>''=>lc&s
            }
        }
    }
    0 &&
    G&styl,<<'';
        file  %fs:6,dis:3
          pin %fs:14,hs:788
          
    #G&give,Toter=>s=>$M
    
pi/zem: | # your message gets marked received
    # < reliability
    #   A.2 must cooptivate..? make Doable/%dos normal
    unless (Js&bowls ++) {
        my $c = {W=>C.t,s=>c&s};
        c.W = C.t;
        c.G = c&G if c&G; # assumed from W
        c.s = c&s;
        n Zem=>[to=>$c]
    }
    C.t = "C.t of c&s";
    
    
    
Zem: | # speaker of mezages with line protocols & Ging
    # find remote G, may have ability to pop up the remote
    u Zpace
    u pg
    y.res = 1; # M t replant
    
    Rw sWscribe; # has clients
    # they give and possibly ungive (needing origin ref)
    # to stop the message/intention asap
    Js&ein.t.to.sMJ = &sMJjeT{
        G&dedu,tri=>$s,j.t || return;
        G&musb,W=>$j;
        ec&G ||= ec&W;
        # +Gtime
        m "j.t $s"=>''=>{s=>$s,j=>$j}=>{G=>ec&G,W=>ec&W}
    };
    # 3s&oks.c.s = 1; # to transport s=anything
    
    S
    
    # make packets per G = unique receiver
    my $st;
    for (@{Js&M||[]}) {
        # can lv up islands of traffic later 
        my $k = _s&G.' '._.t;
        push @{$st.>$k ||=[]}, $_
    }
    for my $k (sort keys %$st) {
        my $z = $st.>$k;
        # with packets per W inside
        my ($g) = map{_s&G} @$z;
        my $st;
        push @{$st.>_s&W ||=[]}, $_ for @$z;
        my $W = [];
        for my $w (sort keys %$st) {
            my $z = $st.>$w;
            @$z = map {_c&s} @$z;
            #@$z = map { G&Ct,[cab=>''=>{s=>_c&s}] } @$z;
            push @$W, G&Ct,[toW=>''=>{}=>{W=>$w,z=>$z}]
        }
        m $k=>-dispatch=>{}=>{sending=>$g,z=>$W}
    }
    
    my $nets = &t{
        my $f = "G/$t";
        my $to = readlink($f);
        $to || die "No $f host for $t"
    };
    
    my $zem = &acgtse{
        my $m = sjson $e;
        if (length $m > 5000) {
            #G&tyable,mez=><<'' if !G.tabup++;
            #    f,s,ts:timestamptz:default:now(),mid:serial:primary:key
            my $h = G&qh,<<'',G.t,$s,$m;
                insert into mez (f,t,s) values (?,?,?) returning mid
            sayyl "Length of zen/notify $s: ".length $m;
            $m = "CCC h.mid";
        }
        else {
            $m = decode_utf8($m);
        }
        G&db ->notify($s,$m);
    };
    
    # relative to el - overall C change
    my $l = Js&Kels.sending = {};
    l.1 = &acgt{
        1 && saygr "Wants to send: ".G&aC,$C;
        my $s = G&stores,sub{};
        my $ip = $nets->(s&sending);
        G&h,$zem,$ip,$s;
        # add sc.sent on a sentient page
    };
    l.9 = &acgt{
        #n Listen=>[not=>C.t]
    };
    
    
pi/dispatch: | # a bunch of messages to send to a G
    # at one point in time/desire
    # should be update/resume into correct fork
    # sleeps if same z
    n $_ for @{ delete s&z };
    
ElvisOver: | # Goh-listening way update channeling
    # must be forked from testrun due to wander, exit
    # testrun must check that it completes (waitpid & so on)
    # so pi/test wants to S initially and begin when all of 3's tests are declared
    # and 3 osc sweeps up children
    # pg way listen (G'd)
    my $t = Rw Towering Ang
        || return;
    return unless c&Se == 1;
    
    if (c&Se == 17) { # find way to relay test info
    # number of failures doesnt show in $? if we use exit?
    if (my $pid = fork()) {
        waitpid($pid,0);
        die "child failed with $?" if $?;
        is $?, 0, "Child completed";
        return;
    }
    }
    
    G.mkoJ->(); # frees us from test exit
    my $til = sub {
        my ($d,$cb) = @_;
        Rw timer $d $cb;
    };
    my $f = 'g/s/99';
    die "Already full of ".ki $_ for
        grep{ 'ElvisOvary' ne join'',keys %$_ }
        map { LoadFile($_) } grep { -s $_ } $f;
    
    my $blank = &{
    write_file($f, <<'');
        ElvisOvary: |
            3 + 5
    };
    $blank->();
    
    u ElvisOvzio=>''=><<'','of:w'
        my $v = Rw ElvisOvary;
        n Taking=>''=>$v
    
    
    $til->(4=>sub {
    
        t.e =
        n ElvisOvzio
        t.cs->('sc top', "ElvisOvzio way used");
        
    t.e =
    n Waytch=>W=>{filter=>qr{/s/99$}}
    t.cs->('sc lv,olv', "Waytch holding on to Mez");
    
    t.e =
    n Listen
    t.cs->('sc lv,olv', "Listen listening to Goh for Mez");
    t.cs->('sc top', "Listen again");
    
    $til->(0.02, sub { `echo '    -1' >> $f` });
    $til->(5.42, sub { `echo '    -1' >> $f` });
    $til->(9.8, sub {
        t.e =
        n Waytch
        t.cs->('sc top', "Waytch received notifies");
        t.e =
        n WayHeave
        t.cs->('sc top', "WayHeave has latest patch");
        t.e = 
        n ElM
        my $in = 0;
        my $unt = sub {
            my $l = shift;
            $in++ if $l =~ /^\s+w 0.001/;
            $in
        };
        t.cs->({ntos=>'sc J sc u sc s sc top',
            grepl=>$unt},"A5 u includes WayHeave");
        t.cs->('sc J sc u sc s sc lastK c s',"A5 u last wave");
        t.e =
        n ElvisOvzio
        t.cs->('sc top', "ElvisOvzio used new way");
        my $mo = t.ntos->('mo');
        t.dd->(mo.c.want, "ElvisOvzio notices pin change");
        
        t.e =
        n Mez
        t.cs->('sc top', "see Mez");
        t.e =
        n Listen
        t.cs->('sc top', "see Listen");

    });
    $til->(9.9, sub {
        $blank->();
        exit;
    });
    
    });
    
    
    
    
    
WayHeave: | # hold way updates to G since it began, plumbed by Waytch
    u Zpace
    Js&ein.t.w.sMJ = &sMJjeTC{
        local A.V = 2;
        $s = [$s] unless ref $s eq 'ARRAY';
        for my $s (@$s) {
            ss&dig && sc&s || die "Not way? ".ki $s;
            m s.t=>'',sc&s,{digup=>ss&dig,of=>'w'};
        }
    };
    S
    
    @$M = @{Js&M||[]};
    y.res = 1; # unsprawl by _.t
    # should be s9, is s8, late enough to consider itself already
    #   when called again in ElM
    Jc&sang = &acgt{
        sayyl "Updates pushing A.5.t from A.1.t";
        G&elph,A.5.t,[w=>A.1.t]
    };
    
    
    
Waytch: | # for ghost updates
    # to plot way changed into ElM and call the ghoster to calc wanderince
    Js&loose = 1;
    u Zpace
    
    Jc&filter = c&filter if c&filter;
    Js&ein.pi.Gup.sMJ = &sMJjeTC{
        es&file =~ Jc&filter || return if Jc&filter;
        m e.t=>''=>{s=>ec&s}=>{dig=>es&dig}
    };
    
    S
    n Goh=>-mez
    
    y.n = 5;
    y.cyc = 100;
    @$M = @{Js&M||[]};
    Js&sels.dig.1 = &acgt{
        G&elph,WayHeave=>[w=>$C]
    };
pi/mez: | # your interpreted pg listener, makes e to A.2
    Js&bowls ++ ||
    n Mez=>[to=>c&s]
    
Mez: | # listener for mezages with line protocols
    # inc /^[/ -> many e
    #     /^CCC (\w+) -> large item in mez where t=$1
    # like and in front Listen,
    # line clevered into e as it goes through to client
    u Zpace
    u pg
    y.res = 1; # M t replant
    
    Rw sWscribe; # has clients
    
    Js&eout.t.l = "heard elvises"; # fyi
    # distribute noises to froms
    Js&ein.t.l = &TesC{
        # large messages stashed and referred to
        $s = G&dmez,$1 if $s =~ /^CCC (\d+)$/;
        
        my $es = eval { djson $s };
        if ($@) {
            G&vent,$_ for "Spat: $@\n\nAbout: ".ki $s;
            $@ = "";
            return;
        }
        
        for my $s (ref $es eq 'ARRAY' ? @$es : $es) {
            # < zend travel
            # e must go around a kind of corner here
            # for the hz will not divide
            for (grep{ _c&s eq es&listen } @{Js&M||[]}) {
                _s&W || die "noW listenee ".ki$_;
                n _s&W => [$s]
            }
        }
        
        T.pos = 0;
    };
    
    S
    
    Rw sMaps listen; # pour sM s->sc.listen
    
    # relative to el - overall C change
    my $l = Js&sels.listen = {};
    l.1 = &acgt{
        n Listen=>[to=>C.t]
    };
    l.9 = &acgt{
        n Listen=>[not=>C.t]
    };
    
    
    
    #
pi/listen: | # your pg listener, makes e to A.2
    # yea heayh
    J.bowls ++ ||
    n Listen=>[to=>c&s]
    
Listen: | # pg listen pool
    u Zpace
    u pg
    y.res = 1; # M t replant
    
    # accumulate the froms
    Rw sWscribe;
    
    Js&eout.t.l = "heard lines"; # fyi
    # distribute noises to froms
    Js&ein.t.l = &TesC{
        # << check ec&s for mezrow
        map {
            _s&W || die "noW listenee ".ki$_;
            n _s&W => $C
        } grep {
            _c&s eq es&listen 
        } @{Js&M||[]};
        T.pos = 0;
    };
    
    S
    
    Rw sMaps listen;
    
    y.imp++ if T.forked; # relistens all
    G&has,forked=>1; # <^ waker in between
    
    G&db ->unsubscribe('notification');
    G&db ->on(notification => &dtps{
        $s = encode_utf8($s);
        my $h = slm(9,dig($s));
        1s&een.>$h ++ # TODO gc
            && return sayre "Seen before (from $p)";
        n Listen=>[l=>''=>{s=>$s}=>{listen=>$t}]
    });
    
    # for oscillation of sc.listen
    # relative to el - overall C change
    my $l = Js&sels.listen = {};
    l.1 = &acgt{
        G&db ->listen(C.t);
    };
    l.9 = &acgt{
        G&db ->unlisten(C.t);
    };
    
sWscribe: | # for your M of W wanting s
    # deduped by $s and origin j.3
    Js&ein.t.to.sMJ = &sMJjeT{
        G&dedu,tri=>$s,j.t || return;
        G&musb,W=>$j;
        m "j.t $s"=>''=>{s=>$s,j=>$j}=>{W=>j.t}
    };
    Js&ein.t.not.sMJ = &sMJj{
        @$M = grep { _.t ne "j.t $s" } @$M;
    };
    
sMaps: | # maps unique Js&M.c.s into m $t:s and sc.$m0 = $s
    my ($sck) = @{ar.m||[]};
    # $s = unique listen addresses
    my $st;
    $st.>_c&s.>_s&W = 1 for @{Js&M||[]};
    
    for my $s (sort keys %$st) {
        my $v = $st.>$s;
        my $sc = {};
        sc.clients = join' ',sort keys %$v;
        $sc.>$sck = $s if $sck;
        m $s=>''=>{}=>$sc
    }
sMpi: | # many pi=$m0 s=$s j=$j in W order
    my ($pi) = @{ar.m||[]};
    # so the pi can do tests etc on it
    # or be Ting the W to wake osc observer
    #  that the inner is further instructions for
    
    my $st = {};
    acu $st, _s&W, $_ for @{Js&M||[]};
    
    for my $s (sort keys %$st) {
        my $z = $st.>$s;
        for my $D (@$z) {
            m Ds&W." ".Dc&s=>''=>{pi=>$pi,s=>Dc&s,j=>Dc&j}
        }
    }

