Text: | # search through text, We beyond
    # < wanting to pick abilities onto what you're holding
    Rw Tiot;
    S
    
    m sayin=>-tin
    
    Js&sayin ||= 'Continues';
    
    my ($match,$file) = split "\t", Js&sayin, 2;
    $file = Rw Glonge $s:file if $file;
    my $say = "For $match".(!$file ? ":" : " in $file:");
    $file ||= "g/s g/j";
    m f=>'',$say, 'dis:1'
    
    my $cmd = "ack \"$match\" $file g/nowhere";
    my @l = `$cmd`;
    
    my ($files,$ftw);
    my @z;
    for (@l) {
        my ($f,$i,$s) = split ':',$_,3;
        my $lines = $files.>$f ||= [`cat $f`];
        my $t;
        my $in = 0;
        my $cs = 0;
        my $pc = '#'.'c';
        for (reverse @{$lines}[0..$i-1]) {
            $cs++ if /$pc/;
            $in++, next unless /^([\/\w]+):/;
            $t = $1;
            last;
        }
        $t || die "Fis $f,$i,$s";
        my $C = $ftw.>$f.>$t ||= G&Ct,[$t=>''];
        push @{s&z||=[]}, G&Ct,[$in=>''=>$s,{cs=>$cs}];
    }
    
    # want to capture those groundings and put them in a C ^
    # that is yay spatially transparent
    
    #n so=>3=>join('',@l)
    m files=>-ftw=>{s=>$ftw}
Glonge: | # figure embryo reference into ghost path #i
    join ' ', map { 
        /^(\d+)$/ ? "g/j/$1" :
        /\/[a-z]/i ? $_ :
        "g/$_"
    } split /\s+/, $s
pi/ftw: | # file/pin z lines map
    Jc&save = 'W';
    y.at.dis = 2;
    y.imp = 1;
    for my $f (sort keys %$s) {
        my $tw = $s.>$f;
        m file=>''=>$f,'%fs:7,dis:3'
        for my $t (sort keys %$tw) {
            my $z = $tw.>$t;
            my @l = @{zs&z};
            my $nl = "\n" if @l > 1;
            my $spc = " " if @l == 1;
            m pin=>''=>z.t.$nl,'%fs:14,hs:185'
            for my $l (@l) {
                # l.t = line number
                ls&cs && # number of # c folds
                m "c l.t"=>''=>join('',('c')x ls&cs),"%fs:7"
                m "n l.t"=>''=>$spc."l.t:",'%hs:499'
                m "W l.t"=>''=>lc&s
            }
        }
    }
    0 &&
    G&styl,<<'';
        file  %fs:6,dis:3
          pin %fs:14,hs:788
          
    #G&give,Toter=>s=>$M
    
pi/tin: | # code boxen, re C.t to alter? check js, hold something?
    #C&fs = 19;
    #s&ab = 1;
    #s&ri = 0;
    #s&zi = -30;
    #.imp++;
    if (s&ha eq '1') {
        #s&mh = '30%';
        #s&mw = '100%';
        #s&over = 'scroll';
    }
    else {
        s&mh = 7;
        s&mw = '50%';
        s&over = 'hidden';
    }
    s&dis = 1;
    n t=>1=>C.t,'%sha:4 9 5 698'
    
    my $h = A.3.sc;
    $s = $h.>C.t ||= C.t;
    
    my $sc = G&peel,'%cod:perl,dig:steve,dos:tinput';
    #sc.width = 4;
    #sc.height = 3;
    sc.dig = s&dig if s&dig;
    n "z fo" =>1 =>{s=>$s},$sc
    
    y.at.cssdel = 'transform';
tinput: | # handly talky box
    # should be of autocomplete, lost-focus and escape
    
    my $s = us&code || die "Nocode to tinput";
    my $j = e&_hJ;
    1 && saybl "tinput: ".G&es , " (J.t's j.t) says: $s";
    J.3 eq $J || die "J not J3: ".G&sn,$J;
    
    my $was = J.sc.>j.t;
    J.sc.>j.t = $s;
    T.pos = $was ne j.t;
    #J.vid = us&code;
Clank: | # see/wire knowledge piles, surveying
    # git clone ../blank/est
Glo: | # build a bay and .pl, earthworks
    #Rw Tiot;
    Js&ein.bo = 'Doable';
    Jc&tape = 1;
    y.at.dis = 3;
    n t=>o1=>"C.t"=>'%fs:15,hs:488,dos:Reimp,dis:2'
    
    # 
    my $p = 'blank'; # copy code from
    my $t = 'spot'; # the bay
    n clust=>o12=>"bay of "
    n t=>o2=>$t=>'fs:15,hs:385'
    n btw=>o21=>ki(C.c),'fs:7,dis'
    
    
    
    if (-d $t && !Jc&do_recreate) {
        n do_recreate=>4=>"Recreate?",'dis,dos:ejc'
    }
    else {
        `rm -rf $t` if delete Jc&do_recreate;
        
        `mkdir $t`;
        for (
            [glosac=>'sac'], # u/Ang cache
            [glojs=>'je'], # WebHost's
            [glow=>'new'], # stylehouse
        ) {
            my ($r,$rt) = @$_;
            `ln -s ../$p/$r $t/$rt`;
        }
        n andnow=>-od=>{s=>''.`ls -lt $t`}
    }
    
    n do_script=>4=>"Script?",'dis,dos:ejc'
    if (delete Jc&do_script) {
        
        my $eh = hitime();
        my $getway = &w{
            my $w = G&t,w=>$w || die "Noway: $w";
            wc&s
        };

        my @set = map {
            my $f = "$t/new/$_/1";
            -f $f || die "You need $f";
            $f
        }
        # put back to W mixing once resourcer knows it
        'HaMachine';
        
        # make $Believe->($N) able
        my @suub = map {
            my ($t,$args) = @$_;
            my $s = $getway->($t);
            my $C = G&Ct,[$t=>1=>{s=>$s},{args=>$args,of=>'w'}];
            G&perlcode,$C;
            'my $'.$t.' = '.c&s;
        } [Beach=>'s,f'],[Believe=>'N'];

        my $bab = &s{
            my $C = G&Ct,["someba"=>1=>{s=>$s}];
            G&CoBabbler;
            C.c.s
        };

        my @inc = ('G');
        my $perl = join "\n\n",
            $getway->('strictwarn'),
            'use FindBin qw($Bin);',
            'use lib "$Bin/othlia";',
            'use lib "$Bin/slib";',
            (map{"use $_;"}@inc),
            'my ($A,$C,$G,$T);',
            'my $begin = "NewBeginning";',
            @suub,
            'my @f = ('.join(",",map{"\n    '$_'"}@set)."\n);",
            $bab->($getway->('Begin'));

        my $f = $t.".pl";
        write_file $f, $perl;
        `chmod +x $f`;
        
        n run_script=>5=>"Scripted $f",'dis,dos:ejc'
    }

