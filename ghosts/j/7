FishBrains: |
    # etc
        
        # ground has been completed, pos revamping sleepybits from drain
        my $g = A.ground || die "noground";
             gs&J eq A.1 || die "ground sJ not A1: ".ki(gs&J)."\n\nA1: ".ki A.1;
        my $ch = g.t;
        
        # ground -> drain, so it can be resupposed
        # < keeping stuff on 9... replace 1s&root with the drained one?
        my $d = 1s&drains.>$ch = G&hup,$g;
        ds&z = [grep { 
            my $Y = _.y.A;
            !$Y || !(Yc&T.not || _.sc.not ) || do {
                sayre "Dropping yATnot from drain: ".G&aC,$_;
                0;
            };
        } @{ds&z}];
        
        my $in_top = $d;
        my $r = 1s&root || die "how to hold many";
        # < clean away use of the drain as the top C
        if (1) {
            r.t eq 'Elan' && sayre "Elan osc root: ".G&aC,$r;
            if (r.y.OA) {
                warn G&sn ." root already osc'd, sleeping";
                return;
            }
            rs&z && die "Root9 r.t has scz: ".ki rs&z;
            rs&z = [grep {$_ ne $r} @{ds&z}];
            @{ds&z} == @{rs&z}+1 || die "Root9 r.t wasn't grounded?";
            $in_top = $r
        }
        
        local A.V = 0;
        
        # osc C: brain is ongoing, one per ground
        A&s = $C = 1s&brains.>$ch ||= G&Ct,[$ch=>1=>{}=>{J=>A.1}];
        # squished bits to give the 9, cJo=version
        s&label = {c=>{}};
        
        if (A&imp || delete 1c&imping) { # reset or seek?
            # o will see anew
            # lv will reset when r.y.A.c.el == 1
            delete s&o.>$_ for qw'in ut';
        }
        
        # o in - to map the drain and OC the changes
        #   climbing in/next/z to produce OC feedable clones,
        # <? C that are attributes it keeps/diffs but doesn't OC
        # OC.y.C = origin C, C.y.OC = OC
        # 
        # the OC is another copy, which the oiD gets
        
        # see enough interior of Js with map function
        #   o being FactorEase's backend, ideally
        my $m = G&Ct,[J_Shade=>''];
        # doesn't do Tv (C that are attr), unless ms&evenTv
        my $sn = G&sn;
        ms&any = &acgt{
            $_ eq 's' ||
            delete C.c.>$_ for keys %{C.c}
        };
        ms&nkgk.sc.J = &acgts{
            ref $s eq 'HASH' && s.y || return sayre "NotJ:".ki$s;
            c&Jo = ss&Jo;
        };
        
        my $o = A&in = G&o,$in_top,{liveon=>$C,t=>'in',yoff=>'OC',map=>$m,V=>0};
        
        # where we'd want to forget $d, the drain itself...
        # < d.y.in.y.up is?
        my $da;
        A&Core = [grep {_.y.C ne $d} @{os&Core}];
        A&Cora = [grep {_.y.C ne $d} @{os&Cora}];
        if (r.t eq 'Elan') {
            r.t eq 'Elan' && sayre "Elan osc-postin root: ".G&aC,$r;
        for my $v (@{A&Cora}) {
            my $Y = v.y.A;
            my $ind = join('',('  ')x Yc&ind);
            1 && say "Yc&el $ind - ".G&aC,$v ."  ( "
                .ki(v.c)."    %  ".ki v.sc;
        }
        for my $v (@{A&Core}) {
            my $Y = v.y.A;
            my $ind = join('',('  ')x Yc&ind);
            1 && sayre "Yc&el $ind - ".G&aC,$v ."  ( "
                .ki(v.c)."    %  ".ki v.sc;
        }
        }
        
        # sleep: before 9 takes all under, no Core means still
        if (!@{A&Core}) {
            sayre "Sleeps in: ".G&sn;
            return;
        }
        
        # Cora is full state
        #   which will have its last awake .y.OC
        # Core is changing state, of OC
        #   may include the last OC, with 
        A&OAs = [map { G&A,O=>0=>_.c,_.sc } map { _.y.A } @{A&Core}];
        
        $r = r.y.OC || die "root didn't OC";
        
        # change the ground/drain - top link
        my $t = $r;
       #t.y.out = delete t.y.up;
        my $Y = t.y.A;
        
        # O - only changes and their parents
        # < tug for .1 progress
        # < with an A=Os for all
        G&A,$_,8,{r=>$r} for @{A&OAs};
        
        
        # Core is changing state
        
        #   slight possibility of zombies if you topy&OCs&qua++
        #     will news themselves until oinD quashes changes
        
        # the I, injected into r.y.tv, so z clobbers it,
        #   be releasing local modulation not absolute truth
        Rw PostO $o $r;
        # we shall make s&I from what looks like it in K
        
        # put tips of this stuff in the idea of itself
        rs&z = [ grep{ $_ ne $r && _.y.A.c.ind == 1 } @{A&Cora} ];
        
        delete rc&M;
        
        #c o ou - to finalise ourselves and KA changes
        $o = A&ut = G&o,$r,{liveon=>$C,t=>'ut',yoff=>'KC',gen=>'lv',V=>0};
        
        # some vectors may want KC on top, no KAing
        
        # K<6 compresses/tidies 
        # - only changed C
        # - to save whole picture
        #   for s&top = 9, the output
        A&KAs = [map { G&A,K=>0=>_.c,_.sc }
            grep {
                map { _.y.s = $C } values %{_s&clones};
                1
            }
            map { _.y.A }
            @{os&Core}
        ];
        
        # K>5 "
        # - "
        # - to log change
        #   for lv, if PostK/PostLV is followed
        
        $r = r.y.KC || die "root OC didn't KC";
        my $Y = r.y.A;
        # 9 would be 3 if anything changed
        if (Yc&el eq '8' || !@{A&KAs}) {
            @{A&KAs} > 1 && sayre "Had KAs tho";
            Yc&el ne '8' && sayre "Not rel8 tho: Yc&el";
            sayre "Sleeps ou: ".G&sn;
            return;
        }
        
        
        
        # K - only changes and their parents
        #   <6 becomes things for s&top, s&tv, etc
        #   >5 comps for writing Lines
        # < an A=Ks would map out AWritering
        #     pointing to objects already on the ground
        G&A,$_,59,{r=>$r} for @{A&KAs};
        
        Rw PostK $o $r;
        
        # hangs brain up on the J
        1s&s = $C;
        
        A.1.sc.>$_ = C.sc.>$_ || undef for qw'tw top Jo I tv';
        # top is 9's KC
        
        # -> W
        
        $C
        
    # watching the K diverge as a way to get input is interesting
    # self servers (Dogu/-lookin eg) wants to see out-changes as in-changes
PostK: |
    # scoop up I every time
    # clobber here into the many I cv 
    #  or different positions on the thing,
    #  even with same cv, from around this vector, someday
    # we hold A.I as most executable, use OC for it
    s&I = {map { _.t=>$_ }
        # the shape of being an I thing (yup==9?)
        # take outC, which is:
        #   clone of OC
        #   not the clone KC, which is breaking down code for Lineing
        map {
            my $c = _s&clones || die "KAnoclones";
            c.outC || die "Has no outC"
        }
        map { _.y.KA || die "No KCyKA" }
        grep { _c&W && !_s&W }
        map { _c&s || die "KC no cs=KC" } 
        map { _.y.KA || die "NoKA: ".ki$_ } @{os&Cora}
    };
    
    # deletes I unless values I
    delete s&I unless values %{s&I};
    
    
    
    # version s
    # major & minor
    if (r.y.A.c.el eq '1') {
        s&imp++;
        s&wil = 1;
    }
    else {
        s&imp = s&imp || 1;
        s&wil++;
    }
    # called Jo?
    s&Jo = s&imp.".".s&wil;
    s&label.c.Jo = s&Jo;
    
    each nk,gk,v s&label {
        $r.>$nk.>$gk = $v;
    }}
    
    if (1c&is) {
        # mind or so
        # could save its mind here
        # otherwise caching in G&clusp
    }
    else {
    
    # make a bunch of writings to give to Wall
    if (1c&save || 1c&tape || 3c&tape) {
        # our past should be got through some all-flexi way
        # this holds the bunch of writings, to give to Wall
        # kind of know where to write things if !$W
        # < needs $f/$gd to locate already written things
        
        if (1c&save || 1c&tape) {
            (a&f,a&gd) = G&Locate_write;
            my $n = Rw NamePosition;
            if (A.1.t ne 'Wall') {
                my $sc;
                $sc.>$_ = $n.>$_ for grep{!ref$n.>$_ } keys %$n;
                # use s&label?
                sc.sn = G&sn;
                sc.f = a&f;
                sc.gd = a&gd;
                
                sc.imp = s&imp;
                sc.wil = s&wil;
                
                if (Gc&so) { # cluster
                    sc.so = Gc&so;
                    sc.pid = $$;
                    sc.G = G.t;
                }
                my $t = delete(sc.name) || sc.sn;
                my $W = a&W ||= G&Ct:[$t=>''=>{},$sc];
                Ws&f ne a&f && die G&sn ." moves f: Ws&f   to  a&f";
            }
        }
        # Cora KC, fully
        #   needs KA-ing to squish whole picture
        #   is s&front are KC - non sJ, s&top etc are outC
        my $h;
        if (1c&save) {
            Rw GenMeta;
            $h = Rw PostTV;
        }

        # lvre, difference
        #   needs KA-ing to squish and hoist other lv
        # < we could use Cora KC the first time?
        # if your 3c&tapes you should make lv to give to it
        
        if (3c&tape || 1c&tape) {
            Rw PostLV + $h;
        }
    }
    
    }
    
    # should hoist + enclose j/
    if (my $W = a&W) {
        # write-on-wall-able set of objects
        # like a necklace for the universal
        Ws&Jo = s&Jo;
        Ws&J = A.1;
        die "Walling self" if A.1.t eq 'Wall';
        G&e,Wall=>[put=>$W];
        s&W = $W;
    }
    
    s&Cora = [@{os&Cora}];
    
    
    # front has superficialised through KAing (r = r.y.C.y.KC)
    s&front = $r;
    # top has sJ, what came out of OAing, with plane computations
    my $Y = r.y.A;
    my $t = Ys&clones.outC;
    $t || die "No outC?".ki Ys&clones;
    #$t = $r;
    ts&J = A.1;
    s&top = $t;
    s&tw = t.y.tw;
    s&tv = t.y.tv;
    
PostTV: | # make 1-5, whole C
    # from KA c&s (aka KC), for el=8 they replace last KC and sleep
    # this would dodge out the wiring..? safe-ish for flatlist
    #   should probably clone c/sc from sleeping KC
    my $N = [map{ _c&s || die "noC: ".ki$_ }
         map { _.y.KA || die "NoKA: ".ki$_ } @{os&Cora}];
    
    if (0) {
    for my $v (@$N) {
        my $Y = v.y.A;
        my $ind = join('',('  ')x Yc&ind);
        1 && say "Yc&el $ind - ".G&aC,$v ."  ( "
            .ki(v.c)."    %  ".ki v.sc;
    }
    }
    a&f || die "Wants to postTV for non f?";
    a&f &&
    Rw Writer + $N 1 2 3 4 5;
    
PostLV: | # make 7
    my $la;
    
    # get KC lv clone, fill in unimplied placement order
    my @lvre;
    for my $C (@{os&Core}) {
        my $Y = C.y.A;
        my $ind = join('',('  ')x Y.c.ind);
        # C KC fully, _ lv
        my $v = Ys&clones.lv;
        # what changed
        my $d = Yc&diff;
        # previous (amongst everything now) lv should clue gap/ordering
        my $p = C.y.prev;
        my $l = p.y.A.sc.clones.lv if $p;
        # insert it in the over lv sz
        my $i = C.y.up;
        my $L = i.y.A.sc.clones.lv if $i;
        
        undef $p if lc&el ne '8';
        
        if ($p && $p ne $la && Yc&el < 3) {
            push @lvre, $l;
            $L && Ls&z || die "Noup need prevl: ".ki $C;
            @{Ls&z} = map { $_ eq $v ? ($l,$v) : $_ } @{Ls&z};
        }
        push @lvre, $v;
        
        $la = $C;
    }
    # further K for lv
    # holding the lv clone
    A&VAs = [map {
        my $Y = _.y.A;
        if (0){#my $KC = 0 && Ys&clones.KC) {
            my $KC;
            # < takeup KAs if possible
            #   changing C and winding back
            # breaks A&n continuity?
            my $Y = KC.y.KA;
            Yc&s = $_;
            $Y
        }
        else {
            G&A,V=>1=>{%{Y.c},of=>'K',s=>$_},Y.sc;
        }
    } @lvre];
    
    # give LV K A&r = lv clone of root/9
    my $f = $lvre[0];
    f.y.C eq r.y.C || die "notroot: ".ki($f)."\nvs: ".ki$r;
    $r = $f;
    # V is K 1, 5-8
    # K usually 1-59
    _.y.cv = 0.49 for @{A&VAs};
    G&A,$_,8,{r=>$r} for @{A&VAs};
    
    # and assign it a label (Jo)
    each nk,gk,v s&label {
        $r.>$nk.>$gk = $v;
    }}
    
    if (0) {
    for my $Y (@{A&VAs}) {
        my $v = Yc&s;
        my $ind = join('',('  ')x Yc&ind);
        1 && say "Yc&el $ind - ".G&aC,$v ."  ( "
            .ki(v.c)."    %  ".ki v.sc;
    }
    }
    
    # drop Vc&T.not and children from the flat list
    my @vas;
    my $notind;
    for my $V (@{A&VAs}) {
        if (Vc&T.not) {
            $notind = Vc&ind || die "noind for VA Tnot: ".ki $V;
        }
        elsif ($notind && Vc&ind > $notind) {
            
        }
        else {
            $notind = 0;
            push @vas, $V;
        }
    }
    my $N = [map { _c&s } @vas];
    
    Rw Writer + $N 7;
    
    if (r.y.A.c.el eq '1') {
        # < forget ns&jo
        #sayre "Reset lv ".G&sn;
        s&lv = [];
    }
    # may contain s&z and y{} madness
    push @{s&lv}, $N;
    
Tveing: | # nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
    #Rw CloningProcess;
    my $C =
    n Ang
    #n Wall=>V
    Rw Veing $C;
Veing: |
    my $J = s&J;
    
    my $s = Js&s;
    #my $for = "blank/new";
    #my $t = ss&tw.>$for;
    #$s = t.y.C.sc.J.sc.s;
    #$t = ss&tw.has;
    saybl wdump 3, J.I.O.y.tv.muchofany;
    #my $l = #t.y.C.sc.J.sc.
    #s.sc.lv;
    #@$l == 1 || die "many";
    #$l = $l->[0];
    local A.V = 1;
    if (1) {
    for my $v (@{ss&Cora}) {
        my $Y = v.y.A;
        my $ind = join('',('  ')x Yc&ind);
        1 && saygr "Yc&el $ind - ".G&aC,$v ."  ( "
          .($ind eq '  ' && ki(v.c)."    %  ".ki v.sc);
        if (vs&pi eq 'jackpole') {
            my $Y = v.y.C.y.A;
            sayyl "Jack: Y.c.ot ".G&aC,$Y;
            my ($y) = values %{Ys&Tv};
            #my $t = tc&s;
            #sayyl "Jack: y.c.ot ".G&aC,$y;
            #saybl wdump 2, [$t, vs&z];
            #saygr wdump 3, Yc&s.sc.z;
        }
    }
    }
    exit;
VabngaL: |
    A.7.t = 'glang';
    1c&tape = 'W';
    saybl map {G&aC,$_ } @{ A.I.O.sc.z };
    #exit;
    my $C;
    if (0) {
    #A.V = 1;
    n Tvin
    #A.V = 0;
    n Tvin
    n Tvin
    }
    else {
    $C =
    n Wayitis
    #n Wayitis
    #n Wayitis
    }
    sayyl "Alriught!";
    #my $C =
    #n Wall=>V
    my $Y = C.y.A;
    my $t = Yc&T;
    n te=>-od=>{s=>[the=>odd=>'ness']}
    #saybl ki $t
    
Wayitis: |
    u i
    Jc&tape = 'W';
    Jc&save = 'W';
    dami: %fs:9
        # voux
    liquor:
        A.parch++;
    Js&jump++ > 1 && sayre(":Doing it") &&
    more:
        # iof them
    seeeveral:
        # more
Tvin: |
    Jc&tape = 'W';
    Jc&save = 'W';
    
    Js&bowls ||
    n first=>4=>'first',{doge=>{ela=>3}}
    Js&bowls &&
    n first=>3=>'non'=>'fs:50'
    if (Js&bowls < 10) {
        m $_=>''=>($_ > 8 && Js&bowls++).' o','%oth:er,st:uff' for 1..14;
    }
    
    n table=>-tabul=>{vl=>Js&bowls}
    
pi/tabul: | # uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
    n t=>''=>C.t
    m random=>''=>"virtual" for 1..c&vl;
Koul: | # clarify changes to string
    u a
    K 1:
        # is KC
        my $o = C.y.A;
        o.t eq 'o' || die "No oA: ".ki $o;
        
        A&el = oc&el;
        
        # keep an unsquished version
        a&l = C.y.C || die "cant see origin yC: ".ki$C;
        
        if (my $o = C.y.A) {
            # bring memorandum, hops along o
            # < why there's an extra layer of last?
            my $n = os&n = A&n ||= 
                    os&n
                 || oc&last && oc&last.sc.n
                 || oc&last.c.last && oc&last.c.last.sc.n
                 || {};
            # many K-ish may use this continuing n for this C
            #   due to TV/LV separation
            #   would be 1 sip away, K from last s more
            A&last = n.sc.>A.t;
            
            n.sc.>A.t = $A;
        }
        # last K could be on C.y.KA 
        # if clones could copy their later wirings when remade
        C.y->{A.t."A"} = $A;
        
        
        # < making this stick...
        T.not = 1 if C.sc.not eq '1';
        sayyl A.t."omp A&el: ".ki $C;
    
    # a&n continues as long as C doesn't move
    # a&l is the original C we are squishing
    
    K 2:
        # are we being aware of nothing or disappearing
        A&el || die "No el K";
        if (A&el eq '8') {
            # use the encoded one (for wholeness)
            my $z  = A&last.c.s;
            C.c = z.c;
            C.sc = z.sc;
            return T.Z.8 = $A;
        }
            
        # hook Js&Kels.sending.3 = $cb to G&h,$cb
        # when something s&sending changes
        # Js&Keld not limited to the top level
        # 5 means <= 5
        my $l = a&l;
        A&el || die "no rcel";
        if (my $sel = 1s&Kels || 1s&Keld) {
            # limited to those under 9?
            #sayre "Some Kel: ".ki $sel;
            #sayre "For: A&el  ".G&aC,$l;
            $sel = {} unless 1s&Keld || l.y.up eq A&r;
            each k,els $sel {
                exists l.sc.>$k || next;
                each el,do $els {
                    A&el eq $el || A&el eq '2' && $el eq '1' || 
                    $el eq '5' && A&el <= 5 || next;
                    G&h,$do;
                }
            }
        }
        
        A&el  eq '9' # is last KC
             && return T.Z.9 = $A;
    #c K55 figure Line encoding
    #   whole pictures + change want derefing here
    #   
    K 55:
        my $l = a&l;
        # mute refs
        # tells you things that are not there, see o 7 apply
        s&z = delete s&zout if s&zout;
        
        if (my $J = s&J) {
            # scJ could describe it, versions at head/remote
            # place it, in a net, can talk to with the address
            if (s&pi) {
                # implies s&J, which remains in osc C but not Komp
                delete s&J;
                # quiet for insides, should remain with qs
                delete c&s if Js&tv;
            }
            else {
                s&J = Js&name || J.t;
            }
            # W implies J in mo:W:12, they can look it up
            delete s&J if ls&W eq s&J;
        }
        
        # < mute code... but this C ends up in I
        #  maybe it could instruct what to do for encoding to string...
        # see Writer/for-write K5ish for s&coded c&code
        
        my $ok;
        ok.sc.>$_ = 1 for qw'z ip';
        G&oh,$ok,3s&oks if 3s&oks;
        
        for my $nk ('c','sc') {
            my $gh = $C.>$nk;
            my $mute;
            for my $gk (keys %$gh) {
                my $ref = ref $gh.>$gk || next;
                # eg nogindex 
                next if $ok.>$nk && $ok.>$nk.>$gk
                    || $nk eq 'sc' && $gk =~ /ex$/;
                next if $ref eq 'CODE' && $nk ne 'sc';
                # and if in some known universal
                # We stirred index piling into here
                # eg Stripes...
                delete $gh.>$gk;
                $mute.>$gk ++;
            }
            if ($mute) {
                my @gks = sort keys %$mute;
                my $k = 'm'.substr($nk,0,1);
                exists C.c.>$k && die "Komp already c $k: ".ki$C;
                C.c.>$k = "@gks";
            }
        }
        delete C.sc.>$_ for qw'qz';
    #c K6 lv/from within
    # c&Jo = J version
    K 6:
        my $l = a&l;
        my $n = a&n;
        
        # they can look it up
        delete c&Jo if ls&W || ls&qz;
        
        if (ls&qz && s&z) {
            # will be in 1, not in 7
            # because all are flat list now,
            # not the tops and filter with ind in PostLV
            for my $VC (@{s&z}) {
                my $V = VC.y.VA;
                V.t eq 'V' && Vc&of eq 'K' || die "weird VA, VC: ".ki$VC;
                Vc&T.not = 1;
            }
            # < may interfere with something somewhere? test
            sayre "qz ".G&sn .": ".G&aC ."  z=".ki s&z;
            delete s&z;
        }
        
        # 9 knows but does nothing
        if (c&Jo) {
            Rw LVism $l $n;
        }
LVism: | # hoist lv between Js in K 7
    #
    $l = a&l || die "Didnt have al (CyC): ".ki $C;
    #return unless l.y.A.c.ind;
    # < should be able to state z empties?
    delete s&z if s&z && !@{s&z};
    
    return sayre "qz in LVism" if ls&qz;
    # all about how much to include or link
    # the other could have awaiting room
    
            s&z && return sayre "Jo with z: C.t C.y.cv ".ki($l)."\n\n".ki s&z;
            
            my $J = ls&J || return sayre "No sJ for Jo K: ".G&aC,$l;
            my $o = ns&Jo ||= {};
            
            # < have a whole C for a version label
            #   c imp,wil,mat etc versioning
            #   sc forms
            # Jo is c to C and sc to A/s
            if (o.Jo ne c&Jo) {
                # < pick the right page
                my $s = Js&s;
                
                my $lv = ss&lv || die "No lv on J s for K Jo lv: ".ki$s;
                # J are names on a branch, their content evolves
                # imp++ means lv restarts
                # wil++ means lv grows
                # mat++ means out of band stuff changes, xo
                if (o.imp ne ss&imp) {
                    saygr "lv imp reset";
                    o.z = [];
                }
                if (o.lv && o.lv ne $lv) {
                    1 && sayre "lv ref different";
                    o.z = [];
                }
                my @new;
                while (@{o.z} < @$lv) {
                    my $i = @{o.z};
                    my $v = $lv->[$i] || die "nolv? $i: ".ki $lv;
                    push @{o.z}, $v;
                    push @new, $v;
                }
                
                sayyl "Have s: ".G&aC , " o.Jo ne c&Jo,   o.imp = ss&imp,   o.wil = ss&wil";
                
                o.lv = $lv;
                o.imp = ss&imp;
                o.wil = ss&wil;
                o.Jo = ss&Jo;
                
                if (@new) {
                    # lv is [[966],[96],...]
                    s&z = [map { @$_ } @new];
                    C.y.lvz = 1;
                }
                
                saygr "Found: ".G&aC,$C ." can see: ",map{ki$_}@new;
                #delete c&Jo;
            }
            else {
                saygr "Same Jo: C.t C.y.cv @ o.Jo";
            }
            # other hoistings in O 6/s -8, eg xo

    
Writer: | # to make 12345, 7
    # aspecty
    # types <= 5 show whole instant
    #   good for still code, absolute data
    #   shows would be an extending ladder of what is and when
    # 7 shows lv progressing change
    #   good for streaming tiny code changes to remotes
    #   shows are a pool of what is that evolves
    #     which could still have timing
    #     
    # 6 forks, a dir?
    # 8 entanglements/joins, a dir?
    ar.m || die "send m = list,of,types";
    
    my $gd = a&gd; # the bay/B where to find sibling W
    my $f = a&f; # the J's directory
    # and/or
    my $W = a&W; # object for our writings to live on
    
    #A.1 eq A.3 
    1 && saygr "W A.1.t ($f) @{ar.m}   x".@$N;
    
    # types wanted: lines pooled
    my $w = {map{$_=>[]}@{ar.m}};
    # ha pooled (once lines written)
    #  eg 2 can't know about 3 because 3 has to know about 2
    my $h = ar.h || {};
    
    # from C the s
    my $m = s&meta || {};
        
    # writes on the written front/9
    $C = $N->[0] = G&hup,$N->[0];
    
    # ignoring the particular $n, we go:
    #  ub - per C
    #      makes $l with G&Line
    #  in - per C+l
    #    indents (.y.A.c.ind) and pushes to a w.$n [l+]
    #  st - per w.$n [l+]
    #    publishing job
    
    # for G&ind'ing Cthing to flat lists like $N
        my $ub = &Cd{
            my $y = C.y;
            my $Y = y.A;
            # see Tv, or Line know again
            my $el = $Y && Yc&el;
            saybl "For $el ".G&aC,$C;
            # for-write K5ish stuff:
            if (c&code) {
                # they (Believe) can re-eval/re-of it
                delete c&code;
                s&coded = 1;
            }
            my $z = delete s&z;
            my $l = G&Line,$C;
            s&z = $z if $z;
            $l
        };
        
        # append C's Line s to list, indented
        my $in = &NCsi{
            my $Y = C.y.A;
            my $ind = join('',('  ')x (Y.c.ind + $i));
            $s = [split "\n", $s];
            $s = join "\n", map{"$ind$_"} @$s;
            push @$N, $s;
            $s
        };
    
    # storage the bits: h/$hash = content
    my $st = &st{
        $s = join "\n", @$s,'' if ref $s eq 'ARRAY';
        my $ha = slm 9, dig $s;
        my $hf = "h/$ha";
        sayyl "Is is $f / $t -> $hf";
        if ($W) {
            W.y.tw.>$t = G&Ct,[$t=>''=>{s=>$s},{ha=>$ha}];
            #return $ha;
        }
        elsif (!$f) {
            # packing (ub/in) but not storing
            # our works are on s&lv = [[CCCCCC]+]
            # they C.y.Line = string
            return;
        }
        
        `mkdir -p $f/h` if !-d "$f/h";
        write_file("$f/$hf", $s);
        if ($t) {
            `unlink $f/$t` if -e "$f/$t";
            `ln -s h/$ha $f/$t`;
        }
        $ha
    };
    #c writ frequencies
    my $W;
    if (w.4) {
        # the 4: has 9, gist of first t/y
        # add some sc{shape,stringth,c,sc,etc}
        # < histogram and group like things
        # < compress styles
        # and collect W joins for 5
        $W = G&Ct,['W',1];
        for my $C (@$N) {
            my $Y = C.y.A;
            if (s&W) {
                my $D = G&Ct,[C.t,C.y.cv];
                Ds&W = s&W;
                # Scuttle 9->4
                Ds&ha = s&ha if s&ha;
                Dc&Jo = c&Jo if c&Jo;
                push @{Ws&z||=[]}, $D;
            }
            # know only W ^ at depth:
            next if Yc&ind > 1;
            
            my $D = G&Ct,[C.t,C.y.cv];
            # assuming gk is safe to join with -
            # < imply the style's encoding for FactorEase
            # like we can do for Line's
            for my $k (qw'c sc') {
                my $v = $C.>$k || {};
                keys %$v || next;
                D.sc.>$k = join'-',sort keys %$v;
            }
            # seem to prefer ytv than z connection
            # < both
            Ds&zs = @{s&z||[]} if s&z;
            Ds&zs = map{values %$_} values %{C.y.tv} if C.y.tv;
            # < more shape, classify language
            Ds&slines = split "\n", c&s if c&s;
            
            Ds&W = s&W if s&W && s&W ne C.t;
            Ds&ha = s&ha if s&ha;
            
            if (!Yc&ind && C.y.cv == 0.9) {
                Ds&ha = 'HAHAR';
                Dc&Jo = c&Jo if c&Jo;
            }
            $in->(w.4,$C, G&Line,$D );
        }
    }
    if (w.1) {
        # 1/everything
        for my $C (@$N) {
            my $S = $C;
            my @p;
            push @p, "S.t-S.y.cv" while $S = S.y.up;
            my $p = join "/", @p;
            
            my $l = eval { $ub->($C) };
            $@ && die "For $p:\n  C: ".ki($C)."\n$@";
            
            $in->(w.1,$C, $l);
        }
    }
    #c pointpile
    
    if (w.1) {
        # point to object: 1 -> h/$hash
        h.1 = $st->(w.1,'1');
    }
    # meta/5cience behind it: 5
    my $i = G&Ct,[C.t,C.y.cv] if w.5;
    if (w.4) {
        h.1 || die "4 without 1";
        # lum feeling: 4 ~= content, 
        w.4->[0] =~ s/HAHAR/h.1/;
        h.4 = $st->(w.4,'4');
        
        # < Scuttle copy various light things from 9
        is&ha = h.1;
    }
    if (w.5) {
        # 5's belief structure dependagey
        # < modernise
        my $z = [];
        my $me = {%{m.sc||{}}};
        if (me.way) {
            # < won't stay deleted from GenMeta
            delete me.way.>$_ for qw'FishBrains GenMeta NamePosition
                PostK PostO PostTV Writer';
            delete me.way if !keys %{me.way};
        }
        if (my $way = delete me.way) {
            my $w = G&Ct,[w=>1];
            my $wz = ws&z = [];
            for my $pin (sort keys %$way) {
                my $p = G&Ct,[$pin,1];
                push @$wz, $p;
                my $v = $way.>$pin;
                if (keys %$v > 1) {
                    pc&s = $v;
                    ps&way_variants = keys %$v;
                    next;
                }
                (ps&dige,ps&used) = %$v;
                # could be a map to where/who it was used from?
                delete ps&used if ps&used eq 1;
            }
            push @$z, $w if @$wz;
            
            A.1.t =~ /^Took/ && saygr "Haw5ing 1: A.1.t: ".wdump 3, $way;
        }
        
        # other meta stuff
        if (keys %$me) {
            push @$z, G&Ct,[moremeta=>1=>{s=>$me}]
        }
        
        # other W and their ha
        push @$z, $W if @{Ws&z||[]};
        
        is&z = $z if @$z;
        @{w.5} = G&ind,$i,$ub;
        h.5 = $st->(w.5,'5');
        mc&ha = h.1;
    }
    if (w.2) {
        # small status check point: 2 versions 1,4,5
        my $t = G&Ct,[C.t,C.y.cv];
        ts&1 = h.1;
        ts&4 = h.4;
        ts&5 = h.5;
        @{w.2} = G&ind,$t,$ub;
        h.2 = $st->(w.2,'2');
        
        # changelog/tree: 3 -> 2, last 3...
        my $r = G&Ct,[C.t,C.y.cv];
        (my $was = readlink "$f/3") =~ s/^h\///
            if $f && -s "$f/3";
        # < was's 2 may eq twha, when no change, no commit?
        rs&parent = $was if $was;
        rs&2 = h.2;
        @{w.3} = G&ind,$r,$ub;
        h.3 = $st->(w.3,'3');
    }
    
    #c lv
    if (w.7) {
        # 7/changes
        # < log rotating along
        (my $was = readlink "$f/7") =~ s/^h\///
            if $f && -s "$f/7";
        s&parent = $was if $was && c&el > 2;
        s&3 = h.3 if h.3; # commit about
        s&1 = h.1 if h.1; # the whole thing
        for my $C (@$N) {
            my $Y = C.y.A || die "noA: ".ki$C;
            my $S = $C;
            my @p;
            push @p, "S.t-S.y.cv" while $S = S.y.up;
            my $p = join "/", @p;
            
            my $l = eval { $ub->($C) };
            $@ && die "For $p:\n  C: ".ki($C)."\n$@";
            C.y.Line = $l;
            
            $in->(w.7,$C, $l);
            
            # 8ers come back with yers
            # now fold their z down with any yLinez they have
            # to become our yLinez
            # < mysteriously feeding back indentation ($seems_indented)
            #   when 2 imps and 1 doesn't, reading 1's older lv again
            #   fuxed by not indenting the non-last waves of lv
            if (C.y.lvz && c&el ne '8' && c&el ne '9') {
                my $z = s&z || die "noz for lvz: ".ki$C;
                my @Lines;
                my $o = $C;
                for my $C (@$z) {
                    my $lastwave = 1 || $C eq $z->[-1];
                    my $y = C.y.A;
                    eval { C.y.Line = $ub->($C) };
                    $@ && die "For $p:\n  C: ".ki($C)."\n$@";
                     
                    my $s = $in->(w.7,$C,C.y.Line,Yc&ind+1);
                    
                    #1 && saybl "o.t's C.t: $s";
                    #1 && saygr "Adding up $p: C.y.Line\n to: $s";
                    # our indenting of it splits off into Linez
                    # for aboves to grab the lot and indent again
                    push @Lines, $s;
                    my @l = @{C.y.Linez||[]};
                    # < figure why
                    my $seems_indented = 1 if $l[0] =~ /^      /;
                    for my $s (@l) {
                        my $ind = $seems_indented ? 0 : Yc&ind+1;
                        $s = $in->(w.7,{},$s,$ind);
                        #1 && sayyl " o.t o.y.cv (ind=Yc&ind) has C.t has: $s";
                        push @Lines, $s;
                    }
                }
                o.y.Linez = \@Lines;
                # < !Yc&ind/at the top, C.y.Linez could be pointed for others
            }
        }
        h.7 = $st->(w.7,'7');
    }
    $h

