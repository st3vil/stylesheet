ETE: | # philof
    3c&ET.y.next (another ET) accumulates info for next run,
      if there is any, sleep those not mentioned
    
    elvisitivity culminates in some:
      Rw ET $want=[J+]
        update those Js
      
      Rw ET 2
        use ETmode 2
    
    also, 1c&ETmode, strategy to assume sleepingness
        1    sleep based C == drained C
        2    sleep after first bunch of -pi is same
           except where later -pi is s&open to entropy,
           requiring it wakes up to check potential we dont model
           could be coming from w or so, so could be a model...
           then if that s&open is still, everything can sleep (until the next s&open)
ET: | # collecT after e how to refresh
    my $et = 3c&ET || die "noET";
    my $wayby = Rw ef/Bs $t=w 1;
    #$wayby = G&es;
    my $t = et.y.next ||= G&Ct:["after ".$wayby =>''];
    tc&s ||= G&es;
    
    # 
    # 1c&ET &&
    # Rw ET + $wake 2;
    my ($n,$huh) = @{ar.m};
    t.y.cv = "0.$n";
    
    my $wake = ar.wake || [];
    $wake = [$wake] if ref $wake ne 'ARRAY';
    
    if ($n eq '2') { # wake to the smallest j we visited
        if ($J ne $j) {
            push @$wake, $j;
        }
    }
    elsif ($n eq '1') { # wake probably (not definitely) nothing
    }
    else {
        die "What doing?".
        G&give:Budge=>[el=>''=>{s=>[$ar]}];
    }
    
    for my $J (@$wake) {
        my $z;
        z.t = Rw fe/upJpath $J;
        # note what way it came from
        zs&wayby = $wayby;
        push @{ts&z||=[]}, $z;
    }
ETsl: | # mo considers waking up about 4/5
    if (A.1 eq A.3) {
        # would never happen if we localise sleeper inside W
        # can form its own wakeup theories when it IETs
        return
        Rw FourSleep;
    }
    # clues == expectation
    # no clues, wake
    # some clues, sleep
    # clue points here, wake
    
    # what goes in to ET,
    # how ET-ing worked out in the many TE
    
    my $r = 3c&TE; # 3's result
    my $M = rs&z ||= [];
    
    my $R = 1c&TE = # 1's results, as a flatlist on 3's result
    m A.1.t=>''
    my $M = Rs&z ||= []; # random talkylines
    
    
    my $p = 2c&ET; # 2's clues
    my $t = A.1.t; # us as a name
    my $l; # our clue, with t:
    
    my @z = grep{$_} map {
        _.t =~ /^\Q$t\E$/ ? do {
            $l = $_;
            0
        } :
        # shortens their t when in here, keeping y/c/sc
        _.t =~ /^\Q$t\E;?(.*)?$/ ? do {
            my $hash = {%$_,t=>$1};
        } : undef; # not here
    } @{ps&z||[]};
    
    ls&noclue = 1 if !$l; # no direct information (may still have @z)
    
    1c&ET = $l; # clue glues itself onto here (for children)
    Rs&l = $l; # 1c&TE (R) knows ~ 1c&ET (l)
    
    # our clue knows us
    ls&J = A.1;
    Rs&sip = 1c&sip;
    Rs&pi = s&pi if s&pi ;
    
    # upward path?
    my $S = A.1;
    Rs&depth ++ while $S = S.1 ne S.3 && S.2;
    # no sleep allowed
    Rs&imping = 1 if 1c&imping || 2c&imping;
    
    Rs&bowlings = ++1s&bowlings;
    
    # skip if l is specific enough:
    if (@z && !ls&noclue) {
        die "self and other";
    }
    elsif (Rs&imping) {
        lc&want.imping = 5;
    }
    elsif (@z) {
        # for others
        # (osc needed any time @zward changes)
        ls&z = \@z;
        lc&want.children = 5; # wake for someone
        lc&theyllknow = 1;
        m inside=>''=>{}=>'count:'.@z
    }
    elsif (!ls&noclue) {
        # something is in $l
        m awake=>''=>{s=>$l}
    }
    elsif (1s&top) { # non-init ls&noclue
        if (pc&theyllknow) { # but we dont
            # a sibling is awake
            lc&want.dunno = -5;
        }
    }
    else { # init ls&noclue
        # wants to try FourSearch before deciding?
        Rs&init = 'noclue';
    }
    
    2c&ETmode &&
        Rw ETmode $p $l $r $R $M;
    
    ps&last = $l; # for the next sibling
    
    if (lc&want) {
        c&want && die "Merge wants";
        c&want = lc&want;
    }
    
    Rw FourSleep;
    
    # A&awake never works?
    Rc&s = T.Z ? 'sleep':'wake';
    Rs&dec = a&dec if a&dec;
    
    # hook M with many of this function too
    # if the first group of -pis are still the rest can sleep?
ETmode: | # when 1s&ETmode
    # chain reaction strategy
    
    # for taking pictures of last mo C
    my $drop;
    drop.c.want = 1;
    drop.sc.>$_ = 1 for 'J', keys %{3s&vague_sc||{}};
    
    my $vaguen = &C,ands{
        $C = G&hup,$C;
        C.y = {cv=>C.y.cv};
        each nk,gk,v $drop {
            delete $C.>$nk.>$gk;
        }}
        my $s = ki $C;
        # one day o will feed -od
        if ($ands) {
            $s .= "   ".ki c&s;
        }
        $s
    };
    
        if (my $inmode = 2c&ETmode) {
            if ($inmode eq '2') {
                if (my $L = ps&last) {
                    my $j = Ls&J || die "NolastJ";
                    my $c = jc&s;
                    
                    # notice previous things version
                    my $pl = js&s.sc.Jo || die "Unlabelled s: ".ki js&s;
                    my $was = 1s&last_previous_label;
                    1s&last_previous_label = $pl;
                    
                    my $lastC = $vaguen->($c);
                    my $prev_lastC = 1s&last_previous_C;
                    1s&last_previous_C = $lastC;
                    # AND its C, now mo'd
                    #    -origin puts stuff outside (mo C) itself (9->)
                    
                    3s&sentaslop++ ||
                        G&give:Budge=>['slope'=>''=>{s=>$lastC}];
                    
                    if (ps&percolating) { # already changing, until steady?
                        lc&want.perc = 6;
                    }
                    elsif ($was ne $pl) { # changing
                        m percolation=>''=>{was=>$was,now=>$pl}
                        lc&want.percolation = 6;
                        ps&percolating = 1;
                    }
                    elsif ($lastC ne $prev_lastC) { # changing outside of itself
                        m Colation=>''=>{was=>$prev_lastC,now=>$lastC}
                        lc&want.Colation = 6;
                        ps&percolating = 1;
                    }
                    elsif (s&open) { # might change, edge of another system
                        m tocheck=>''
                        lc&want.tocheck = 6;
                    }
                    elsif (ps&stillness) {
                        lc&want.stillpi = -5;
                    }
                    elsif (cs&pi ne s&pi) { # progression of language
                        ps&stillness = 1;
                        lc&want.pistill = -5;
                        m nonfirst_different=>''=>{s=>"cs&pi <=> s&pi"}
                    }
                    else {
                        m nonfirst_nondifferent=>''=>{s=>"cs&pi <=> s&pi"}
                    }
                }
                else {
                    Rs&first_in = '2';
                    lc&want.first = 6;
                }
            }
        }
IET: | # you ET
    A.1 eq A.3 || die "Be W";
    my $et = 3c&ET;
    
    # the map to use this time
    my $l = 3c&ET = et.y.next || {};
    l.t ||= 'default';
    # and some?
    lc&theyllknow = 1 if 1s&top;
    # put ETmode on here?
    #   it could be fired at a particular j as well...
    #   for major and minor messing with the machine of process
    
    # to what will be
    my $r = 3c&TE = {};
    r.t ||= 'default';
    
    # < A.3 local...
    4c&way_foursleep = 'ETsl';
    
    # to show what it went in with
    my $M = Gs&follow ||= [];
    my $i = ++Js&IETs;
    m A.1.t=>''=>{}=>{i=>$i,l=>$l,r=>$r,J=>A.1,mo=>$A}
    
TEing: | # prove ET TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    Rw Tiot;
    Rw GiveTime;
    m SampEl=>-Wug
    m TEsting=>-Wug
    
    n TEoer
    
    
SeeTEer: | # See what ETs been happening
    y.at.bg = '3834';
    Rw Tiot + $nodis=1;
    
    Jc&es = delete Gs&follow if Gs&follow;
    my $s = Jc&es;
    m _.t=>-TE=>{s=>$_} for @$s;
pi/TE: |
    #
    Rw HaveDepth + $depth_add:ss&depth;
    # ident
    Rw Indentity;
    
    ss&z && !@{ss&z} && delete ss&z;
    
    ++A&igke.J;
    #ss&J && ++A&igke.J && # having a J
    #Rw pi/AJ $s:ss&J;
    # SampEl
    
    s&sy &&
        n sy=>o75=>s&sy=>"%hs:7574,ab:1,poi:0,lh:40%,fs:".int(100 / c&depth)

    if (s&sy eq 'r') {
        # on Hut ds (drop sc) doesn't yet remove styles
        y.at.opa = sc&s eq 'sleep' ? 0.6 : 1;
    }
    Rw od/sings + i sip pi dec;
    
    if (!ref sc&s && length sc&s > 40) {
        A&igke.s++;
        n s=>-od_27=>{s=>sc&s},'hs:8,hs:288'
    }
    
    A&asone = 1;
    A&igke.>$_++ for qw'sip l depth z';
    Rw SeeC;
    
    y.n = 6;
    y.u = 67;
    
    m _.t=>-TE=>{s=>$_} for @{ss&z||[]};
    #_s&fs = 8 for @$M;
    map { _s&sy = C.t } @$M if length C.t == 1;
    
    ss&l &&
    n l=>-TE_7=>{s=>ss&l}=>'hue:30'
    
    ss&r &&
    n r=>-TE_71=>{s=>ss&r}=>'hue:-20'
    
    Js&boost &&
    n '^'=>-od_7=>{dl=>2,s=>$s}
od/sings: | # things -od might do but better
    my $style = { # Scuttle stypes
        i => 'cv:2001,prep:+,fs:8,hs:149',
        sip => 'cv:oo9,fs:6,ab',
        pi => 'cv:2001,prep:-,fs:6,hs:149',
        dec => 'cv:2002,fs:7,hs:334',
        mystery => 'fs:26,hs:696',
    };
    for my $m (@{ar.m}) {
        my ($m,$o) = split ':', $m, 2;
        next unless s.sc.>$m;
        my $sc = $style.>$m || style.mystery;
        my $cv = $1 if $sc =~ s/^cv:(\w+),//;
        my $s = s.sc.>$m;
        $cv ||= do {
            $s = "$m: $s";
            27;
        };
        my $n =
        n $m=>$cv=>{s=>$s},$sc
        A&igke.>$m ++; # not later in SeeC
        
        nc&s = delete(ns&prep).nc&s if ns&prep;
    }
    
TEsting: | # prove TEer and TEoer
    # basic $want=[J+] ing, this surrounds it to send elvising in
    n TEerTest
    # ETmode == 2
    n TEoer
TEoaTest: |
    my $mess = Js&set.messings ||= [&{
    
    }, &{
        i.three = '+';
    }, &{
    
    }, &{
        i.three = '^';
        i.four = '~@-@';
    }, &{
    
    }, &{
        _s&size += 10 for @$oi;
    },
    
    ];
    my $bowl = Js&bowls++;
    sayyl "C.t's $bowl";
    if (my $r = $mess->[$bowl]) {
        $r->();
    }
    $mess->[$bowl+1] || A&done++;
    
    1 && sayyl((A&done?"Leaving":"A")." C.t!");
    
    A&done ||
    Rw est/comeback $n=4;
    #T.nose = 3;
TEoer: | # use ET to sleep a workflow
    Rw Tiot;
    Rw IET;
    # become still after continuous bunch of same pis
    Jc&ETmode = 2;
    n A=>o24=>"Another"
    y.at.wi = 30;
    y.at.he = 22;
    #y.at.ab = 1;
    s&bo = '3px solid pink';
    #Rw GiveTime;
    Js&noise = [qw'47 784 8 848 73 6 6262 34 199 1274'];
    3s&vague_sc.bowlings = 1;
    
    my $o = Js&set.one ||= [map{G&Ct,$_ }
        [one=>''=>{}=>'size:34'],
        [two=>''=>{}=>'size:24'],
        [three=>''=>{}=>'size:0'],
    ];
    
    my $oi = Js&set.onetwo ||= [map{G&Ct,$_ }
        [one=>''=>{}=>'size:12'],
        [four=>''=>{}=>'size:12'],
    ];
    
    my $oii = Js&set.onethree ||= [map{G&Ct,$_ }
        [three=>''=>{}=>'size:4'],
    ];
    
    my $i = Js&set.two ||= {two=>'8',three=>'#',four=>"@@@-"};
    
    # makes loop
    Rw TEoaTest + $o $oi $oii $i;
    
    # ground cursor from here
    Rw fe/since;
    
    n galvi=>-TEope_1=>{s=>$o},'qz'
    n swe=>-TEope_11=>{s=>$oi},'qz'
    n porta=>-TEope_12=>{s=>$oii},'qz'
    
    my @z = Rw fe/since their;
    
    n fed=>-TEstr_2=>{s=>\@z},'qz'
    
    n def=>-TEpat_3=>{s=>T.op,style=>$i},'qz,open'
    
    n rota=>-TEgeo_4=>{s=>T.op},'qz'
    
    n expla=>-TEext_5=>{s=>T.op},'top:-20,left:-8,ab,fs:2,zi:-3'
    
    
    
    # yep
    return if Gc&testbeing || Gc&quietbeing;
    
    G&timer,0.1,$_ for &{
        4s&toy->({to=>['SeeTEer']})
    };
    
pi/TEope: | # takes data, elabourates nothing
    s&bowlings = 1s&bowlings;
    y.cyc = 100;
    for (@$s) {
        m _.t=>''=>{}=>{size=>_s&size}
    }
pi/TEstr: | # fill out accordingly
    s&bowlings = 1s&bowlings;
    for (@$s) {
        m _.t=>''=>{s=>join'',('i') x _s&size}
    }
    
pi/TEpat: | # colour accordingly
    s&bowlings = 1s&bowlings;
    s&open = 1;
    T.op = $s;
    $s = c&style;
    for (G&op ) {
        my $C =
        m _.t=>''=>{s=>_c&s} 
        if (my $r = $s.>C.t ) {
            c&s =~ s/i/$r/g;
        }
        s&dis = 2;
        s&ma = 1;
        s&bo = '3px dotted green'
    }
    
pi/TEgeo: | # spaced
    s&bowlings = 1s&bowlings;
    T.op = $s;
    my $n = 3s&noise || die "set 3snoise";
    Js&disls = 3;
    my $dis = &v{
        my $i = $n->[Js&disls++] || $n->[Js&disls = 0];
        my $z = $i * $v;
        $z *= 0.1 until $z < $v * 2;
        $z;
    };
    for (G&op ) {
        my $y = $_;
        $y = y.y.C while y.y.C;
        my $C =
        m _.t=>''=>{s=>_c&s},{%{y.sc}}
        s&left = $dis->(8).'em';
        s&top = $dis->(36).'em';
        s&ab = 1;
    }
pi/TEext: | # creatures
    s&bowlings = 1s&bowlings;
    s&open = 1;
    T.op = $s;
    for (G&op ) {
        my $y = $_;
        $y = y.y.C while y.y.C;
        for my $n (1..15) {
            my $C =
            m _.t."_$n"=>''=>{s=>_c&s},{%{y.sc}}
            s&fs = 22 + (5 * (0.4*$n - 2));
            s&fs *= 2 if $n / 3 =~ /(2|3|4)$/;
            
            s&rad = 14.113 * $n;
            #45 + (3 * (0.4*$n - 3));
            
            s&hue = $n * 33;
            
            s&opa = 4;
            
            #s&hs = '8955';
            
            s&blr = 1.74 * $n if $n =~ /[1234]$/;
            
            s&dos = 'ETvis';
        }
    } 
TEerTest: | # prove TEer and TEoer
    Gc&quietbeing = 1;
    my $i = Js&bowls++;
    my $el = Jc&elvisto ||= [split"\n",<<''
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["ja","0.26"],["ja","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":655,"y":118}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":810,"y":127}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":823,"y":128}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":888,"y":125}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":962,"y":138}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["fo","0.58"],["fo","0.9"],["t","0.1"]],"pagex":600.000015894572,"pagey":0,"s":"","type":"click","x":934,"y":155}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
    ];
    #c v tests
    sayyl "C.t's $i";
    if (!$i) {
        G&elph,TEer=>'W'
    }
    elsif (my $r = $el->[$i-1]) {
        G&e,Bayed=>[s=>$r];
    }
    else {
        A&done++
    }
    1 && sayyl((A&done?"Leaving":"A")." C.t!");
    
    A&done ||
    Rw est/comeback;
    T.nose = 3;
TEer: | # use ET
    Rw Tiot;
    Rw IET;
    #Rw GiveTime;
    
    delete Js&M;
    Rw piFeedTape + $default=luf:-ETcet;
    
    return if Gc&testbeing || Gc&quietbeing;
    
    G&timer,0.1,$_ for &{
        4s&toy->({to=>['SeeTEer']})
    };
pi/ETcet: |
    s&ma = 0.2;
    s&dos = 'ETvis';
    s&fs = s&fis if s&fis;
    delete Js&M;
    Rw piFeedTape;
    n nmow=>o4=>"/",'fs:5'
    n clock=>o5=>Js&bowls++,'fs:7'
    return if @$M;
    if (A.2 eq A.3) {
        n afresh=>9=>'*'=>'fs:33,ab'
        m go=>-ETcet
        m ja=>-ETcet
        m da=>-ETcet
        m fo=>-ETcet
        m la=>-ETcet
    }
    else {
        my $t = slm 6, dig $s;
        n t=>1=>$t=>'dos:ETvis'
        s&remote &&
        n four=>2=>s&remote;
    }
    
    _s&mix = 1 for @$M;
ETvis: |
    my $wake = [];
    push @$wake, $j;
    
    # use something... make this usual change to a j's mo C in j.2...
    my $K = Rw fe/J2C $J:j;
    Ks&fis ||= 20;
    Ks&fis++;
    
    my $S = $K;
    $S = S.y.prev for 1..2;
    if ($S) {
        push @$wake, Ss&J if Ss&J;
        Ss&fis += 10;
    }
    
    #G&give:Budge=>[ffffe=>''=>{dl=>1,s=>[[[j.2,$j]],[[$K,$c]]]}];
    
    1c&ET &&
    Rw ET + $wake 1;
    
    
    
    
fe/J2C: | # the C (now KC) in 2 that invoked 1
    # $C as in 1's pin, after tv'ing, so KC
    #   (KC is top, in style/compression but before refs like sJ get quieted out)
    # elvis wants to shoot changes at tv,
    #   which piFeedTape feeds back into 2's M
    my $j = J.2;
    my $M = Rw fe/fi $C:j stop sz;
    my @S = grep { _s&J eq $J } @$M;
    @S>1 && die "Extra bits! ".ki\@S;
    saybl "Found J.t in j.2: ".@S;
    wantarray ? @S : shift @S
    
    

