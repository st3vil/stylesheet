ET: | # collecT after e how to refresh
    my $et = 3c&ET || die "noET";
    my $wayby = Rw ef/Bs $t=w 1;
    #$wayby = G&es;
    my $t = et.y.next ||= G&Ct:["after ".$wayby =>''];
    tc&s ||= G&es;
    
    # 
    # 1c&ET &&
    # Rw ET + $wake 2;
    my ($n,$huh) = @{ar.m};
    t.y.cv = "0.$n";
    
    my $wake = ar.wake || [];
    $wake = [$wake] if ref $wake ne 'ARRAY';
    
    if ($n eq '2') { # wake to the smallest j we visited
        if ($J ne $j) {
            push @$wake, $j;
        }
    }
    elsif ($n eq '1') { # wake probably (not definitely) nothing
    }
    else {
        die "What doing?".
        G&give:Budge=>[el=>''=>{s=>[$ar]}];
    }
    
    for my $J (@$wake) {
        my $z;
        z.t = Rw fe/upJpath $J;
        # note what way it came from
        zs&wayby = $wayby;
        push @{ts&z||=[]}, $z;
    }
ETsl: | # mo considers waking up about 4/5
    A.1 eq A.3 && return
        Rw FourSleep;
    # if some clues, sleep
    
    my $r = 3c&TE; # the/one's results
    my $M = rs&z ||= [];
    
    my $R = 1c&TE = # our results
    m A.1.t=>''
    my $M = Rs&z ||= []; # random talkylines
    
    
    
    my $p = 2c&ET; # parent/many's expectation
    my $t = A.1.t; # us as a name
    my $l; # our expectation, with t:
    
    my @z = grep{$_} map {
        _.t =~ /^\Q$t\E$/ ? do {
            $l = $_;
            0
        } :
        # shortens their t when in here, keeping y/c/sc
        _.t =~ /^\Q$t\E;?(.*)?$/ ? do {
            my $hash = {%$_,t=>$1};
        } : undef; # not here
    } @{ps&z||[]};
    
    ls&unspec = 1 if !$l; # may not know (may still have @z)
    ls&J = A.1; # our expectation knows us
    ps&last = $l; # it can follow itself up as the next sibling
    1c&ET = $l; # it attaches itself here (for children)
    Rs&l = $l; # 1c&TE (R) knows ~ 1c&ET (L)
    
    # skip if l is specific enough:
    if (@z && !ls&unspec) {
        die "self and other";
    }
    elsif (@z) {
        # for others
        ls&z = \@z;
        lc&want.children = 5; # wake for someone
        lc&theyllknow = 1;
        m inside=>''=>{}=>'count:'.@z
    }
    elsif (!ls&unspec) {
        # something is in $l
        m awake=>''=>{s=>$l}
    }
    else { # ls&unspec, not if @z (or $l) was found
        # (osc needed any time @zward changes)
        if (pc&theyllknow) { # but we dont
            # a sibling is awake
            lc&want.dunno = -5;
        }
    }
    
    if (lc&want) {
        c&want && die "Merge wants";
        c&want = lc&want;
    }
    
    Rw FourSleep;
    
    # A&awake never works?
    Rc&s = T.Z ? 'sleep':'wake';
    Rs&sip = 1c&sip;
    Rs&pi = s&pi if s&pi ;
    Rs&dec = a&dec;
    my $S = A.1;
    Rs&depth ++ while $S = S.1 ne S.3 && S.2;
    
    # hook M with many of this function too
    # if the first group of -pis are still the rest can sleep?
IET: | # singularly you ET
    A.1 eq A.3 || die "Be W";
    my $et = 3c&ET;
    
    # the map to use this time
    my $l = 3c&ET = et.y.next || {};
    l.t ||= 'default';
    
    # to what will be
    my $r = 3c&TE = {};
    r.t ||= 'default';
    
    # should A.3 local...
    4c&way_foursleep = 'ETsl';
    
    # to show what it went in with
    my $M = Gs&follow ||= [];
    my $i = ++Js&IETs;
    m A.1.t=>''=>{}=>{i=>$i,l=>$l,r=>$r,J=>A.1,mo=>$A}
    
TEing: | # prove ET TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    Rw Tiot;
    Rw GiveTime;
    m SampEl=>-Wug
    m TEsting=>-Wug
    
    n TEoer
    
    
TEsting: | # prove ET
    Gc&quietbeing = 1;
    my $i = Js&bowls++;
    my $el = Jc&elvisto ||= [split"\n",<<''
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["ja","0.26"],["ja","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":655,"y":118}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":810,"y":127}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":823,"y":128}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":888,"y":125}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["da","0.42"],["da","0.9"],["t","0.1"]],"pagex":364.444454098925,"pagey":0,"s":"","type":"click","x":962,"y":138}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
        {"c":{"W":"Win","e":{"c":{"s":{"A":0,"C":0,"M":0,"S":0,"p":[["TEer"],["TEer","0.9"],["luf","0.11"],["luf","0.9"],["fo","0.58"],["fo","0.9"],["t","0.1"]],"pagex":600.000015894572,"pagey":0,"s":"","type":"click","x":934,"y":155}},"sc":{},"t":"jse","y":{"cv":""}}},"sc":{},"t":"Win","y":{"cv":""}}
    ];
    #c test
    sayyl "C.t's $i";
    if (!$i) {
        G&elph,TEer=>'W'
    }
    elsif (my $r = $el->[$i-1]) {
        G&e,Bayed=>[s=>$r];
    }
    else {
        A&done++
    }
    1 && sayyl((A&done?"Leaving":"A")." C.t!");
    
    A&done ||
    Rw est/comeback;
    T.nose = 3;
SeeTEer: |
    Rw Tiot + $nodis=1;
    
    Jc&es = delete Gs&follow if Gs&follow;
    my $s = Jc&es;
    m _.t=>-TE=>{s=>$_} for @$s;
pi/TE: |
    #
    Rw HaveDepth + $depth_add:ss&depth;
    # ident
    Rw Indentity;
    
    ss&z && !@{ss&z} && delete ss&z;
    
    ++A&igke.J;
    #ss&J && ++A&igke.J && # having a J
    #Rw pi/AJ $s:ss&J;
    # SampEl
    
    s&sy &&
        n sy=>o75=>s&sy=>"%hs:7574,ab:1,poi:0,lh:40%,fs:".int(100 / c&depth)

    if (s&sy eq 'r') {
        # on Hut ds (drop sc) doesn't yet remove styles
        y.at.opa = sc&s eq 'sleep' ? 0.6 : 1;
    }
    Rw od/sings + i sip pi dec;
    
    if (!ref sc&s && length sc&s > 40) {
        A&igke.s++;
        n s=>-od_27=>{s=>sc&s},'hs:8,hs:288'
    }
    
    A&asone = 1;
    A&igke.>$_++ for qw'sip l depth z';
    Rw SeeC;
    
    y.n = 6;
    y.u = 67;
    
    m _.t=>-TE=>{s=>$_} for @{ss&z||[]};
    #_s&fs = 8 for @$M;
    map { _s&sy = C.t } @$M if length C.t == 1;
    
    ss&l &&
    n l=>-TE_7=>{s=>ss&l}=>'hue:30'
    
    ss&r &&
    n r=>-TE_71=>{s=>ss&r}=>'hue:-20'
    
    Js&boost &&
    n '^'=>-od_7=>{dl=>2,s=>$s}
od/sings: | # things -od might do but better
    my $style = { # Scuttle stypes
        i => 'cv:2001,prep:+,fs:8,hs:149',
        sip => 'cv:oo9,fs:6,ab',
        pi => 'cv:2001,prep:-,fs:6,hs:149',
        dec => 'cv:2002,fs:7,hs:334',
        mystery => 'fs:26,hs:696',
    };
    for my $m (@{ar.m}) {
        my ($m,$o) = split ':', $m, 2;
        next unless s.sc.>$m;
        my $sc = $style.>$m || style.mystery;
        my $cv = $1 if $sc =~ s/^cv:(\w+),//;
        my $s = s.sc.>$m;
        $cv ||= do {
            $s = "$m: $s";
            27;
        };
        my $n =
        n $m=>$cv=>{s=>$s},$sc
        A&igke.>$m ++; # not later in SeeC
        
        nc&s = delete(ns&prep).nc&s if ns&prep;
    }
    
SampEl: | # interaction captura
    # et
    Rw Tiot;
    
    # facts on this G? whose source is $G, as opposed to
    #  Gip - sub-$Gt pieces of the same process
    #  $Gt or some other in-bay,
    #  or out of bay/Gd spec
    # pi for the object that has location sensitive names
    #   be able to imply a domain to all of a kind of names within
    #   and move stuff around sensibly
    #   border crossings
    #   and storing stuff remotely (G&give) such that they know us
    #     and we know ~ what should be there
    
    # stuff we have been elvised
    
    Rw fe/since;
    
    n "Gc&ipd/in"=>-staticlines=>{},'qz'
    
    my @z = Rw fe/since their nonqz their;
    
    n tail=>-od=>\@z
    for (@z) {
        next if _c&s =~ /"p":\[\["SampEl"]/;
        n _.t=>-json=>{s=>_c&s},'qz'
        _.y.A || die "noya?";
        A.tsource ||= _.y.A.1;
    }
    
    my @z = Rw fe/since their;
    n jsons=>-od=>\@z
    for (@z) {
        n _.t=>-meaning=>{s=>_c&s}
    }
    my @z = Rw fe/since -;
    n thence=>-od=>{s=>\@z}
    
    
    if (my $t = A.tsource) {
        $t = Rw fe/fi $C:t stop;
        t.y.tw || die "notw del ".ki$t;
        1s&json = join "", map{"$_\n"}
            map{_c&s || "OHNO: _.t"}
            map{ t.y.tw.>_.t } @z;
        n json=>-tin_o23=>{}=>'fs:4'
    }
    
    
    erh:
        GHere
pi/staticlines: | # lise and -tail pile
    n $s=>-lise=>{},'qz'
    
    my @z = G&op;
    for (@z) {
        n _.t=>-tail=>{s=>_.t}
    }
    
fe/since: | # returns things from ground since last since
    my $g = A.ground || die "ngorund";
    my @z = @{gs&z||[]};
    if (my $s = a&last_since) {
        while (@z) {
            $s eq shift(@z) && last;
        }
    }
    a&last_since = $z[-1] if @z;
    
    # not od
    @z = grep {_s&pi ne 'od'} @z;
    
    for (@{ar.m||[]}) {
        if ($_ eq 'their') {
            # wanted their C, not their C
            @z = map {
                my $M = Rw fe/fi $C:_ sJ stop sz;
                @$M
            } @z;
        }
        elsif (/^non(\w+)$/) {
            my $notsc = $1;
            @z = grep { !exists _.sc.>$notsc } @z;
        }
        else {
            die "since clause $_";
        }
    }
    
    @z
    
    
pi/tail: | # reading a file continuously
    y.cyc = 1000;
    -f $s || die "send file not $s";
    if (1) {
        my $s = read_file($s);
        for my $l (split "\n", $s) {
            my $dig = slm 9, dig $l;
            m $dig=>''=>{s=>$l}
        }
        return;
    }
    
    my ($ino,$size) = (stat $s)[1,7];
    if (1s&ino && 1s&size) {
        delete 1s&filehandle if 1s&ino ne $ino || 1s&size > $size;
        delete Js&M;
    }
    (1s&ino,1s&size) = ($ino,$size);
    
    my $h = 1s&filehandle ||= do {
        open(my $h, '<', $s)
             || die "$s open fail: $!";
        $! && sayre "$s open noise: $!";
        $h
    };
    
    my $M = Js&M ||= [];
    # only does one...
    
    while (1 || !eof $h) {
        my $l = readline $h;
        length $l || last,
        n nothingmr=>''=>"No more"
        my $dig = slm 9, dig $l;
        m $dig=>''=>{s=>$l}
    }
    
    n seeings=>-od=>{s=>wdump 2, $h};
    
    @{ar.M} = @$M;
pi/json: | # decode c&s to data.c.s
    my $t = C.t;
        if ($s =~ /^(\[|\{)/) {
            my $C = eval { djson $s };
            if ($@) {
                sayre "NOT json C: $_";
                $@ = '';
                return;
            }
            $C = G&Ct,$C if ref $C eq 'ARRAY'; # TODO may be z
            #sayre "Amos: ".wdump 3, [$s, $C, C.c.e];
            
            n $t=>''=>{s=>$C}
        }
        else {
            die "Strange: $s";
        }
pi/meaning: | # unpack what it is and why, W/e/us
    ref $s eq 'HASH' || return
        n "Not a hash: ",-od=>{s=>$s}
    my $c = {C=>$s};
    my $e = c.e = sc&e if sc&e;
    c.us = ec&us if ec&us;
    c.es = ec&s if ref ec&s eq 'HASH';
    c.ep = c.es.p if c.es.p;
    $s = c&s = $c;
    c&dl = 1;
    # apply schemas ^
    if (c.ep) {
        my @p;
        for (@{c.ep||[]}) {
            my ($t,$cv) = @$_;
            push @p, $t unless @p && $t eq $p[-1];
        }
        n pointer=>18=>join("/",@p),'fs:12,ma:0.3';
    }
    if (my $h = c.es || c.us) { # win upgrase jse c&s=json to c&us:data
        my $hav = join' ',grep{$_}(map{$h.>$_ && $_}qw'S C A M'), h.type;
        n nuance=>181=>$hav,'fs:8,ma:0.3,hs:999,fw:3';
    }
    
    local c&pi = 'od'; # messy, cos v many-maker copies what we are
    Rw pi/od + $s;
TEoer: | # use ET to sleep a workflow
    Rw Tiot;
    Rw IET;
    y.at.wi = 30;
    y.at.he = 22;
    s&bo = '3px solid pink';
    #Rw GiveTime;
    Js&noise = [qw'47 784 8 848 73 6 6262 34 199 1274'];
    
    my $o = Js&set.one ||= [map{G&Ct,$_ }
        [one=>''=>{}=>'size:34'],
        [two=>''=>{}=>'size:24'],
        [three=>''=>{}=>'size:0'],
    ];
    
    my $oi = Js&set.onetwo ||= [map{G&Ct,$_ }
        [one=>''=>{}=>'size:12'],
        [four=>''=>{}=>'size:12'],
    ];
    
    my $oii = Js&set.onethree ||= [map{G&Ct,$_ }
        [three=>''=>{}=>'size:4'],
    ];
    
    Rw fe/since;
    
    n galvi=>-TEope_1=>{s=>$o},'qz'
    n swe=>-TEope_11=>{s=>$oi},'qz'
    n porta=>-TEope_12=>{s=>$oii},'qz'
    
    my @z = Rw fe/since their;
    
    n fed=>-TEstr_2=>{s=>\@z},'qz'
    
    my $i = Js&set.two ||= {two=>'8',three=>'^',four=>"@@@-"};
    
    n def=>-TEpat_3=>{s=>T.op,style=>$i},'qz'
    
    n rota=>-TEgeo_4=>{s=>T.op},'qz'
    
    n expla=>-TEext_5=>{s=>T.op},'top:-66,left:-8,ab'
    #,'qz'
    
    delete Js&M;
    #Rw piFeedTape + $default=luf:-ETcet;
    
    
pi/TEope: | # takes data, elabourates nothing
    y.cyc = 100;
    for (@$s) {
        m _.t=>''=>{}=>{size=>_s&size}
    }
pi/TEstr: | # fill out accordingly
    for (@$s) {
        m _.t=>''=>{s=>join'',('i') x _s&size}
    }
    
pi/TEpat: | # colour accordingly
    s&open = 1;
    T.op = $s;
    $s = c&style;
    for (G&op ) {
        my $C =
        m _.t=>''=>{s=>_c&s} 
        if (my $r = $s.>C.t ) {
            c&s =~ s/i/$r/g;
        }
        s&dis = 2;
        s&ma = 1;
        s&bo = '14px dotted green'
    }
    
pi/TEgeo: | # spaced
    T.op = $s;
    my $n = 3s&noise || die "set 3snoise";
    Js&disls = 3;
    my $dis = &v{
        my $i = $n->[Js&disls++] || $n->[Js&disls = 0];
        my $z = $i * $v;
        $z *= 0.1 until $z < $v * 2;
        $z;
    };
    for (G&op ) {
        my $y = $_;
        $y = y.y.C while y.y.C;
        my $C =
        m _.t=>''=>{s=>_c&s},{%{y.sc}}
        s&left = $dis->(8).'em';
        s&top = $dis->(36).'em';
        s&ab = 1;
    }
pi/TEext: | # creatures
    s&open = 1;
    T.op = $s;
    for (G&op ) {
        my $y = $_;
        $y = y.y.C while y.y.C;
        for my $n (1..16) {
            my $C =
            m _.t=>''=>{s=>_c&s},{%{y.sc}}
            s&fs = 35 + (2 * (0.4*$n - 6));
            s&fs *= 2 if $n / 3 =~ /(3|4)$/;
            
            s&rad = 0.113 * $n;
            #45 + (3 * (0.4*$n - 3));
            
            s&hue = $n * 33;
            
            
            s&hs = '8955';
            
            s&blr = 1.74 * $n if $n =~ /3$/;
        }
    } 
TEer: | # use ET
    Rw Tiot;
    Rw IET;
    #Rw GiveTime;
    
    delete Js&M;
    Rw piFeedTape + $default=luf:-ETcet;
    
    return if Gc&testbeing || Gc&quietbeing;
    
    G&timer,0.1,$_ for &{
        4s&toy->({to=>['SeeTEer']})
    };
pi/ETcet: |
    s&ma = 0.2;
    s&dos = 'ETvis';
    s&fs = s&fis if s&fis;
    delete Js&M;
    Rw piFeedTape;
    n nmow=>o4=>"/",'fs:5'
    n clock=>o5=>Js&bowls++,'fs:7'
    return if @$M;
    if (A.2 eq A.3) {
        n afresh=>9=>'*'=>'fs:33,ab'
        m go=>-ETcet
        m ja=>-ETcet
        m da=>-ETcet
        m fo=>-ETcet
        m la=>-ETcet
    }
    else {
        my $t = slm 6, dig $s;
        n t=>1=>$t=>'dos:ETvis'
        s&remote &&
        n four=>2=>s&remote;
    }
    
    _s&mix = 1 for @$M;
ETvis: |
    my $wake = [];
    push @$wake, $j;
    
    # use something... make this usual change to a j's mo C in j.2...
    my $K = Rw fe/J2C $J:j;
    Ks&fis ||= 20;
    Ks&fis++;
    
    my $S = $K;
    $S = S.y.prev for 1..2;
    if ($S) {
        push @$wake, Ss&J if Ss&J;
        Ss&fis += 10;
    }
    
    #G&give:Budge=>[ffffe=>''=>{dl=>1,s=>[[[j.2,$j]],[[$K,$c]]]}];
    
    1c&ET &&
    Rw ET + $wake 1;
    
    
    
    
fe/J2C: | # the C (now KC) in 2 that invoked 1
    # $C as in 1's pin, after tv'ing, so KC
    #   (KC is top, in style/compression but before refs like sJ get quieted out)
    # elvis wants to shoot changes at tv,
    #   which piFeedTape feeds back into 2's M
    my $j = J.2;
    my $M = Rw fe/fi $C:j stop sz;
    my @S = grep { _s&J eq $J } @$M;
    @S>1 && die "Extra bits! ".ki\@S;
    saybl "Found J.t in j.2: ".@S;
    wantarray ? @S : shift @S
    
    

