Ch: | # swim channel
    G&heading,'Hz:50';
    G&u,['NutIns'];
    G&clusp;
    # fact cheque ### #
        # 2d39674e5fe7 ##
    # G&t/F thing that blocks: #!
    $n =
    n Ventur V
    $j = ns&J;
    !j and return n waits 1 s:waits %
    $s = js&s;
    !s and return n waits 1 s:waits %
    
    each il ss&lv {
        $l;
        try {
        $l = G&Serialise,l;
        }
        catch (er) { l = "Error: "+er+": "+ki(l) }
        $n =
        n toL 15 $s:l %hue:1$i+9deg,ws:pre,dis:block,ma:1em
        n.y.cv += 0.015 * i;
    }
j/en/Teev: | # string t,s for N
    $M = [];
    each iC N {
        $ts = [C.t,c&s];
        # if any insides \W, throw if empty t?
        $en
        each is ts {
            !s and debugger;
            !s.match(/^[\/\w]+$/) and en = ts
        }
        en and M.push(enj(en)); continue
        M.push(ts.join("\t"));
    }
    return M.join("\t");
j/de/Teev: | # N C t,s for s 
    # slightly toLines, for t and y
    $N = [];
    # TODO way sometimes gets c&code_args = 's' but c&code = acgtar?
    !s.split and s = ar.s;
    s = s.split("\t");
    while (s.length) {
        $k = s.shift();
        $v;
        if (k.match(/^\W/)) {
            k = dej(k);
            k.length != 2 and throw "Funny: "+k, s
            k = k[0];
            v = k[1];
        }
        else {
            v = s.shift();
        }
        $d = G&Cye,[k,''];
        N.push(d);
        null == v and continue;
        if (ar.to == 'cv') {
            d.y.cv = v || 1;
            while (d.y.cv >= 1) {
                d.y.cv *= 0.1
            }
        }
        else { dc&s = v }
    }
    return N
p/en/Teev: | # string t,s for N
    return join "\t", map{
        my $ts = [_.t,_c&s]; 
        # if any insides \W, throw if empty t?
        my $whack = 
        grep{ !/^[\/\w]+$/ }@$ts;
        $whack && sayyl "Was whack: ".wdump 2, $ts;
        $whack ? sjson $ts : join "\t", @$ts
    }@$N;
p/de/Teev: | # N C t,s for s 
    # slightly toLines, for t and y
    my $N = [];
    $s = [split "\t", $s];
    while (@$s) {
        my $k = shift @$s;
        my $v;
        if ($k =~ /^\W/) {
            $k = djson($k);
            @$k != 2 && die "Funny: @$k";
            ($k,$v) = @$k;
        }
        else {
            $v = shift @$s;
        }
        push @$N, G&Ct,[$k,'',{s=>$v}]
    }
    return $N
Spade: | # serve Shovel, bulk version checkings
    # to allow stream/trust ghost happenings
    # say what is changed only
    # u allows transport as <script src=/js/$t>, usually
    #   can insist on being a J "present", T "ing", G "host"
    #  implies k:v resolutions of itselves to be t:s&v or so
    get 'Spade' => &c{
        my $r = {};
        if (my $s = $c->param('u')) {
            my $N = Rw p/de/Teev $s;
            for my $D (@$N) {
                my $C = G&Ct,[D.t,'',{head=>1}];
                my $R = Rw get/js $C;
                # see G
                Rs&ver eq Dc&s && next;
                push @{r.u ||= []}, G&Ct,[D.t,'',{s=>Rs&ver}];
            }
        }
        if (my $s = $c->param('w')) {
            my $N = Rw p/de/Teev $s;
            for my $D (@$N) {
                my $t = D.t;
                $t =~ s/\W+/-/g;
                my $w = G&t,w=>$t;
                # could give them a dig for JaBabz...
                #  Normal could have it
                ws&dige eq Dc&s && next;
                push @{r.w ||= []}, G&Ct,[D.t,'',{s=>ws&dige}];
            }
        }
        #1 && saybl "Javo: ".wdump 4, $r;
        my $s = join "\n", grep{$_} map {
            my $v = $r.>$_;
            if ($v) {
                "$_: ".
                Rw p/en/Teev $N:v;
            }
        }sort keys %$r;
        $s ||= "OK";
        $c->render(text => decode_utf8($s));
    };
    
Shovel: | # mind remote things
    # tend to possible ghost change
    # import things prior to testing...
    G&heading;
    G&u,['MelTest'];
    G&u,['NutIns'];
    G&clusp;
    ys&mah = '10em';
    # #
    # take given names
    1s&ein.ready = &acgts{
        1s&question_was = s;
        # and de-Teev it, as s&u is stored as Teev
        # < make y the version and network,
        #   have a mass t/y form in toLines
        s = $.extend({},s);
        c&e.c.s = s;
        each pN s {
            typeof N == 'object' and continue
            s[p] = G&way,'j/de/Teev',{s:N}; #]
        }
        1s&question = s;
        delete 1s&answer;
        upda().c.fully = 1;
    };
    # map mind, give names
    1s&ein.refresh = &acgts{
        delete 1s&question;
        delete 1s&answer;
    };
    # a wave of update (fully=question is a commission, ensure all loaded)
    #  waits for 1s&answer to exist
    #  then does A:u' or G&way noop, watches them complete
    $upda = &c{
        $cv = 7 + G&desca,Math.random();
        return 1s&updater = G&Cye,['updating',cv,{pi:'updater'}];
    };
    # download name changes
    1s&ein.update = &acgts{
        upda()
    };
    # download all names
    1s&ein.cache = &acgts{
        upda().c.fully = 1;
    };
    
    #

    G&S;
    #ys&over = 'scroll';
    #G&way,'t/t_wayttl',ar;
    
    # Babz &question -> 1s&question, knowingly
    # has phases of stuff
    # advertised domes, to blow away/sum/src-check as well
    
    if (!1s&question) {
        # scan inbound culture
        ar.faulty = 1;
        G&way,'S/Ghosts',ar;
    }
    
    # drawing
    if (0) {
    each tN 1s&ghost_tz {
        $i =
        e $t 1
        is&z = N;
        
        $comp = &C{
            c&s and c&s = c&s.length;
        };
        try {
            $l = G&Serialise,i,comp;
        }
        catch (er) {
            l = "Error: "+er+": "+ki(i)
        }
        #t == 'w' and continue
        m $t  $s:l %hue:150deg,ws:pre,ma:1em,fs:22%
    }
    }
    # TODO dome/section off,
    #   so it happens until completed syncronously
    #   question formulation happens once per thing...
    #   a slight o (that s might use) of the question dome's things
    #     will give way
    # come back with change
    if (!1s&answer && !A&mish) {
        G&way,'Q/Ghosts',ar;
        A&mish = 1;
    }
    
        n question -jod_05 $s:1s&question,dl:214 %fs:40%
        n answer -jod_05 $s:1s&answer,dl:214 %fs:70%
    
    n refresh 5 s:re %doe
    n update 5 s:up %doe
    n cache 5 s:ca %doe
    
    1s&updater and G&n,1s&updater
    
    M.map(&s{ ss&dis = 'block' });
    
    # TODO and as a tool for Expect, to check W
    # G&S like G&F but for serialising apart? (1-5 even)
    # G&U like G&F but for reflecting together?
    # TODO and a tool for W difference
pi/updater: | # mind updates many, async
    # similar to/uses NutMinds
    $an = 3s&answer;
    !an and G&TuneTimeMachine:"Need answer"
    c&fully and an = 3s&question
    1s&answer != an and delete 1s&updates;
    1s&answer = an;
    
    if (!1s&updates) {
    ~>39 Generating update:
    $z = []; # to be 8
    $al = 1s&already = {};
    each pN an {
        # build index of answer
        # an = question when inhaling names
        $sw = 3s&answer[p];
        $tw = {};
        each in sw {
            tw[n.t] = n;
        }
        # track things we had already:
        $already = al[p] = [];
        each in N {
            $t = n.t;
            if (p == 'u') {
                # A:u's may resync
                4s&mind ||= {};
                $Y = 4s&mind[t];

                if (!Y) {
                    throw "Updating nonexisting mind", t
                    $C = G&Cye,[n.t,''];
                    # being stylehut means javascript
                    !c&I and c&W = 'javascript';
                    Y = G&Aye,'u',2,{s:C};
                }
                else {
                    # had, not answered for, ver as questioned
                    if (!tw[n.t] && Ys&v == nc&s) {
                        already.push(n.t);
                        continue
                    }
                }

                # shelve
                4s&mind[t] = Y;

                # wake us when it completes
                #Ys&N ||= [];
                #Ys&N.push(A);

                # them
                z.push(Y);
            }
            else
            if (p == 'w') {
                $lies = &w{
                    # make way last ages without check
                    ws&now = G&time + 3600;
                };
                # get thing
                $w = G&t,'w',t;
                # is it already?
                if (w) {
                    # and not answered for, ver as questioned
                    if (!tw[n.t] && ws&dige == nc&s) {
                        lies(w);
                        already.push(n.t);
                        continue
                    }
                    # make sure it updates
                    ws&now = 1;
                }
                $C = G&Cye,[t,'',{W:'w'}];
                $Y = G&Aye,'wu',0,{s:C};
                Ys&ready = 0;
                z.push(Y);
                
                if (w) {
                    # so we can talk about the wrong thing
                    Yc&s = w;
                }
                
                # sub to isolate the many variables of t
                $t_w = &Y,t{
                # < G& should treat cb consistently sync
                #   only cb='noop' avoids doing the way
                #   cb!=&s{} should cb instead, assuming it G&ways
                #   cb=&s{} should s = return value of way
                $cb = &{
                    Ys&ready = 1;
                    Y.cv = 0.8;
                    $w = G&t,'w',t;
                    lies(w);
                    Yc&s = w;
                    ~>48 wdone: C.t, ki(w)
                    
                };
                G&way,t,{},cb;
                };
                t_w(Y,t);
            }
            else {
                throw "What type", p
            }
        }
    }
    1s&updates = z;
    }
    #c show update !
    # < unifying ws&now and us&now, will happen in s&in
    # < things pinned to their version able to leave
    if (1s&already)
        n already -jod $s:1s&already,dl:4 %
    
    # watch A
        $not;
        # check u' 8
        each iY 1s&updates {
            # u' 8 checks the linkage/version on some object
            # winds back to 3 if not
            Yc&T and G&thro,Y,8;
            $n = Yc&s;
            
            $verbit = Y.t == 'u' ? ',v:'+ns&v : ',dige:'+ns&dige;
            
            if (Y.t == 'u') {
            # should have a reliable way to hang hooks on an A...
            # when u' get to 8, lie about expiry date
            # much like w does above, but we catch u here, while "in"
            # (their ttl last 2x as long anyway)
                # lies3
                !Ys&sabotagi and Ys&now = G&time + 3600;
                Ys&sabotagi = 1;
            }
            
            $s = ki(Y,2)+" "+n.t+"  %ready:"+Ys&ready+verbit;
            $t = i+"thji";
            m $t  $s:s %dis:block,fs:70%
            #m $t  $s:ki(n,4) %dis:block,hue:100deg,fs:60%
            Y.cv < 0.8 and 4s&N.push(Y); not = 1;
        }
        if (not)
            m waits 1 s:waits %
        if (!not)
            m ready 1 s:ready %fs:300%
Q/Ghosts: | # check t:ver ghost versions
    1s&ein.answer = &acgts{
        ~Passad: ki(s)
        1s&answer = s;
        #G&e,[A.1.t]
    };
    # need this later, async in done() forgets to answer
    # makes an 's.split not function' error?
    # < an all-callbacks system?
    G&way,'j/de/Teev',{},'noop';
    
    $q = 1s&question;
    q = $.extend({},q);
    each ts q {
        q[t] = G&way,'j/en/Teev',{N:s};
    }
    1s&quested = q;
    
    $done = &s,c{
        ~>79 Q/Ghosts answer: A.1.t, s.length
        $r = {};
        s == 'OK' and s = '';
        s = s.split("\n");
        $lt = /^(\w+): /;
        each iz s {
            z.length == 0 and continue
            $m = z.match(lt);
            !m and throw "Invalid pasam: "+ki(s)
            $t = m[1];
            z = z.replace(lt, '');
            r[t] = G&way,'j/de/Teev',{s:z};
        }
        #1s&answer = r;
        # elvising it Js
        $e = G&Cye,['answer','',{s:r}];
        G&e,['Shovel'],e
    };
    #~>79 Q/Ghosts asking: A.1.t
    G&question,'Spade',q,done;
    
    
S/Ghosts: | # scan 4 for import/ghost versions
    # ar.drawing - for marks on the ground
    # two types of G-trace,
    # < one type with many types within
    $de = {w:[],u:[]};
    # u/mind
    each tY 4s&mind {
        $n = Yc&s;
        ns&v == 3 and continue;
        !Ys&now || ns&now and throw "C changed"
        
        de.u.push(n);
        
        #m $t+"mind"  $s:ki(n) %
        #m $t+"mindaye"  $s:ki(n.y.A) %hue:50deg,ml:1
    }
    
    # and way
    $way = A.5.I.w;
    !way and throw "w where?"
    each tC way.y.tw {
        de.w.push(C);
        
        #m $t+"way" $s:ki(C.sc,4) %hue:250deg
    }
    
    
    #n minds -h1
    #n minds -jod $s:de.u %
    
    #n way -h1
    #n way -jod_04 $s:de.w %fs:25%
    
    $q = {}; # type: N C(t,s=version)+
    each tN de {
        q[t] = N.map(&C{
            $s = t == 'w' ? s&dige : s&v;
            return G&Cye,[C.t,'',{s:s}]
        });
    }
    if (ar.faulty) {
    each tN q {
        $c = N[0];
        cc&s = (cc&s+'').replace(/\w/,'qua');
    }
    }
    
    each tN q {
        $tw = {};
        $tl = [];
        each in N {
            tw[n.t] = n;
            tl.push(n.t);
        }
        tl = tl.sort();
        N = tl.map(&s{ return tw[s] });
        q[t] = N;
    }
    # ki could almost encode all this...
    #n wayts -jod_04 $s:q,dl:14 %
    
    # u:[] of A:u's C, asking for cjs or so
    # w:[] of way, s&dige version, c&s the code, etc
    1s&ghost_tz = de;
    # type: t v( t v)* string packed name + versioning, de/Teev
    1s&question = q;
    return q
pi/Cod: |
    ys&dis = 'block';
    G&n,['t',0.01,{s:C.t},{hue:'60deg'}];
    
    c&v and G&n,['v',0.02,{s:c&v},{hue:'80deg'}];
    
    
    G&n,['Thing',3,{s:ki(c&s,c&dl||3)}];

    #
pi/h1: |
    $s = c&s || C.t;
    delete c&s;
    $n = G&n,['t',0.01,{s:s},{blr:'2px',zi:-20}];
    $size = A.1 == A.3 ? "200" : "150";
    ns&fs = size+'%';
    ns&mt = '-0.5em';
    ns&dis = 'block';
t/t_wayttl: | # G&ting used by G&quest_w
    G&heading;
    G&u,['NutIns'];
    G&clusp;
    
    1s&step ||= 0;
    1s&step++;
    
    1s&bits ||= [];
    $b = 1s&bits;
    $t = G&Cye,["try"+1s&step,2];
    
    try {
        $re = G&quest_w,'t/Serialise';
        tc&s = re;
    }
    catch(er) {
        ts&er = er.message;
        #throw er
    }
    
    m $t.t 4 $s:ki(t) %hue:1$1s&step+9deg,ws:pre,dis:block
    b.push(M.pop());
    each ip b {
        n $p
    }
    n toL 15 s:sta %hue:139deg,ws:pre
    
    
    1s&step < 8 and T.yl = 2000;
    if (T.yl) {
        $loop = 1s&loop = Math.random();
        G&yl:T.yl,&{ A.4 == G.DNS[A.4.t] && loop == 1s&loop && G&e,[J.t] };
    }
    else {
        
    }
    

