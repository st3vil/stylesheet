Wed: |
    # use Mojo, serve ghost/
    saygr "Being Wed in ".(Gc&ipd || Gc&dir);
    u Styleslops
    
    use Mojolicious::Lite;
    use MIME::Base64;
    push @{app->static->paths}, '/home/s/styleshed/public';
    app->secrets(["nothing"]);
    # divert mojo log statements from our err channel
    app->log->path((Gc&ipd || Gc&dir)."/mojo\.log")
        if Gc&dir || Gc&ipd;
    
    
    no warnings qw(uninitialized redefine);
    
    #G.c.listen = readlink('listen') if -l 'listen';
    my $s = Gc&bay . '-Wed';
    my $port = Rw Numstring $s;
    Gc&listen = '127.24.35.46:'.$port;
    my $s = Gc&listen || "s:10094";
    $s = "http://$s" if $s !~/^http:\/\//;
    
    S
    # forever
    n Baye
    
    # to remain verbose
    my $A = G&A,'requesto';
    A.V = 1;

    get '/' => &c{
        my $U = G&t,html=>'index';
        my $s = Uc&s;
        $s =~ /html/ || die "Not html? ".ki $U;
        sayre "Giving start";
        $c->render(text=>$s);
    };
    
    get '/thestart' => &c{
        my $i = $c->param('step') || 0;
        sayre "T wants to start at $i";
        my $next = "/thestart?step=".($i+1);
        my $s = Rw StartHut $i
            || return
                $c->render(text=>"document\.title = 'Gc&bay';"
                    ."G\.h(A,C,G,T,'c','started');"
                    ."A\.sc\.start\.push('/andnow');");
        $c->render(text=>"A\.sc\.start\.push('$next');\n$s");
    };
    
    get '/andnow' => &c{
        sayre "Andnow!";
    };
    
    # handlers for image receiver
    Rw Tism;
    
    websocket '/s' => &s{
        1 && sayyl "Connect!";
        die "No GWebsock yet" unless G.Websock;
        G.Websock->($s);
    };
    
    Gc&clockon = &{
        Gc&startedclockalready ++ && return sayre "Trying to start again";
        1 && saybl "Starting  G.t     listens: $s";
        1 && saygr "Appstart: ". app->start('daemon', '--listen' => "$s");
    };
    
    # then later within the timer...
    
    my $txm = 1s&txm ||= [];
    my $pend = 1s&pending ||= [];
    my $rec = 1s&recent_ha ||= {};
    # handle each...
    G.Websock = &s{
        1 && say "Web is socked!";
        my $tx = $s->tx;
        push @$txm, $tx;
        my $addr = $tx->remote_address;
        Mojo::IOLoop->stream($tx->connection)->timeout(300000);
        $tx->max_websocket_size(512000);
        
        $s->on(message => &M,m{
            #}
            $m = encode_utf8($m);
            1 && sayyl "Message from $addr ".$m;
            
            my $ha = dig $m;
            $rec.>$ha ++ && sayre("Duplicate") && return
                Rw linkrement request_dupe;
            G&timer,0.3,$_ for &{ delete $rec.>$ha };
            
            
            my $d = eval { djson $m };
            $@ && die "Message doesnt decode: $@\n\n$m";
            
            ref $d ne 'HASH' && return saybl "Weird message: $m";
            
            
            if (my $W = d.W) {
                -d $W || die "Not a host: $W";
                my $in = "$W/in";
                my $s = G&Ct,[Win=>[jse=>''=>{s=>$d}]];
                write_file($in,{append=>1},sjson($s)."\n");
                sayre "sent $W: ".ki $d;
            }
            else {
                sayre "freak e: ".ki $d;
            }
        });
        
        $s->on(finish => &M,code,reason{
            @$txm = grep { $_ ne $tx } @$txm;
            1 && sayre "Gone: $addr $code $reason";
        });
        
        G.Websup->() if G.Websup;
        
        if (@$pend) {
            saygr "Sending pending messages: ".@$pend;
            G.Websen->($_) for @$pend;
            @$pend = ();
        }
    };
    
    G.Websen = &m{
        # $m = decode_utf8($m); # comes from inside
        unless (@$txm) {
            sayre "No client, pending: ".slim 50, $m;
            push @$pend, $m;
            return;
        }
        1 && saybl "Sending ".slim 2050, $m;
        for my $tx (@$txm) {
            $tx->send($m)
        }
    };
Wedpagery: | # minimal page that sucks in more stuff from Stylehut
    # use the js filter, store in ...
    index: %js:html
        <!DOCTYPE html>
        <html><head>
          <style type="text/css">
              @font-face {
                font-family: DVSM;
                src: url('DejaVuSansMono.ttf');
            }
            body {
                font-family: DVSM, mono;
            }
            ww * { pointer-events:none; }
            ww * * { pointer-events:all; }
          </style>
          <link href="light.css" rel="stylesheet"></link>

          <script src="codemirror/lib/codemirror.js"></script>
          <link href="codemirror/lib/codemirror.css" rel="stylesheet">
          <link href="codemirror/theme/night.css" rel="stylesheet">
          <link href="codemirror/theme/midnight.css" rel="stylesheet">
          <link href="codemirror/theme/base16-dark.css" rel="stylesheet">
          <script src="codemirror/mode/perl/perl.js"></script>
          
          <script src="paper.js"></script>
          
          <script src="jquery.min.js" type="text/javascript"></script>
          <script src="js-yaml.min.js" type="text/javascript"></script>
        </head>
        <body style="margin: 0px; background: black; color: #0d2; height:100%; width:100%;">
          <div id='msgs' style="white-space: pre;position:absolute;font-size:60%;left:0em;bottom:0em;width:50%;height:28%; overflow:hidden;padding:0.2em;color:#abc;z-index:200" onclick="G.keon();G.clon();G.togwid('#msgs','50%','5%');" > </div>
          <div id='ux' style="position:absolute;top:0em;
          right:0em;width:100%;height:100%;"> </div>

          <canvas id="display" resize></canvas>

          <script type="text/javascript">
            var A = {c:{},sc:{}};
            var C = {};
            var G = {};
            var T = {};
            A[5] = A[1] = A;
            a&elvis = Math.random();
            a&start = ['thestart'];
            A&start = &s{
                if (s) {
                    eval(s);
                    //var m = s.split("\n");
                    //$.each(m,&i,v{ eval(v); });
                }
                if (a&start.length) {
                    $.ajax(a&start.shift()).done(A&start);
                }

            };
            $(document).ready(&{
                A&start();
            });
          </script>
          </body></html>
Wederr: |
    # is web dialect
    Rw Tiot;
    # accumulates errors
    Rw Elationist;
    S
    1s&M ||= [];
    1s&M->[-1] eq 1c&es || push @{1s&M}, 1c&es;
    my $i = 0;
    for (@{1s&M}) {
        my $c;
        c.s = $_;
        c.dl = 1 if $_ ne 1s&M->[-1];
        n $i++=>-od=>$c
    }
    
    

