Wed: |
    # use Mojo, serve ghost/
    saygr "Being Wed in ".(Gc&ipd || Gc&dir);
    
    u Styleslops
    
    use Mojolicious::Lite;
    use MIME::Base64;
    push @{app->static->paths}, '/home/s/styleshed/public';
    app->secrets(["nothing"]);
    # divert mojo log statements from our err channel
    app->log->path((Gc&ipd || Gc&dir)."/mojo\.log")
        if Gc&dir || Gc&ipd;
    
    
    no warnings qw(uninitialized redefine);
    
    #G.c.listen = readlink('listen') if -l 'listen';
    my $s = Gc&bay . '-Wed';
    my $port = Rw Numstring $s;
    Gc&listen = '127.24.35.46:'.$port;
    my $s = Gc&listen || "s:10094";
    $s = "http://$s" if $s !~/^http:\/\//;
    
    S
    # forever
    n Baye
    
    # to remain verbose
    my $A = G&A,'requesto';
    A.V = 1;

    get '/' => &c{
        my $U = G&t,html=>'index';
        my $s = Uc&s;
        $s =~ /html/ || die "Not html? ".ki $U;
        sayre "Giving start";
        $c->render(text=>$s);
    };
    
    get '/thestart' => &c{
        my $i = $c->param('step') || 0;
        sayre "T wants to start at $i";
        my $next = "/thestart?step=".($i+1);
        my $s = Rw StartHut $i $nocache=1
            || return
                $c->render(text=>"document\.title = 'Gc&bay';"
                    ."G\.h(A,C,G,T,'c','starteeed');"
                    ."A\.sc\.start\.push('/andnow');");
        $c->render(text=>"A\.sc\.start\.push('$next');\n$s");
    };
    get '/andnow' => &c{
        $c->render(text=>"G\.h(A,C,G,T,'begoin');");
    };
    
    # W as <script> js include
    get '/js/:t/:ver' => {ver=>'?'} => &c{
        my $t = $c->param('t');
        sayre "Andnow!";
        my $ver = $c->param('ver');
        undef $ver if $ver eq '?';
        my $C = G&Ct,[$t,'',{ver=>$ver}];
        my $s = Rw NutServe $C;
        $s || return $c->res->code(404), $c->render(text=>"Not found\n");
        
        my $loca = '/js/'.C.t.'/'.c&ver;
        #$c->redirect_to($loca);
        $c->res->headers->append(Location => $loca);
        $c->render(text=>$s);
    };
    get '/earer' => &c{
        my $dat = $c->param('data');
        #$dat = djson($dat);
        my $s = G&Ct,[earer=>''=>{s=>$dat}];
        my $el = [give=>''=>{s=>$s}];
        my $W = [Wederr=>$el];
        G&timer:0.1,&{ 4s&toy->({to=>[$W]}) };
        $c->render(text=>"hmm\n");
    };
    #c other Wedery
    # handlers for image receiver
    Rw Tism;
    
    websocket '/s' => &s{
        1 && sayyl "Connect!";
        die "No GWebsock yet" unless G.Websock;
        G.Websock->($s);
    };
    
    Gc&clockon = &{
        Gc&startedclockalready ++ && return sayre "Trying to start again";
        1 && saybl "Starting  G.t     listens: $s";
        1 && saygr "Appstart: ". app->start('daemon', '--listen' => "$s");
    };
    
    # then later within the timer...
    
    my $txm = 1s&txm ||= [];
    my $pend = 1s&pending ||= [];
    my $rec = 1s&recent_ha ||= {};
    # handle each...
    G.Websock = &s{
        1 && say "Web is socked!";
        my $tx = $s->tx;
        push @$txm, $tx;
        my $addr = $tx->remote_address;
        Mojo::IOLoop->stream($tx->connection)->timeout(300000);
        $tx->max_websocket_size(512000);
        
        $s->on(message => &M,m{
            #}
            $m = encode_utf8($m);
            1 && sayyl "Message from $addr ".$m;
            
            my $ha = dig $m;
            $rec.>$ha ++ && sayre("Duplicate") && return
                Rw linkrement request_dupe;
            G&timer,0.3,$_ for &{ delete $rec.>$ha };
            
            
            my $d = eval { djson $m };
            $@ && die "Message doesnt decode: $@\n\n$m";
            
            ref $d ne 'HASH' && return saybl "Weird message: $m";
            
            
            if (my $W = d.W) {
                -d $W || die "Not a host: $W";
                my $in = "$W/in";
                my $s = G&Ct,[Win=>[jse=>''=>{s=>$d}]];
                write_file($in,{append=>1},sjson($s)."\n");
                sayre "sent $W: ".ki $d;
            }
            else {
                sayre "freak e: ".ki $d;
            }
        });
        
        $s->on(finish => &M,code,reason{
            @$txm = grep { $_ ne $tx } @$txm;
            1 && sayre "Gone: $addr $code $reason";
        });
        
        G.Websup->() if G.Websup;
        
        if (@$pend) {
            saygr "Sending pending messages: ".@$pend;
            G.Websen->($_) for @$pend;
            @$pend = ();
        }
    };
    
    G.Websen = &m{
        # $m = decode_utf8($m); # comes from inside
        unless (@$txm) {
            sayre "No client, pending: ".slim 50, $m;
            push @$pend, $m;
            return;
        }
        1 && saybl "Sending ".slim 2050, $m;
        for my $tx (@$txm) {
            $tx->send($m)
        }
    };
Wedpagery: | # starting page
    # use the js filter, store in ...
    index: %js:html
        <!DOCTYPE html>
        <html><head>
          <style type="text/css">
              @font-face {
                font-family: DVSM;
                src: url('DejaVuSansMono.ttf');
            }
            body {
                font-family: DVSM, mono;
            }
            ww * { pointer-events:none; }
            ww * * { pointer-events:all; }
          </style>
          <link href="light.css" rel="stylesheet"></link>

          <script src="codemirror/lib/codemirror.js"></script>
          <link href="codemirror/lib/codemirror.css" rel="stylesheet">
          <link href="codemirror/theme/night.css" rel="stylesheet">
          <link href="codemirror/theme/midnight.css" rel="stylesheet">
          <link href="codemirror/theme/base16-dark.css" rel="stylesheet">
          <script src="codemirror/mode/perl/perl.js"></script>
          
          <script src="paper.js"></script>
          
          <script src="jquery.min.js" type="text/javascript"></script>
          <script src="js-yaml.min.js" type="text/javascript"></script>
        </head>
        <body style="margin: 0px; background: black; color: #0d2; height:100%; width:100%;">
          <div id='msgs' style="white-space: pre;position:absolute;font-size:60%;left:0em;bottom:0em;width:50%;height:28%; overflow:hidden;padding:0.2em;color:#abc;z-index:200" onclick="G.keon();G.clon();G.togwid('#msgs','50%','5%');" > </div>
          <div id='ux' style="position:absolute;top:0em;
          right:0em;width:100%;height:100%;"> </div>

          <canvas id="display" resize></canvas>

          <script type="text/javascript">
            var A = {c:{},sc:{}};
            var C = {};
            var G = {};
            var T = {};
            A[5] = A[1] = A;
            a&elvis = Math.random();
            a&start = ['thestart'];
            A&start = &s{
                if (s) {
                    eval(s);
                    //var m = s.split("\n");
                    //$.each(m,&i,v{ eval(v); });
                }
                if (a&start.length) {
                    $.ajax(a&start.shift()).done(A&start);
                }

            };
            $(document).ready(&{
                A&start();
            });
          </script>
          </body></html>
Wederr: |
    # is web dialect
    Rw Tiot;
    # accumulates errors
    Rw Elationist;
    S
    1s&M ||= [];
    1s&M->[-1] eq 1c&es || push @{1s&M}, 1c&es;
    my $i = 0;
    for (@{1s&M}) {
        my $c;
        c.s = $_;
        c.dl = 1 if $_ ne 1s&M->[-1];
        n $i++=>-od=>$c
    }
    
    
HutNuts: | # extra ballsy refactoring starts, in StyleHut
    # i pull things in
    # to be NutDung later
    u j
    begoin:
        A.on = $('body');
        window.onerror = &e,r{
            console.log("Window error: ",e,r);
            return;
        };
        G&jsung,'NutSeq';
        
    jsung: %acgt:t ver
        // ajax needs to be async
        // a&async || die "A is not continuable";
        $get = '/js/'+t;
        ver and get += '/'+ver;
        // can also add the <script> element, with .onload
        // probably needs both ways
          // with the reading of the Location header
            // for exact error reporting
        $.ajax(get).done(&v,x,f{
            console.log("Found: ",v,x,f);
        });
        
JigHutNuts: | # send HutNuts, should be enough to get NutServe'd
    # NetJig only updates only things that are already there
    # needs to be compiled into je/StyleHut and StartHut'd to add
    n NetJig=>W=>{the_W=>'HutNuts'}
    
NutServe: | # returns string of js u for <script>
    delete G.way.NutServe;
    
    my $bb = &s{
        my $C = G&Ct,['toStartHut',1,{s=>$s}];
        Rw JaBabz $C;
        c&s
    };
    # get a json encoded string
    my $enj = &s{
        $s = sjson[$s];
        $s =~ s/^\[|\]$//sg;
        $s
    };
    
    C.t && exists c&ver || die "C not like t/ver: ".ki$C;
    
    my $t = C.t;
    
    # look in the javascript u stash
    local A.6.t = 'je';
    my $f = G&Locate_read,$t;
    $f || return;
    # storage dep
    my $l = "$f/1";
    my $li = readlink $l;
    # find version
    my ($ver) = $li =~ /^h\/(\w+)$/;
    $ver || die "not h/dig looking: $li";
    $li = "$f/$li";
    # specify version
    if (c&ver && c&ver ne $ver) {
        $li =~ s/$ver$/c&ver/ || die "Cant find $ver in $l";
        $ver = c&ver;
        -f $li || warn("Cant find C.t at ver=c&ver,"
            ." try the $ver?"), return;
    }
    c&ver = $ver;
    # get C
    my $d = G&Beach,$li if $li;
    $d || die "No such $t in Gc&bay je etc ($li)";
    
    sayre "Found C.t W in $li";
    ($d) = @$d;
    T.op = $d;
    my @W = G&op,'cW:javascript';
    
    # cache by t/ver
    # first function, on the first line, should be a toc
    # one item per line of it, including line number ranges
    my $D = G&Ct,[C.t,'',{},{ver=>c&ver}]; # toc
    my $zI = Ds&z = []; # Is
    my $N = []; # flat list, to include toc
    for my $I (@W) {
        (my $Icv = I.y.cv) =~ s/^0\.//;
        for my $i (@{Is&z}) {
            (my $icv = i.y.cv) =~ s/^0\.//;
            my $name = join'_',C.t,c&ver,I.t,$Icv,i.t,$icv;
            $name =~ s/\W+/_/g;
            is&name = $name;
            ic&s =~ s/^function/function $name/
                || die "Doesn't ^function: ".ki $s;
            push @$N, $i;
        }
    }
    
    for my $i (@$N) {
        ic&s =~ /\n$/ || die "No trailing \\n: ".ki $i;
        my $lines = split "\n", ic&s;
        is&lines = $lines; # also ^function...{\n and \n}\n$
    }
    
    my @toc; # [ind t y c sc]+
    for my $I (@W) {
        (my $Icv = I.y.cv) =~ s/^0\.//;
        push @toc, ['',I.t,I.y.cv,I.c,I.sc];
        for my $i (@{Is&z}) {
            push @toc, ['  ',i.t,i.y.cv,i.c,i.sc];
        }
        delete Is&z;
    }
    
    my $toc_lines = @toc + 3; # also ^function...{\n and \n}\n$
    my $code_lines = 0;
    for my $i (@$N) {
        is&line = $toc_lines + $code_lines;
        $code_lines += is&lines;
    }
    
    my @codes = map { delete _c&s } @$N;
    
    my $name = join'_', C.t, c&ver ;
    $name =~ s/\W+/_/g;
    
    my $s = join "",
        "function $name () { return [\n",
        # data and code has indent
        (map { $_->[0].sjson($_)."\n" } @toc),
        "]}\n",
        @codes;
    
    return $s;
        
    
    return wdump 5, \@toc;
    
    
StyleNut: | # unify NutMachine (newer) and Stylehut
    n Stylehut
    # newer, absorb-all
    n NutMachine
NutMachine: | # totality of core js-ness
    n NutWorld
    n NutProcess
    n NutErupts
    
NutWorld: | # 123 sheer being
    n NutSeq
    n NutDung
    n NutJay
NutProcess: | # TODO 456 resonance
    return;
    # the o
    n NutCertainty
    # the s
    n NutConsciousness
NutErupts: | # TODO standards
    # c&e/J requests
    #n NutElve
    
    # 72 load/save
    #   should be in Dung
    #n NutPlacement
    
    # 8 numbers
    #   nice ways above the tubing
    #n NutInt
    # ^ contains:
    # 9 talkying
    #n NutTal
    
    
    # house gets ThArt (StripesEdge, Space)
    #   StripesEdge is one thing with an index of Styles in Ang
    #     Ang is Stripes and Oscgrin,
    #     the universals that format and the functions that do so
    
    # hut/Nut should get its side of the styles...
    # 
NutSeq: | # self
    # some use of of=eye, which G&h searches like of=i
    # and StartHut/LoadI blows away each A.I.? it loads up
    # we shall om/receive news as N, functions in eye
    n NutAye
    n NutSea
    n NutTub
NutAye: | # A without tubeyness
    u j
    n \'of:eye'
    # begin being
    Aye:
        $V = $.extend({},A);
        V.2 = A;
        $A = V;
        s and A.t = s;
        A.y = A;
        A.c = {};
        A.sc = {};
        A.om ||= A;
        A.om == A.up and A.mo = A;
        A[1] = A;
        
        T.d ||= 1;
        return A
NutSea: | # line etc into C
    u j
    n \'of:eye'
    # 
    # ReadLines, G&m, G&A
    Cye:
        // guess t y c sc
    # and a bit of xotila
NutTub: | # A tubeyness
    u j
    n \'of:eye'
    # go, stop, mode
    throat:
        // do I for C
NutDung: | # getting things
    u j
    n \'of:eye'
    ting: %acgt:t ver
        // blocking unless a&async
        // get content from
        $get = '/js/'+t;
        ver and get += '/'+ver;
        $.get(get);
NutJay: | # persistent thing
    # quank

