Wed: |
    # use Mojo, serve ghost/
    saygr "Being Wed in ".(Gc&ipd || Gc&dir);
    
    u Wedpagery
    
    use Mojolicious::Lite;
    use MIME::Base64;
    push @{app->static->paths}, '/home/s/styleshed/public';
    app->secrets(["nothing"]);
    # divert mojo log statements from our err channel
    app->log->path((Gc&ipd || Gc&dir)."/mojo\.log")
        if Gc&dir || Gc&ipd;
    
    
    no warnings qw(uninitialized redefine);
    
    #G.c.listen = readlink('listen') if -l 'listen';
    my $s = Gc&bay . '-Wed';
    my $port = Rw Numstring $s;
    Gc&listen = '127.24.35.46:'.$port;
    my $s = Gc&listen || "s:10094";
    $s = "http://$s" if $s !~/^http:\/\//;
    
    S
    # forever
    n Baye
    
    # to remain verbose
    my $A = G&A,'requesto';
    A.V = 1;

    get '/' => &c{
        my $U = G&t,html=>'index';
        my $s = Uc&s;
        $s =~ /html/ || die "Not html? ".ki $U;
        sayre "Giving start";
        $c->render(text=>$s);
    };
    
    get '/thestart' => &c{
        my $i = $c->param('step') || 0;
        sayre "T wants to start at $i";
        my $next = "/thestart?step=".($i+1);
        my $s = Rw StartHut $i $nocache=1
            || return
                $c->render(text=>"document\.title = 'Gc&bay';"
                    ."G\.h(A,C,G,T,'c','*');"
                    ."A\.sc\.start\.push('/andnow');");
        $c->render(text=>"A\.sc\.start\.push('$next');\n$s");
    };
    get '/andnow' => &c{
        $c->render(text=>"\$('<h2 onclick=\"G\.h(A,C,G,T,\\'begoin\\');\">G</h2>').appendTo('body')");
    };
    Rw ServeC;
    
    #c other Wedery
    # handlers for image receiver
    Rw Tism;
    
    websocket '/s' => &s{
        1 && sayyl "Connect!";
        die "No GWebsock yet" unless G.Websock;
        G.Websock->($s);
    };
    
    Gc&clockon = &{
        Gc&startedclockalready ++ && return sayre "Trying to start again";
        1 && saybl "Starting  G.t     listens: $s";
        1 && saygr "Appstart: ". app->start('daemon', '--listen' => "$s");
    };
    
    # then later within the timer...
    
    my $txm = 1s&txm ||= [];
    my $pend = 1s&pending ||= [];
    my $rec = 1s&recent_ha ||= {};
    # handle each...
    G.Websock = &s{
        1 && say "Web is socked!";
        my $tx = $s->tx;
        push @$txm, $tx;
        my $addr = $tx->remote_address;
        Mojo::IOLoop->stream($tx->connection)->timeout(300000);
        $tx->max_websocket_size(512000);
        
        $s->on(message => &M,m{
            #}
            $m = encode_utf8($m);
            1 && sayyl "Message from $addr ".$m;
            
            my $ha = dig $m;
            $rec.>$ha ++ && sayre("Duplicate") && return
                Rw linkrement request_dupe;
            G&timer,0.3,$_ for &{ delete $rec.>$ha };
            
            
            my $d = eval { djson $m };
            $@ && die "Message doesnt decode: $@\n\n$m";
            
            ref $d ne 'HASH' && return saybl "Weird message: $m";
            
            
            if (my $W = d.W) {
                -d $W || die "Not a host: $W";
                my $in = "$W/in";
                my $s = G&Ct,[Win=>[jse=>''=>{s=>$d}]];
                write_file($in,{append=>1},sjson($s)."\n");
                sayre "sent $W: ".ki $d;
            }
            else {
                sayre "freak e: ".ki $d;
            }
        });
        
        $s->on(finish => &M,code,reason{
            @$txm = grep { $_ ne $tx } @$txm;
            1 && sayre "Gone: $addr $code $reason";
        });
        
        G.Websup->() if G.Websup;
        
        if (@$pend) {
            saygr "Sending pending messages: ".@$pend;
            G.Websen->($_) for @$pend;
            @$pend = ();
        }
    };
    
    G.Websen = &m{
        # $m = decode_utf8($m); # comes from inside
        unless (@$txm) {
            sayre "No client, pending: ".slim 50, $m;
            push @$pend, $m;
            return;
        }
        1 && saybl "Sending ".slim 2050, $m;
        for my $tx (@$txm) {
            $tx->send($m)
        }
    };
Wedpagery: | # starting page
    # use the js filter, store in ...
    index: %js:html
        <!DOCTYPE html>
        <html><head>
          <style type="text/css">
              @font-face {
                font-family: DVSM;
                src: url('DejaVuSansMono.ttf');
            }
            body {
                font-family: DVSM, mono;
            }
            ww *, .ww { pointer-events:none; }
            ww * *, .ww * { pointer-events:all; }
          </style>
          <link href="light.css" rel="stylesheet"></link>

          <script src="codemirror/lib/codemirror.js"></script>
          <link href="codemirror/lib/codemirror.css" rel="stylesheet">
          <link href="codemirror/theme/night.css" rel="stylesheet">
          <link href="codemirror/theme/midnight.css" rel="stylesheet">
          <link href="codemirror/theme/base16-dark.css" rel="stylesheet">
          <script src="codemirror/mode/perl/perl.js"></script>
          
          <script src="paper.js"></script>
          
          <script src="jquery.min.js" type="text/javascript"></script>
          <script src="js-yaml.min.js" type="text/javascript"></script>
        </head>
        <body style="margin: 0px; background: black; color: #0d2; height:100%; width:100%;">
          <div id='msgs' style="white-space: pre;position:absolute;font-size:60%;left:0em;bottom:0em;width:50%;height:28%; overflow:hidden;padding:0.2em;color:#abc;z-index:200" onclick="G.keon();G.clon();G.togwid('#msgs','50%','5%');" > </div>
          <div id='ux' style="position:absolute;top:0em;
          right:0em;width:100%;height:100%;" class="ww"> </div>

          <canvas id="display" resize></canvas>

          <script type="text/javascript">
            var A = {c:{},sc:{}};
            var C = {};
            var G = {};
            var T = {};
            A[5] = A[1] = A;
            a&elvis = Math.random();
            a&start = ['thestart'];
            A&start = &s{
                if (s) {
                    eval(s);
                    //var m = s.split("\n");
                    //$.each(m,&i,v{ eval(v); });
                }
                if (a&start.length) {
                    $.ajax(a&start.shift()).done(A&start);
                }

            };
            $(document).ready(&{
                A&start();
            });
          </script>
          </body></html>
Wederr: |
    # is web dialect
    Rw Tiot;
    # accumulates errors
    Rw Elationist;
    S
    1s&M ||= [];
    1s&M->[-1] eq 1c&es || push @{1s&M}, 1c&es;
    my $i = 0;
    for (@{1s&M}) {
        my $c;
        c.s = $_;
        c.dl = 1 if $_ ne 1s&M->[-1];
        n $i++=>-od=>$c
    }
    
    

NutServe: | # turns js W into a <script> with toc in C
    delete G.way.NutServe;
    
    C.t && exists c&ver || die "C not like t/ver: ".ki$C;
    
    # look in the javascript u stash
    local A.6.t = 'je';
    my $f = G&Locate_read,C.t;
    $f || return;
    # storage dep
    my $l = "$f/1";
    my $li = readlink $l;
    # find version
    my ($ver) = $li =~ /^h\/(\w+)$/;
    if (!$ver) {
        # hardlink? pull from meta
        ($ver) = `cat $f/2` =~ /1:(\w+)\b/;
        $ver || die "not h/dig looking: $f says $li";
        $li = "h/$ver";
    }
    $li = "$f/$li";
    # specify version
    if (c&ver && c&ver ne $ver) {
        $li =~ s/$ver$/c&ver/ || die "Cant find $ver in $l";
        $ver = c&ver;
        -f $li || warn("Cant find C.t at ver=c&ver,"
            ." try the $ver?"), return;
    }
    c&ver = $ver;
    # get C
    my $d = G&Beach,$li if $li;
    $d || die "No such C.t in Gc&bay je etc ($li)";
    
    sayre "Found C.t W in $li";
    ($d) = @$d;
    T.op = $d;
    my @W = G&op,'cW:javascript';
    
    # cache by t/ver
    # first function, on the first line, should be a toc
    # one item per line of it, including line number ranges
    my $D = G&Ct,[C.t,'',{},{ver=>c&ver}]; # toc
    my $zI = Ds&z = []; # Is
    my $N = []; # flat list, to include toc
    for my $I (@W) {
        (my $Icv = I.y.cv) =~ s/^0\.//;
        for my $i (@{Is&z}) {
            (my $icv = i.y.cv) =~ s/^0\.//;
            my $name = join'_',C.t,c&ver,I.t,$Icv,i.t,$icv;
            $name =~ s/\W+/_/g;
            is&name = $name;
            ic&s =~ s/^function/function $name/
                || die "Doesn't ^function: ".ki $s;
            push @$N, $i;
        }
    }
    
    for my $i (@$N) {
        ic&s =~ /\n$/ || die "No trailing \\n: ".ki $i;
        my $lines = split "\n", ic&s;
        is&lines = $lines; # also ^function...{\n and \n}\n$
    }
    
    my @toc; # [ind t y c sc]+
    for my $I (@W) {
        (my $Icv = I.y.cv) =~ s/^0\.//;
        push @toc, ['',I.t,I.y.cv,I.c,I.sc];
        for my $i (@{Is&z}) {
            push @toc, ['  ',i.t,i.y.cv,i.c,i.sc];
        }
        delete Is&z;
    }
    
    my $toc_lines = @toc + 3; # also ^function...{\n and \n}\n$
    my $code_lines = 0;
    for my $i (@$N) {
        is&line = $toc_lines + $code_lines;
        $code_lines += is&lines;
    }
    
    my @codes = map { delete _c&s } @$N;
    
    my $name = join'_', C.t, c&ver ;
    $name =~ s/\W+/_/g;
    
    my $s = join "",
        "function $name () { return [\n",
        # data and code has indent
        (map { $_->[0].sjson($_).",\n" } @toc),
        "]}\n",
        @codes;
    
    return $s;
        
    
    return wdump 5, \@toc;
    
    
StyleNut: | # unify NutMachine (newer) and Stylehut
    n Stylehut
    # newer, absorb-all
    n NutMachine
HutNuts: | # extra ballsy refactoring starts (in Stylehut)
    # i pull things in
    # to be NutDung later
    u j
    begoin:
        A.on = $('body')[0];
        // preliminary
        $cb = &t,ver,script,e{
            G&Jinthe;
        };
        G&jsung,'NutMachine',null,cb;
    
    # A gets flock of A.I.? made from a W
    # as <script> via NutServe and the /js/$t-$ver handler 
    #  the G of the webserver and /je/ is Where
    # to mix as in u:
    #   several A get this function to fill their A.I somethings
    #   then they all get osc for a J, or A=u for speed
    #   then this sorting together of A.I can be much faster...
    # < a&async || die?
    # we get it first to read the proper Location
    #   so the <script> tag src is exact
    # < dependency/housing
    jsung: %acgt:t ver cb
        $get = '/js/'+t;
        ver and get += '-'+ver;
        $.ajax(get).done(&s,how,c{
            how != 'success' and throw "Failed request: "+how, c;
            $src = c.getResponseHeader('Location');
            $m = src.match('^\/js\/(\\w+)-(\\w+)(\\.js)');
            $W = m[1];
            $ver = m[2];
            $callback = &script,e{
                $tocfunc = W+'_'+ver;
                console.log("Have a toc: ",tocfunc);
                $toc = window[tocfunc]();
                $D;
                $.each(toc, &k,v{
                    $ind = v[0];
                    $t = v[1];
                    $cv = v[2];
                    $c = v[3];
                    $sc = v[4];
                    $C = {t:t, y:{cv:cv}, c:c, sc:sc};
                    if (ind == '') {
                        D = A.I[t] = C;
                        D.y.tw = {};
                        D.y.tv = {};
                        Ds&z ||= [];
                    }
                    else if (ind == '  ') {
                        D.t != s&js and throw "Csjs not last D", C, D;
                        c&code = window[s&name];
                        typeof c&code != 'function' and throw "Cccode not function", C, D;
                        // grow I
                        D.y.tv[C.t] ||= {};
                        D.y.tv[C.t][C.y.cv] = C;
                        D.y.tw[C.t] = C;
                        $l = Ds&z.slice(-1);
                        l[0] and l[0].y.next = C;
                        Ds&z.push(C);
                        D.y.in ||= C;
                        if (D.t === 'i' && (C.t === 'h' || C.t === 't')) {
                            G[C.t] = c&code;
                        }
                    }
                    else {
                        throw "deep C: "+W+"/"+t,v
                    }
                });
                cb(t,ver,script,e); 
            };
            $have = $('body script[src="'+src+'"]');
            have.length and return callback();
            ~acquired: t, ver
            G&addscript,src,callback;
        });
    
    addscript: %acgt:src cb
        var script = document.createElement('script');
        script.setAttribute('src', src);
        script.setAttribute('type', 'text/javascript');
        cb and script.onload = &e{ cb(script,e) };
        A.on.appendChild(script);
NutSock: | # websockets
    u jc
    n \'of:ws'
    # give A websocket
    #   winds itself back when disconnected
    # spawns:
    #   A=send when you G&h,wss&send,'YourString'
    #   A=receive when the a&receive happens, which sends 
    #   and A receive (or whatever you set a&receive)
    #   put in a J=tel to be recording stuff,
    #     making compressions
    start 2: %any
        a&ws && a&ws.readyState == 1 and return
        
        A&ws ||= 'ws://'+location.host+'/s';
        
        $ws = a&ws = new WebSocket(A&ws);
        
        ws.onopen = &{
            ws !== a&ws  and return ~sockalivedupe: A&ws
            delete a&dead;
            
            ~connected: A&ws
            $('body').stop().css('-webkit-filter', '');
        };
        
        ws.onclose = &{
            ws !== a&ws  and return ~sockalivedupe: A&ws
            a&dead = (a&dead||0) + 1
            
            ~closed: A&ws
            $('body').stop().css('-webkit-filter',
                'blur(1px) brightness(1.3) contrast(2)');
            
            T.N.2 = 3;
        };
        
        ws.onmessage = &ev{
            a&receive(A,C,G,T,ev.data,ev);
        };
        // generally it would be tied to a dialectic state
        //   see making compressions ^
        // Y may != A if someone in 4 uses our a&receive
        // also AA is taking
        $AA = A;
        a&receive = &Y,C,G,T,s,ev{
            A = AA;
            $A = G&Aye,'receive',0,{Y:Y};
            
            // could be in I.receive
            
            typeof s != 'string' and throw "not string: ",s
            
            $guesswork = s.substr(0,1);
            guesswork == "[" and s = $.parseJSON(s)
            guesswork == "{" and s = $.parseJSON(s)
            
            // trusted to create anything
            G&n,s
        };
        
        // Y whoever G&h,wss&send,'YourString'
        a&send = &Y,C,G,T,s,eg{
            A = AA;
            $A = G&Aye,'send',0,{Y:Y};
            
            // could be in I.send
            
            // test coverage:
            $ws = upa&ws;
            ws.readyState !== 1 and ~sockdropped: upA&ws
            
            typeof s != 'string' and s = JSON.stringify(s);
            
            // if too long?
            ws.send(s);
        };
    
        // wanting T.N=6 to do so
        A.cv = 0.6
    
NutMachine: | # totality of core js-ness
    A.hardlink = 1;
    # telephone otherness
    n NutSock
    # as stylehouse
    n NutWorld
    n NutProcess
    n NutErupts
    
NutWorld: | # 123 sheer being
    # 1 string
    n NutSeq
    # 2 know
    n NutDung
    n NutBung
    n NutCore
    # 3 construct
    n NutJay
    
NutProcess: | # TODO 456 resonance
    return;
    # the o
    n NutCertainty
    # the s
    n NutConsciousness
NutErupts: | # TODO standards
    # c&e/J requests
    #n NutElve
    
    # 72 load/save
    #   should be in Dung
    #n NutPlacement
    
    # 8 numbers
    #   nice ways above the tubing
    #n NutInt
    # ^ contains:
    # 9 talkying
    #n NutTal
    
    
    # house gets ThArt (StripesEdge, Space)
    #   StripesEdge is one thing with an index of Styles in Ang
    #     Ang is Stripes and Oscgrin,
    #     the universals that format and the functions that do so
    
    # hut/Nut should get its side of the styles...
    # 




NutDung: | # getting things/I
    u j
    n \'of:eye'
    # bring W and the I's insides together into a namespace
    #    I has I.? and I.?.?
    #    I.? gets talked about by many W, projected by many
    #    though it (eg C.t='i') may not be in Where,
    #    it would be more realistic to mix into A etc from names,
    #    containing personalities
    # so all W-ish things are equal
    # could even find that some remote W contains an I.? thing it wants,
    # and decide to use it
    ting: %acgt:t ver
        // blocking unless a&async
        // get content from
        $get = '/js/'+t;
        ver and get += '/'+ver;
        $.get(get);

    # look up A slope for the I/$s (embryo) or the I/$s/$t (part)
    # wants to be able to jump up the slope,
    # want a type, like http's Accept header,
    #   so G&ting can upstantiate it
    #   things coming alive because of this will have thresholdia
    #   do you want to trust someone else's version of t,
    #   or do you run all the simulations yourself?
    # 
    # < elvis a J for it
    #   esp. if you can resync when it's downloaded
    t: %acgt:s t
        var z;
        $.each([1,2,3,4,5], &i,v{
            z and return;
            var Y = A[v];
            !Y and return;
            var I = Y.I;
            !I and return;
            z = I[s];
            t and z = z.y.tw[t];
        });
        return z;
    
NutBung: | # getting W from I, D from B, and errorifics
    u j
    n \'of:eye'
    # when error
    # communicate to thro if handley
    # genericalised linkage to source finding?
    Ban: %acgt:msg url lineNo colNo er
        $style = "font-size:156%,color:red";
        // catch up innard
        $mid = Math.random().toPrecision().match('\.(\\d+)')[1];
        mid = 'id'+mid;
        $fil = &s,append{
            $lin = $('a#'+mid)[0];
            append and s = lin.innerHTML + s
            lin.innerHTML = s;
        };
        $say = msg+'<a id="'+mid+'" href="#" style="color:white">?<a>';
        
        $W
        $ver
        
        $v = new URL(url);
        $src = v.pathname;
        $m = src.match('^\/js\/(\\w+)-(\\w+)(\\.js)');
        if (m) {
            W = m[1];
            ver = m[2];
        }
        $Wsay = '';
        W and Wsay = W+': ';
        $e = '<span style="'+style+'">! '+Wsay+say+'</span>';
        G&c,e;
        console.log("er: ",msg,url,lineNo,er);
        
        !m and return fil(url);
        
        // get the lines, in the <script> already?
        $.ajax(src).done(&s,how,c{
            how != 'success' and throw "Ban faile: "+how, c;
            $src = c.getResponseHeader('Location');
            $m = src.match('^\/js\/(\\w+)-(\\w+)(\\.js)');
            $W = m[1];
            $ver = m[2];
            $lines = s.split("\n");
            $l = lines[lineNo-1];
            $prior = 1;
            $sub
            while (1) {
                prior++;
                $line = lines[lineNo-prior];
                line == null and break;
                $fu = line.match('^function '+W+'_'+ver
                    +'(\\w+)_(\\d+)_(\\w+)_(\\d+)\\(');
                !fu and continue
                $cv = '';
                fu[4] != '1' and cv = fu[4]
                sub = fu[1]+cv+'/'+fu[3];
                break
            }
            sub ||= "see "+v;
            fil(sub+": "+l);
        });
        
        // check if current
        $.ajax('/js/'+W).done(&s,how,c{
            how != 'success' and throw "Ban faile: "+how, c;
            $rep = c.getResponseHeader('Location');
            src != rep and fil("(old)",1);
        });
        
        
NutCore: | # core is a personality for relationships between things
    # stuff to one day compile into the throat
    # or boundary effects
    # points for things respected by other things

