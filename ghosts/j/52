MotorTime: | # serve time
    4c&todo ||= []; # may be immediately done
    sayre "Plan future: ".ki $_ for @{4c&todo};
    my $tz;
    for my $y (@{4c&todo}) {
        my ($Y,$s,$cb) = @$y;
        saybl "Timering $s: ".G&sn,$Y;
        push @{$tz.>$s ||=[]}, [$Y,$cb];
    }
    @{4c&todo} = ();
    if (!$tz) {
        if (my $wd = Gc&when_done) {
            G&e,@$_ for @$wd;
        }
        return;
    }
    my @int;
    my $tiny_bits = 0.05;
    # < using Motor for each G&time callback,
    #   so the list can be advanced one time at a time
    #   and fetime can be adjusted
    #   which makes everything look like it happens instantly
    for my $s (sort map {0+$_} keys %$tz) {
        push @int, $s;
        my $v = $tz.>$s;
        if (Gc&asap) {
            # lie about fetime
            # so shows/tests render fast
            #   with what looks like real time within
            $s = $tiny_bits * @int;
        }
        Mojo::IOLoop->timer($s,&{
            1 && sayyl "Here again!";
            for my $y (@$v) {
                my ($Y,$cb) = @$y;
                1 && saybl "Comeback $s: ".G&sn,$Y;
                $cb->();
            }
        });
    }
    sayyl "Have timers at ".join", ", @int;
    Gc&freetime ||
        Rw GiveTime;

GiveTime: | # release from reading inputs!!# # # ## #!### 15098
    # realies #
    Gc&clockon = sub {
        1 && saybl "GiveTime: G.t";
        # turns Udder read loop into Baye read loop
        Gc&freetime = 1;
        n Baye
        Mojo::IOLoop->is_running || Mojo::IOLoop->start;
    };

Glaps: | # colate
    # blao
    # large:1,mtime:1509861713,pi:flis,size:3179
    # large:1,mtime:1509861713,pi:flis,size:3179
    
    
    
    # large:1,mtime:1509861713,pi:flis,size:3179

Wudder: | # send little C to a G through $G/in (start W as fork from Udder)
    $s = G&Ct,$s if ref $s eq 'ARRAY';
    $s = G&Ct,[$s] if !ref $s;
    my $to = ar.to || Gc&Down || "Udder";
    my $bay = ar.bay || Gc&bay;
    if ($bay eq Gc&bay && $to eq G.t) { # subnet and number
        sayyl "Delvisering self: ".ki $s;
        G&elph,$s;
        return;
    }
    my $in = "$bay/p/$to/in";
    sayyl "Writing $in For ".ki $s;
    write_file($in,{append=>1},sjson($s)."\n");

Power: |
    # from https://github.com/cisco/ChezScheme/blob/master/examples/power.ss
    # oz ##
    # is shapes
    (define power
       (lambda (x n)
          (cond
             [(= n 0) 1]
             [(= n 1) x]
             [else
              (let ([q (quotient n 2)])
                 (* (power x q) (power x (- n q))))])))
    # piled to here !!!!! dn!?

#

Glapsiw: | # new
    # glapigia

BayFishing: | # become Op/Ud node, see 822
    my $p = $$;
    $| = 1; # autoflush output channel
    Gc&tapescontinue = 1;
    # mkoJ called by Wout, sends lines with Ilan on Opper
    # Opper Ilan $f elvised by Ualve on Udders
    #     Ilan unifies names/routes points by elvising Win
    G.mkoJ = &Wc{
        c.holst = $W; # geoplace on desk section
        my $Y = Gc&B.sc.A;
        c.Y = $Y; # A coming from
        G&elph,NetPut=>[out=>1=>$c]
    };
    
    A.7.t ||= 'neu';
    # < remove only non-links
    #   for T room to decide start-withs
    /^\w+$/ || die "Comp Gc&bay/A.7.t" for Gc&bay, A.7.t;
    
    
    # $bay passed through
    town: `rm -rf Gc&bay/A.7.t/*`;
    my $to = Rw ElvisYou;
    return sayre "< ElvisYou $p vs $$" unless $p eq $$;
    
    sleep 1;
    
    my $op;
    my $f = "$to/p/Opper";
    sayre "... $f ";
    sleep 1 until -l $f;
    $op = readlink $f;
    saygr "Waiting fr $op $f";
    waitpid($op,0);
    sayyl "Done! $op on $$";
    if (readlink("$f/will") =~ /restart/) {
        sayre "$f wills restart";
        goto town;
    }
    sayre "will restart..?";
    <STDIN>;
    goto town;

