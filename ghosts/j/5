WebHost: |
    # use Mojo,
    # chew up Stylehut into bootstrappings and send
    saygr "Being a WebHost";
    u Styleslops
    use Mojolicious::Lite;
    use MIME::Base64;
    push @{app->static->paths}, '/home/s/styleshed/public';
    app->secrets(["nothing"]);
    
    #G.c.listen = readlink('listen') if -l 'listen';
    Gc&listen = '127.24.35.46:10433';
    my $s = G.c.listen || "s:10094";
    $s = "http://$s" if $s !~/^http:\/\//;
    S
    
    my $A = G&A,'requesto';
    A.V = 1;

    get '/' => &c{
        my $U = G&t,html=>'index';
        my $s = Uc&s;
        $s =~ /html/ || die "Not html? ".ki $U;
        sayre "Giving start";
        $c->render(text=>$s);
    };
    
    get '/thestart' => &c{
        sayre "T wants to start";
        #
    };
    
    Rw Tism;
    
    websocket '/s' => sub {
        my $mojo = shift;
        1 && sayyl "Connect!";
        die "No GWebsock yet" unless G.Websock;
        G.Websock->($mojo);
    };
    
    Gc&clockon = sub {
        1 && saybl "Starting  G.t     listens: $s";
        app->start('daemon', '--listen' => "$s");
    };
    
    # then later within the timer...
    
    my $txm = J.txm ||= [];
    # handle each...
    G.Websock = J.Websock ||= sub {
        my $mojo = shift;
        1 && say "Web is socked!";
        my $s = $mojo;
        my $tx = $s->tx;
        push @$txm, $tx;
        my $addr = $tx->remote_address;
        Mojo::IOLoop->stream($tx->connection)->timeout(300000);
        $tx->max_websocket_size(512000);
        $s->on(message => sub {
            my ($M, $m) = @_;
            $m = encode_utf8($m);
            1 && sayyl "Message from $addr ".$m;
            my $dec = eval { djson $m };
            $@ && die "Message doesnt decode: $@\n\n$m";
            
            if (my $W = dec.event.W) {
                my $db = G&db;
                $db->notify($W,decode_utf8($m));
                1 && say "Sent ".length($m)." to $W";
            }
            else {
            
            }
        });
        $s->on(finish => sub {
            my ($M, $code, $reason) = @_;
            @$txm = grep { $_ ne $tx } @$txm;
            1 && sayre "Gone: $addr $code $reason";
        });
        $tx->send(' clon();keon();');
        1 && sayyl "Socksdone";
    };
    
    G.Websen = J.Websen ||= sub {
        my $m = shift;
        $m = decode_utf8($m);
        @$txm || return sayre "No client, dropping: ".slim 50, $m;
        for my $tx (@$txm) {
            $tx->send($m)
        }
    };
Styleslops: | # minimal page that sockets in more stuff
    # use the js filter, store in ...
    index: %js:html
        <!DOCTYPE html>
        <html><head>
          <style type="text/css">
            ww * { pointer-events:none; }
            ww * * { pointer-events:all; }
          </style>
          <link href="light.css" rel="stylesheet"></link>

          <script src="codemirror/lib/codemirror.js"></script>
          <link href="codemirror/lib/codemirror.css" rel="stylesheet">
          <link href="codemirror/theme/night.css" rel="stylesheet">
          <link href="codemirror/theme/midnight.css" rel="stylesheet">
          <link href="codemirror/theme/base16-dark.css" rel="stylesheet">
          <link href="codemirror/addon/display/fullscreen.css" rel="stylesheet">
          <script src="codemirror/addon/display/fullscreen.js"></script>
          <script src="codemirror/mode/perl/perl.js"></script>
          
          <script src="paper.js"></script>
          <script src="paper.animate.js"></script>
          
          <script src="jquery.min.js" type="text/javascript"></script>
        </head>
        <body style="margin: 0px; background: black; color: #0d2; height:100%; width:100%;">
          <div id='msgs' style="white-space: pre;position:absolute;font-size:60%;left:0em;bottom:0em;width:50%;height:28%; overflow:hidden;padding:0.2em;color:#abc;z-index:200" onclick="keon();clon();a.togwid('#msgs','50%','5%');" > </div>
          <div id='ux' style="position:absolute;top:0em;
          right:0em;width:100%;height:100%;"> </div>

          <canvas id="display" resize></canvas>

          <script type="text/javascript">
            var A = {c:{},sc:{}};
            a&elvis = Math.random();
            a&start = ['thestart'];
            A&start = function(s){
                if (s) {
                    var m = s.split("\n");
                    $.each(m,function(i,v){ eval(v); });
                }
                if (a&start.length) {
                    $.ajax(a&start.shift()).done(A&start);
                }

            };
            $(document).ready(function(){
                A&start();
            });
          </script>
          </body></html>
RemainDing: |
    0 &&
    bloat:
        # the ready():
                a.c("ello");
                if (location.pathname != '/')
                    a.codeso = [a.codeso[0]];
                a.codelo();
                if (location.search.match('^\\\?v='))
                    setTimeout(function(){ a.putontv(location.search) }, 6420);
                a.con(w);
            // default, top level
            var w = {conin: 'ws://'+location.host+'/s'};
            var fail = 0;
            var a = {};
            a.N = {}
            var q = 1;
            var elvis = Math.random();
            var ws;
            var etc = {};
            var C = {};
            var conz = {};
            var mm = {};
            var ww = {};

            a.togwid = function(m,fr,to) {
                if ($(m).attr('togwid') == to)
                    to = fr
                $(m).attr('togwid', to)
                $(m).css('width', to);
            };

            // splate

            a.e = function(e) { eval(e); };
            a.m = function(e) {
                var d = e.substr(0,1);
                if (d == " ") {
                  a.e(e);
                }
                else {
                  if (d == ".") {
                    e = '<span style="font-size:66%">'+e+'</span>';
                  }
                  a.c(e);
                }
            };
            a.c = function(e) {
                $('#msgs').prepend(e+"\n");
            };


            // click, keys
            function clon () { $(window).on("click", a.cl); }
            function clof () { $(window).off("click", a.cl); }
            function keon () { $(window).on("keydown", a.ke); }
            function keof () { $(window).off("keydown", a.ke); }
            var keyjam = 0;
            var keyjamfor = 10;
    0 &&
    websocks:
        # yer// websockety
            a.con = function(c) {
               var conin = c.conin;
               if (C[conin] && C[conin].readyState == 1) {
                      return;
               }
               c = new WebSocket(conin);
               c.conin = conin;

               C[conin] = c;
               if (w.conin === conin) {
                       w = c;
               }

               c.onmessage = function (ev) {
                   s = c;
                   a.m(ev.data);
               };
               c.onopen = function () {
                  a.alive(c);
               };
               c.onclose = function () {
                  a.dead(c);
                  a.recon(c);
               };
            };
            a.dead = function (c) {
                if (c != w) {
                    return;
                }
                a.c("closed "+c.conin);
                $('body').stop().css('-webkit-filter', 'blur(3px) brightness(1.3) contrast(2)'); //# c dead # grayscale(0.8) hue-rotate(300deg) invert(0.8) saturate(4.3)
            };
            a.alive = function (c) {
                a.c("connected "+c.conin);
                if (c != w) {
                    return;
                }
                $('body').stop().css('-webkit-filter', '');
            };
            a.recon = function (c) {
              fail++;
              var t = 25600;
              if (fail < 20000) {
                  t = 256;
              }
              setTimeout(function(){
                  if (C[c.conin] == c) { // still
                      a.con(c);
                  }
              }, t);
            }
            WebSocket.prototype.reply = function reply (stuff) {
                  this.send(JSON.stringify(stuff));
            };
            WebSocket.prototype.r = function r (stuff) {
                  this.send(JSON.stringify(stuff));
            };

            a.codeso = ['W/Hit', 'W/Tel', 'W/Hoo', 'W/Yoo'];
            a.codelo = function(s) {
                if (s) {
                    var m = s.split("\n");
                    $.each(m,function(i,v){ a.m(v); });
                }
                if (a.codeso.length) {
                    $.ajax(a.codeso.shift()).done(a.codelo);
                }

            };
            $(document).ready(function(){
                a.c("ello");
                if (location.pathname != '/')
                    a.codeso = [a.codeso[0]];
                a.codelo();
                if (location.search.match('^\\\?v='))
                    setTimeout(function(){ a.putontv(location.search) }, 6420);
                a.con(w);
            });
Tism: |
    0 && <<'';
        require Image::Magick;
        my $cand_photo = Image::Magick->new;
        #my $decoded = decode_base64($args{image_string});
        $cand_photo->read(blob=>$decoded);

        #save original
        $cand_photo->Write($f.".igk\.jpg");

        #resize
        $cand_photo->Set( Gravity => 'Center' );
        $cand_photo->Resize( geometry => '120x120' );
        $cand_photo->Extent( geometry => '120x120' );
        #save thumbnail
        $cand_photo->Write($f.".gth\.jpg");

    
    put '/tism' => sub {
        my $m = shift;
        my $c = $m->req->body;
        $c =~ s/^data:image\/jpeg;base64,//;
        my $decoded= MIME::Base64::decode_base64($c);
        
        my $h = $m->req->query_params->to_hash;
        saybl " Find: ".wdump 3, $h;
        my $run = substr($G->{id},0,4);
        my $dir = "znap";
        my $rundir = "znap/$run";
        `mkdir $rundir` unless -d $rundir;
        my $name = h.g || sprintf '%06d', $G->{tismi}++;
        my $f =  "$rundir/$name\.jpg";
        say "Go to $f four ".length $c;
        $f = "/home/s/shed/$f";
        -f $f ||
        write_file($f,{binmode=>':raw'},$decoded);
        $m->render(text => 'yup');
    };

