NutDung: | # getting things/I
    u j
    n \'of:eye'
    # bring W and the I's insides together into a namespace
    #    I has I.? and I.?.?
    #    I.? gets talked about by many W, projected by many
    #    though it (eg C.t='i') may not be in Where,
    #    it would be more realistic to mix into A etc from names,
    #    containing personalities
    # so all W-ish things are equal
    # could even find that some remote W contains an I.? thing it wants,
    # and decide to use it
    ting: %acgt:t ver
        // blocking unless a&async
        // get content from
        $get = '/js/'+t;
        ver and get += '/'+ver;
        $.get(get);

    # look up A slope for the I/$s (embryo) or the I/$s/$t (part)
    # wants to be able to jump up the slope,
    # want a type, like http's Accept header,
    #   so G&ting can upstantiate it
    #   things coming alive because of this will have thresholdia
    #   do you want to trust someone else's version of t,
    #   or do you run all the simulations yourself?
    # 
    # < elvis a J for it
    #   esp. if you can resync when it's downloaded
    t: %acgt:s t
        $c;
        typeof s == 'object' and c = s; s = c.of
        $D;
        $.each([1,2,3,4,5], &i,v{
            D and return;
            var Y = A[v];
            !Y and return;
            var I = Y.I;
            !I and return;
            D = I[s];
            D and t and D = D.y.tw[t];
        });
        !D and s == 'js' and return G&t_js,c,t
        return D;
    
    # W t means W of t,
    # W:js t means W:js titled t, which is what we deal here...
    #  resourcing quests needing question time
    #   need you to follow them through
    t_js: %acgt:s t
        $c;
        typeof s == 'object' and c = s; s = c.of
    
    # if G&t of:js t=NutMachine turns up nothing,
    # it can use the /js/ meaniture, storing the resultant thing
    # into 5s&things.js.
    
    entre:
        G&jsung,'NutMachine',null,cb;
    
NutCore: | # doc universals, map room
    return;
    u k
    # a dialect/personality for relationships
    # or boundary effects
    # stuff to one day compile into the throat
    # points for things with scattered use by other things
    # including clues for the likes of -od
    
    # cv is loftiness of use
    
    on 1: %on:A.
        # the html element om el 3 will build in
    on 8: %in:k
        # where/what object can this name be:
        # s        C.sc (default)
        # c        C.c
        # a        A.sc
        # A        A.c
        # A.    in A
        # J        J.sc
        # j        j.c
    in 8:
        # what dialect (u name) this name happens in
        
    
    N: %on:a,J
        # it contains A with desire to thro
        # can nest on any Js&N, most importantly 4s&N
        #   the out-J should resolve any in-Js&N,
        #   put edge to the pile of intention,
        #   before attention drifts away
    
    ready: %on:a
        # bool - is the A ready to resync
        # set to 1 when request is served
        # N groupey A may slightly wait for a consensus of readyness
        # 
    
    # oscillator steps
    u s
    J 4:
        # see if we should listen or if its got news 
NutCode: | # om suvber
    u js
    n \'of:om'
    # 
    
NutBung: | # getting W from I, D from B, and errorifics
    u j
    n \'of:eye'
    
    # the edge of the mind is these items...
    # they could know their 4s&mind?
    addscript: %acgt:src cb
        var script = document.createElement('script');
        script.setAttribute('src', src);
        script.setAttribute('type', 'text/javascript');
        cb and script.onload = &e{ cb(script,e) };
        A.on.appendChild(script);
        return script

    # when error
    # < communicate to thro if handley
    # generic linkage to source finding?
    Ban: %acgt:msg url lineNo colNo er
        $style = "font-size:156%,color:red";
        // catch up innard
        $mid = Math.random().toPrecision().match('\.(\\d+)')[1];
        mid = 'id'+mid;
        $fil = &s,append{
            $lin = $('a#'+mid)[0];
            append and s = lin.innerHTML + s
            lin.innerHTML = s;
        };
        $say = msg+'<a id="'+mid+'" href="#" style="color:white">?<a>';
        
        $W
        $ver
        
        $v = new URL(url);
        $src = v.pathname;
        $m = src.match('^\/js\/(\\w+)-(\\w+)(\\.js)');
        if (m) {
            W = m[1];
            ver = m[2];
        }
        $Wsay = '';
        W and Wsay = W+': ';
        $e = '<span style="'+style+'">! '+Wsay+say+'</span>';
        G&c,e;
        console.log("er: ",msg,url,lineNo,er);
        
        !m and return fil(url);
        
        // get the lines, in the <script> already?
        $.ajax(src).done(&s,how,c{
            how != 'success' and throw "Ban faile: "+how, c;
            $src = c.getResponseHeader('Location');
            $m = src.match('^\/js\/(\\w+)-(\\w+)(\\.js)');
            $W = m[1];
            $ver = m[2];
            $lines = s.split("\n");
            $l = lines[lineNo-1];
            $prior = 1;
            $sub
            while (1) {
                prior++;
                $line = lines[lineNo-prior];
                line == null and break;
                $fu = line.match('^function '+W+'_'+ver
                    +'(\\w+)_(\\d+)_(\\w+)_(\\d+)\\(');
                !fu and continue
                $cv = '';
                fu[4] != '1' and cv = fu[4]
                sub = fu[1]+cv+'/'+fu[3];
                break
            }
            sub ||= "see "+v;
            fil(sub+": "+l);
        });
        
        // check if current
        $.ajax('/js/'+W).done(&s,how,c{
            how != 'success' and throw "Ban faile: "+how, c;
            $rep = c.getResponseHeader('Location');
            src != rep and fil("(old)",1);
        });
        
        
