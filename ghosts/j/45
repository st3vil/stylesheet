LandSty: | # js jigup
    my $t = 'Stylands';
    n NetJig=>W=>{the_W=>$t}
    n NetJig=>W=>{the_W=>'Stylesea'}
    #n NetJig=>W=>{the_W=>'Stylewholes'}
    return;
    my $bb = &s{
        my $C = G&Ct,['toNetJig',1,{s=>$s}];
        Rw JaBabz $C;
        c&s
    };
    
    my $c;
    c.eat = [
        map { G&Ct:["try out  $t",'',{},{e=>$_}]; }
            $bb->(<<''),
                G&c:'::'+C.t;
            $bb->(<<''),
                c$ = ["","",{"W":"LandSty"},{"z":[["Fish","",{"el":"1","lv":"blank/neu/Fish"},{}]]}];
                A = A[5];
                G&om,c;
    ];
    
    G&elph,NetPut=>[out=>1=>$c]
    
Stylands: | # reading bay/el/Figures/1,2 and etc
    u jc
    n \'of:om'
    
    # s&lv spawns a c&lv within itself
    lv 66: %nk:sc
        G&om,[C.t,'',{lv:s},C.sc]
    
    # c&lv haps before/without el creating an element 
    # G&nn manually to A.b self
    # G&oms the lv at the same A.on
    lv 17:
        $b = A.b;
        G&nn;
        A.b.lv ||= {};
        $lv = A.b.lv;
        s&f and lv.f = s&f;
        !lv.f and ~die~LVnof: C, lv
        lv.haN ||= {};
        A.b = b;
        !c&seeks and c&seeks = [s];
        t$
        $.each(c&seeks, &i,v{
            lv.haN[v] and return
            t ||= v
        });
        if (t) {
            $.ajax('shed/'+lv.f+'/h/'+t).done(&L{
                !L.length and ~noL: lv.f, t
                $l = lv.haN[t] = G&readLines,L;
                !l.length and ~nolinesin: t
                l = l[l.length-1];
                $h = ''
                ls&parent and h = 'v '+ls&parent;
                ~lvread: C.t, t, h
                ls&parent and c&seeks.push(ls&parent);
                G&yl:30,&{ G&throat,7 };
            });
            return T.not = '2';
        }
        // now from oldest to newest
        c&seeks.reverse();
        if (lv.ha) {
            $is
            $.each(c&seeks, &i,v{
                lv.ha === v and is = 1;
            });
            while (is && c&seeks.length) {
                while (c&seeks[0] === lv.ha) {
                    c&seeks.shift();
                    is = 0;
                }
                is and c&seeks.shift();
            }
        }
        $ii = 0;
        $wi = 0;
        $ha;
        $.each(c&seeks, &i,t{
            ii++;
            $N = lv.haN[t];
            $.each(N, &i,v{
                wi++;
                G&om,v;
            });
            ha = t;
        });
        
        $bumps = ii+'x'+wi;
        ~wlv: C.t, s, lv.ha, bumps
        ha and lv.ha = ha;
        return T.not = 1;
        
        
    
    #c Lines - should Wunify remote file seeings
    
    n \'of:i'
    u j
    readLines:
        $L = s.split("\n");
        $tot = L.length;
        $N = [];
        $stack = [];
        
        //try{
        while (L.length) {
        
        $l = L.shift();
        !l.length and continue
        //console.log("Lam: "+l);
        $lin = l.match(/^(\s*)(.*)$/);
        $ind = lin[1];
        $d = ind.length / 2;
        l = lin[2];
        $li = l.split("\t");
        $t = li[0];
        $y = li[1];
        $c = li[2];
        $sc = li[3];
        $s = li[4];
        
        t.match(/^\W/) and t = $.parseJSON(t);
        
        y ||= 1
        y = 1*('0.'+y);
        
        if (s && s.match(/^\W/)) {
            s = $.parseJSON(s);
        }
        if (c && c.match('^"')) {
            s = $.parseJSON(c);
            c = {};
        }
        else if (c && c.match(/^\W/)) {
            c = $.parseJSON(c)
        }
        else if (c) {
            c = G&peel,c
        }
        else { c = {} }
        
        s and c.s = s;
        
        if (sc && sc.match(/^\W/)) {
            sc = $.parseJSON(sc)
        }
        else if (sc) {
            sc = G&peel,sc
        }
        else { sc = {} }
        
        $C = {t:t,y:{cv:y},c:c,sc:sc};
        
        $k
        $v
        $indenting = &{
            !L.length and return;
            $m = L[0].match("^"+ind+"  (\\w[\\w ]+):(?: (\\||.+))?$");
            !m and return;
            k = m[1];
            v = m[2];
            return 1;
        };
        while (indenting()) {
            $string
            if (v === '|') {
                string = 1;
                v = undefined;
            }
            v && v.match(/^\W/) and v = $.parseJSON(v)
            L.shift();
            k = k.split(' ');
            $nk = k.shift();
            $gk = k.join(' ');
            if (!v) {
                $s = [];
                $one;
                $blockquoting = &{
                    !L.length and return;
                    $m = L[0].match("^"+ind+"    (.*)$");
                    !m and return;
                    one = m[1];
                    return 1;
                }
                while (blockquoting()) {
                    s.push(one);
                    L.shift();
                }
                v = s.join("\n");
                //console.log("Loaded "+nk+gk+": "+v+'  Next: '+L[0]);
                if (!string) {
                    v = jsyaml.load(v);
                }
                else {
                    !v.match(/\n$/) and v = v+"\n"
                }
            }
            C[nk][gk] = v;
        }
        
        stack[d] = C;
        if (d) {
            $p = stack[d-1];
            !p and console.log('plos',d-1,stack,C);
            ps&z ||= [];
            ps&z.push(C);
        }
        else {
            N.push(C);
        }
        
        }
        //}
        //catch (e) {
        //    throw ["On line "+(tot - L.length)+": "+l, e];
        //}
        return N
        
ach: | # inhale Lines
    my @l = ref $s ? @$s : split "\n", ($s || ''.`cat $f`);
    my $tot = @l;
    my $N = [];
    local A.V = 0;
    my @in;
    my $l;
    my $peel = &s{
        return {map { split':',$_ } split ',', $s}
    };
    eval{
    while (@l) {
        $l = shift @l;
        my ($in) = $1 if $l =~ s/^(\s+)//;
        my $d = length($in) / 2;
        my ($t,$y,$c,$sc,$s) = split "\t", $l;
        
        sayyl "$in $l";
            
        $t = djson $t if $t =~ /^\W/;
        
        $y = 1 if !length$y;
        $y = 0+('0.'.$y);
        
        if ($s =~ /^\W/) {
            # fifth thing would be c.s
            $s = djson $s;
        }
        if ($c =~ /^"/) {
            $s = djson $c;
            $c = {};
        }
        elsif ($c =~ /^\W/) {
            $c = djson $c
        }
        elsif ($c) {
            $c = $peel->($c);
        }
        else { $c = {} }
        c.s = $s if $s;
        
        if ($sc =~ /^\W/) {
            $sc = djson $sc
        }
        elsif ($sc) {
            $sc = $peel->($sc)
        }
        else { $sc = {} }
        
        my $C = {t=>$t,y=>{cv=>$y},c=>$c,sc=>$sc};
        
        # add blockquoted c/sc
        while ($l[0] =~ /^$in  (\w[\S ]+):( (\||.+))?$/) {
            my ($k,$v) = ($1,$3);
            my $string;
            if ($v eq '|') {
                $string++;
                undef $v;
            }
            shift @l;
            my ($nk,$gk) = split ' ', $k, 2;
            sayyl "$in C.t C.y.cv - $nk $gk ($string) $v";
            unless ($v) {
                saybl $in."Beaming in";
                my @s;
                while ($l[0] =~ /^$in    (.*)$/) {
                    push @s, $1;
                    shift @l;
                }
                $v = join "\n", @s;
                sayyl "Loaded til $l[0]\n with $nk $gk - ".slim(30,$v);
            }
            unless ($string) {
                $v = Load $v
            }
            else {
                $v .= "\n" unless $v =~ /\n$/s;
            }
            
            $C.>$nk.>$gk = $v;
        }
        
        saygr "Popped $in".ki$C;
        $in[$d] = $C;
        if ($d) {
            my $p = $in[$d-1];
            push @{ps&z||=[]}, $C;
        }
        else {
            push @$N, $C;
        }
    }
    };
    $@ && die "On line ".($tot - @l).": $l\n\n$@";
    $N

