WebHost: |
    # use Mojo,
    # chew up Stylehut into bootstrappings and send
    saygr "Being a WebHost";
    u Styleslops
    use Mojolicious::Lite;
    use MIME::Base64;
    push @{app->static->paths}, '/home/s/styleshed/public';
    app->secrets(["nothing"]);
    
    #G.c.listen = readlink('listen') if -l 'listen';
    Gc&listen = '127.24.35.46:10433';
    my $s = Gc&listen || "s:10094";
    $s = "http://$s" if $s !~/^http:\/\//;
    
    S
    n Baye
    
    my $A = G&A,'requesto';
    A.V = 1;

    get '/' => &c{
        my $U = G&t,html=>'index';
        my $s = Uc&s;
        $s =~ /html/ || die "Not html? ".ki $U;
        sayre "Giving start";
        $c->render(text=>$s);
    };
    
    get '/thestart' => &c{
        my $i = $c->param('step') || 0;
        sayre "T wants to start at $i";
        my $next = "/thestart?step=".($i+1);
        my $s = Rw StartHut $i
            || return
                $c->render(text=>"G\.h(A,C,G,T,'c','started')");
        $c->render(text=>"A\.sc\.start\.push('$next');\n$s");
    };
    
    # image receiver
    Rw Tism;
    
    websocket '/s' => sub {
        my $mojo = shift;
        1 && sayyl "Connect!";
        die "No GWebsock yet" unless G.Websock;
        G.Websock->($mojo);
    };
    
    Gc&clockon = sub {
        Gc&startedclockalready ++ && return sayre "Trying to start again";
        1 && saybl "Starting  G.t     listens: $s";
        1 && saygr "Appstart: ". app->start('daemon', '--listen' => "$s");
    };
    
    # then later within the timer...
    
    my $txm = J.txm ||= [];
    # handle each...
    G.Websock = J.Websock ||= sub {
        my $mojo = shift;
        1 && say "Web is socked!";
        my $s = $mojo;
        my $tx = $s->tx;
        push @$txm, $tx;
        my $addr = $tx->remote_address;
        Mojo::IOLoop->stream($tx->connection)->timeout(300000);
        $tx->max_websocket_size(512000);
        $s->on(message => sub {
            my ($M, $m) = @_;
            $m = encode_utf8($m);
            1 && sayyl "Message from $addr ".$m;
            my $d = eval { djson $m };
            $@ && die "Message doesnt decode: $@\n\n$m";
            
            ref $d ne 'HASH' && return saybl "Weird message: $m";
            
            
            if (my $W = d.W) {
                -d $W || die "Not a host: $W";
                my $in = "$W/in";
                my $s = G&Ct,[Win=>[jse=>''=>{s=>$d}]];
                write_file($in,{append=>1},sjson($s)."\n");
                sayre "sent $W: ".ki $d;
            }
            else {
                sayre "freak e: ".ki $d;
            }
        });
        $s->on(finish => sub {
            my ($M, $code, $reason) = @_;
            @$txm = grep { $_ ne $tx } @$txm;
            1 && sayre "Gone: $addr $code $reason";
        });
        G.Websup->() if G.Websup;
    };
    
    G.Websen = J.Websen ||= sub {
        my $m = shift;
        # $m = decode_utf8($m); # comes from inside
        @$txm || return sayre "No client, dropping: ".slim 50, $m;
        1 && saybl "Sending ".slim 2050, $m;
        for my $tx (@$txm) {
            $tx->send($m)
        }
    };
Styleslops: | # minimal page that sucks in more stuff from Stylehut
    # use the js filter, store in ...
    index: %js:html
        <!DOCTYPE html>
        <html><head>
          <style type="text/css">
              @font-face {
                font-family: DVSM;
                src: url('DejaVuSansMono.ttf');
            }
            body {
                font-family: DVSM, mono;
            }
            ww * { pointer-events:none; }
            ww * * { pointer-events:all; }
          </style>
          <link href="light.css" rel="stylesheet"></link>

          <script src="codemirror/lib/codemirror.js"></script>
          <link href="codemirror/lib/codemirror.css" rel="stylesheet">
          <link href="codemirror/theme/night.css" rel="stylesheet">
          <link href="codemirror/theme/midnight.css" rel="stylesheet">
          <link href="codemirror/theme/base16-dark.css" rel="stylesheet">
          <link href="codemirror/addon/display/fullscreen.css" rel="stylesheet">
          <script src="codemirror/addon/display/fullscreen.js"></script>
          <script src="codemirror/mode/perl/perl.js"></script>
          
          <script src="paper.js"></script>
          <script src="paper.animate.js"></script>
          
          <script src="jquery.min.js" type="text/javascript"></script>
          
          <script src="js-yaml.min.js" type="text/javascript"></script>
        </head>
        <body style="margin: 0px; background: black; color: #0d2; height:100%; width:100%;">
          <div id='msgs' style="white-space: pre;position:absolute;font-size:60%;left:0em;bottom:0em;width:50%;height:28%; overflow:hidden;padding:0.2em;color:#abc;z-index:200" onclick="G.keon();G.clon();G.togwid('#msgs','50%','5%');" > </div>
          <div id='ux' style="position:absolute;top:0em;
          right:0em;width:100%;height:100%;"> </div>

          <canvas id="display" resize></canvas>

          <script type="text/javascript">
            var A = {c:{},sc:{}};
            var C = {};
            var G = {};
            var T = {};
            A[5] = A[1] = A;
            a&elvis = Math.random();
            a&start = ['thestart'];
            A&start = &s{
                if (s) {
                    eval(s);
                    //var m = s.split("\n");
                    //$.each(m,&i,v{ eval(v); });
                }
                if (a&start.length) {
                    $.ajax(a&start.shift()).done(A&start);
                }

            };
            $(document).ready(&{
                A&start();
            });
          </script>
          </body></html>
Hutting: | # Jig stylehut into /je/
    $M = [];
    my $t = c&that || 'Stylehut';
    m $t
    n Jig=>['bay/je'=>-Gdo=>{},{everything=>0,z=>$M}]

    
StartHut: | # dripple 
    delete G.way.StartHut;
    my $i = ar.i || 0;
    my $bb = &s{
        my $C = G&Ct,['toStartHut',1,{s=>$s}];
        Rw JaBabz $C;
        c&s
    };
    # get a json encoded string
    my $enj = &s{
        $s = sjson[$s];
        $s =~ s/^\[|\]$//sg;
        $s
    };
    
    my $N = a&HutN ||= do {
        my $t = 'Stylehut';
        if (0) {
            # child exits, see also Lize for updating paths
            # 
            for my $t (reverse qw'Stylehut HutKitchen Stylaplicants') {
                my $pid = fork || do {
                    n Hutting=>W=>{that=>$t}
                };
                waitpid($pid,0);
                saygr "ok";
            }
        }
        local A.6.t = 'je';
        my $f = G&Locate_read,$t;
        my $d = G&Beach,"$f/1" if $f;
        if ($d) {
            sayre "Found C.t W in $f";
            ($d) = @$d;
            T.op = $d;
            my @W = G&op,'cW:javascript';
            [
            # send an I grower, puts the subs G.t/h
            "eval(".$enj->($bb->(<<'')).");",
                A.I = {};
                A&loadI = &v{
                    var C = {t:v[0], y:{cv:v[1]}, c:v[2], sc:v[3]};
                    console.log('loadI: '+s&js+'/'+C.t, C);
                    // to show I/t/cv in function definition
                    var t = (C.sc.js||"unknown")+"_"+C.t+"_"+(C.y.cv+"").substr(2);
                    c&code = eval(t+' = '+c&s);
                    // make I
                    A.I[s&js] ||= {t:s&js, y:{cv:0.001,tw:{},tv:{}}, c:{}, sc:{z:[]}};
                    var I = A.I[s&js];
                    // grow I
                    I.y.tv[C.t] ||= {};
                    I.y.tv[C.t][C.y.cv] = C;
                    I.y.tw[C.t] = C;
                    var l = I.sc.z.slice(-1);
                    l[0] and l[0].y.next = C;
                    I.sc.z.push(C);
                    I.y.in ||= C;
                    if (I.t === 'i' && (C.t === 'h' || C.t === 't')) {
                        G[C.t] = c&code;
                    }
                };
            # then the many I/$s=sc.js/$t
            (map{ 
                map { "A\.c\.loadI(".sjson([_.t,_.y.cv,_.c,_.sc]).");" } @{_s&z}
            } @W),
            # and connect
            "G\.h(A,C,G,T,'begin')"
            ]
        }
        else {
            die "No such $t in Gc&bay je etc";
        }
    };
    # batches of 30
    my $M = a&HutM ||= do {
        my $M = [];
        my $ii = 0;
        while ($N->[$ii]) {
            my $n = [];
            push @$M, $n;
            while ($N->[$ii] && @$n < 30) {
                push @$n, $N->[$ii];
                $ii++;
            }
        }
        @$M = map { join "\n", @$_ } @$M;
        $M
    };
    $M->[$i];
    
    
Tism: |
    0 && <<'';
        require Image::Magick;
        my $cand_photo = Image::Magick->new;
        #my $decoded = decode_base64($args{image_string});
        $cand_photo->read(blob=>$decoded);

        #save original
        $cand_photo->Write($f.".igk\.jpg");

        #resize
        $cand_photo->Set( Gravity => 'Center' );
        $cand_photo->Resize( geometry => '120x120' );
        $cand_photo->Extent( geometry => '120x120' );
        #save thumbnail
        $cand_photo->Write($f.".gth\.jpg");

    
    put '/tism' => sub {
        my $m = shift;
        my $c = $m->req->body;
        $c =~ s/^data:image\/jpeg;base64,//;
        my $decoded= MIME::Base64::decode_base64($c);
        
        my $h = $m->req->query_params->to_hash;
        saybl " Find: ".wdump 3, $h;
        my $run = substr($G->{id},0,4);
        my $dir = "znap";
        my $rundir = "znap/$run";
        `mkdir $rundir` unless -d $rundir;
        my $name = h.g || sprintf '%06d', $G->{tismi}++;
        my $f =  "$rundir/$name\.jpg";
        say "Go to $f four ".length $c;
        $f = "/home/s/shed/$f";
        -f $f ||
        write_file($f,{binmode=>':raw'},$decoded);
        $m->render(text => 'yup');
    };
NetJig: | # hop Hut updates without clearing state
    G.t = 'NetJig';
    Gc&bay = 'peace';
    
    my $bb = &s{
        my $C = G&Ct,['toNetJig',1,{s=>$s}];
        Rw JaBabz $C;
        c&s
    };
    
    my $t = 'Stylemoment';
    n $t
    my @W = G&op,'cW:javascript';
    my @n = map {
        my @m; my $n = _.y.in;
        while ($n) {
            push @m, $n;
            $n = n.y.next;
        }
        @m;
    } @W;
    
    1 && saybl "From ".ki$_ for @W;
    my $c;
    c.eat = [
        map { G&Ct:["reload ".@n." $t",'',{},{e=>$_}]; }
            $bb->(<<''),
                5c&reloadI = &v{
                    var C = {t:v[0], y:{cv:v[1]}, c:v[2], sc:v[3]};
                    console.log('reloadI: '+s&js+'/'+C.t, C);
                    eval('c&code = '+c&s);
                    // get I
                    var I = A.I[s&js];
                    var r = I.y.tv[C.t][C.y.cv];
                    // replace bits
                    if (r) {
                        r.t = C.t;
                        r.c = C.c;
                        r.sc = C.sc;
                    }
                    if (I.t === 'i' && (C.t === 'h' || C.t === 't')) {
                        G[C.t] = c&code;
                    }
                };
            # then the many I/$s=sc.js/$t
            (map{
                "A[5]\.c\.reloadI(".sjson([_.t,_.y.cv,_.c,_.sc]).");"
            } @n),
            $bb->(<<''),
                G&c:'++'+C.t;
    ];
    
    G&elph,NetPut=>[out=>1=>$c]
    
    
NetTe: | # try things out...
    G.t = 'NetJig';
    Gc&bay = 'peace';
    G.Websup = &{
        sayre "Hi";
        my $re = &{ G&elph,NetTe=>[does=>''] };
        G&timer,2,$re
    };
    
    my $jun = <<'';
            {"c":{"Mid":"Oper","Wid":"planks","el":2,"tag":"ww"},"sc":{"ab":100,"ml":"5%","poi":"none","wb":1,"ws":"pre"},"t":"GW","y":{"cv":0.1}}
    #
    
    Js&N = [ $jun,
        map { sjson $_ }
        map { G&Ct,['','',{W=>"Oper"},{z=>[$_]}] }
        map {
            _s&z = [map { G&Ct,$_ } @{_s&z}] if _s&z;
            $_
        }
        map { G&Ct,$_ }
        (map { 
            [ting=>''=>{el=>($_ eq '1' ? 2 : '3'),s=>"Ting! $_"}]
        } 1..3),
        (map { 
            [ting=>''=>{el=>3},{z=>[
                [Fivory=>''=>{el=>($_ eq '1' ? 2 : '3'),s=>"Wave $_"}]
            ]}]
        } 1..3)
    ];
    
    Js&ein.t.does = &TesC{
        T.pos = 0;
        Js&N || return sayyl "ok";
        my $i = ec&i ||= 0;
        1 && saygr "NetTe e $i";
        
        G.Websen->(Js&N->[$i]);
        $i++;
        my $re = &{ G&elph,NetTe=>[does=>'',{i=>$i}] };
        Js&N->[$i] && G&timer,0.5,$re;
    };
    S
    saygr "NetTe";
    unless (c&do) {
        return
        n WebHost
    }
    
    
Doingulate: |
    u sevu=>''=><<''=>'of:w'
        Jc&tape = "Dejo";
        my $i = Jc&i++;
        m those=>''=>"Teeth!"=>"hs:${i}77" for 1..($i*2);
        n thy=>$_=>"Food" for 3..7;
    S
    for (1..4) {
        n sevu
        sleep 1;
    }

