Elvectors: | # Elvis speaks over the land
    # out-J give/take formers
    n Elevation
    # in-J e accessors
    # < rename e->E (accessor), elph->e (ungrounded former)
    n Elverse
    # G&has hoists meta notes
    # < send them through universal index builduppers
    n Elbridge
    # the old mo:c&e tugging A=E along like a request
    n ElChorus
    # ^ slight change for new A system taking c/sc not A&N
    n ElChorerupt
Elevation: | # e give/take activity (see Elation for handlers)
    u i
    # the synapse fills
    give:
        my $es = ref $Me[0] eq 'ARRAY' ? G&Ct,shift@Me
            : do {
                @Me == 1 && unshift @Me, 's';
                G&s,@Me
            };
        G&elph,$s=>[give=>$es]
    # and drains
    take:
        my $es = ref $Me[0] eq 'ARRAY' ? G&Ct,shift@Me
            : do {
                @Me == 1 && unshift @Me, 's';
                G&s,@Me
            };
        G&elph,$s=>[take=>$es]
    # and tips out
    forget:
        my $es = ref $Me[0] eq 'ARRAY' ? G&Ct,shift@Me
            : do {
                @Me == 1 && unshift @Me, 's';
                G&s,@Me
            };
        G&elph,$s=>[forget=>$es]
Elverse: | # e accessors
    u i
    # see also With/elph for the ephemeral elvis n
    
    # e&way -> c&e.sc.way
    # to get bits of the request
    # endmost if A&E
    # could see/ip what they are looking for too
    # and give A&E clues for what the thing can do
    # to take back to the client
    E:
        my $e = c&e || return ();
        (my$q,$s) = (1,$$s) if ref $s eq 'SCALAR';
        $e = A&E.c.e if A&E; # endmost
        A&E && !$q && A&E.c.pines++;
        return $e if $s eq 'C';
        return e.t if $s eq 't';
        my $list = $s =~ s/^_//;
        my ($nk,$gk) = G&pang,$s,'c';
        exists $e.>$nk || return ();
        $e = $e.>$nk;
        if (defined $gk) {
            return $e if $gk eq 'C';
            exists $e.>$gk || return ();
            $e = $e.>$gk;
        }
        $list ? @$e : $e
    
    # looking for C.c.e.c.us.?_? in a pin
    # explicit nk/gk sep with _
    # clot of universalish nonhouse
    # for our trusted their message
    # an e&us at E 1 is a security bang
    # us should float across as e sces
    # < Bab confusable when us&do wanted as u.sc.do
    us:
        my $e = c&e || return ();
        (my$q,$s) = (1,$$s) if ref $s eq 'SCALAR';
        $e = A&E.c.e if A&E; # endmost
        $e = e.c.us || return ();
        A&E && !$q && A&E.c.pines++;
        return $e if $s eq 'C';
        my $list = $s =~ s/^_//;
        my ($nk,$gk) = split'_',$s;
        exists $e.>$nk || return ();
        $e = $e.>$nk;
        if (defined $gk) {
            exists $e.>$gk || return ();
            $e = $e.>$gk;
        }
        $list ? @$e : $e
    
    # describe A net and e
    es:
        my $cv = A.mo.cv;
        $cv =~ s/^0\.//;
        my $e = G&e,\'C';
        G&sn .":\n    ".ki($e)
            .(e.c.us && "\n        us: ".ki(e.c.us));
    
    # unhandled elvis
    # means vector is about to learn a new trick
    vent:
        my $E = A.mo.c.E;
        my ($cvb) = E.cv =~ /^0\.(\d+)$/;
        my $clear = "  (in by 1s\&tv)" if Ec&inbytv;
        $s = "Elos $cvb $s\n  at ".G&es;
        push @{G.ohno||=[]},$s;
        push @{E.c.vent||=[]},$s;
        $s =~ s/\n/$clear\n/;
        4c&mutelos || sayre $s;
        T.Z.8 = $A;
Elbridge: | # hoisting, desire
    # see Sleep/Ghoster for actuative end
    u i
    # background processes to being a network of such things
    # non-thing in 
    
    # connect a value to the vortexey hoist
    # for credits that pool up to the top level
    # want to be strung into roots, vaguing out
    # needs corner bit in multiv to merge other than sum
    # to allow G triggers
    has: %acgt:1
        @Me || die "Nothing to have";
        my $Y = $A;
        if (ref $Me[0]) {
            my $move = shift @Me;
            $move = [$$move] if ref $move eq 'SCALAR';
            for (@$move) {
                $Y = $Y.>$_ || die "No move: @$move (at $_) from ".ki $Y;
            }
        }
        my $v = @Me == 1 ? 1 : pop @Me;
        my $T = Y.c.T;
        my $S = T.has ||= {};
        my $last = pop @Me;
        $S = $S.>$_ ||= {} for @Me;
        return $S.>$last += $v if $v eq '1';
        $S.>$last = $v;
    
ElChorerupt: | # slight change for new A system taking c/sc not A&N
    u a
    n \'of:E'
    # mo tugs, wait for mind
    e 1:
        local A.V = 2;
        my $mo = A.mo;
        my $e = A&oure = c&e || die "E no e: ".wdump 3, A.c.N;
        # routes do new C.c.e = C this e came from
        # reel in the tube of routes before the request
        my @hz;
        while ($e) {
            push @hz, $e;
            $e = e.c.e || last;
        }
        if (@hz > 1) {
            e.c.hz = \@hz;
        }
        else {
            if (!e.c.us && e.c.s =~ /^\{/) {
                # network line comes in on e as listen event
                # should onward aft hz an e as meaning/request
                # making the meaning beyond the book
                # and the readers in front of it
                my $us = eval{djson e.c.s};
                die "elvis line decode error: $@\n\n cs: ".slim 300, e.c.s if $@;
                # stylehut says {event:{...}}
                if (keys %$us == 1 && us.event) {
                    $us = us.event;
                }
                if (us.p) {
                    # parse string/not to [[t,cv]...]
                }
                
            }
            if (e.c.p) {
                e.c.us.p = [map{[split '-', $_]}@{delete e.c.p}];
            }
        }
        
        # opens
        A&E = $A;
        A&e = $e;
        
        G&block,$_ && return for sub {
            !(1s&ein || 1s&seemstoe || A&pines ||
                do { A&inbytv = 1 if 1s&tv  }
                )
        };

