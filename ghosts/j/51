Interesting: | # running a cluster
    
    =head1 the G
    
    Gc&bay is the G,
        a branch and island of activity
        
        the $g is the in-G branch
            suggested in 5s&stores
        the $gd is "$bay/$g"
    
    G.t the thing, as it has its own process start
     = Ge - be generally
         reuse/lock by thaw, become G0ling under the master if extra
        many processes join, the G1, mastering a list of G*
        including G2 (5 templates), 3 (6 proc follower), 4 (tv set)
        G8s elvising, times
    
    fork - from?
    name - at depth of takeover
    Gover                                        
    
    =head1 W routing
    
    Gc&Glan the name on Opper to receive this W
Co: | # see */Co/* bay/Cluster operandis / Troom, tell G what/how
    # the G/bay usually is in one piece
    # the name being mapped out to different things
    # it may also multiply out to lots of same-ish things
    #   things - the fittings of experience
    # 
Ge: |
    # selves
    saybl "selves! G.t on Gc&bay";
    
    local A.inG = 0;
    
    
    Gs&fishing++ || 
        Rw GoFishing - WebHost;
    saybl "IDnis!";
    # pids in bay/G
GoFishing: | # become Gc&bay/G.t of G1 ideally, possibly G0
    my $p = $$;
    $| = 1; # autoflush output channel
    
    
    # mkoJ called by Wout, sends lines with Ilan on Opper
    # Opper Ilan $f elvised by Ualve on Udders
    #     Ilan unifies names/routes points by elvising Win
    G.mkoJ = &Wc{
        c.holst = $W; # geoplace on desk section
        my $Y = Gc&B.sc.A;
        c.Y = $Y; # A coming from
        G&elph,NetPut=>[out=>1=>$c]
    };
    
    # assume already 5s&stores
    Gc&bay || die "Nobay";
    
    
    my $M = [];
    
    # cluster init/takeover/join?
    `rm -rf G.c.bay/p/*`;
    `mkdir -p G.c.bay/p`;
    
    # to fork an output handler (O) and children (U)
    m Doeplr
    m Doperl
    #m Opper
    m $_ for @{ar.m||[]};
    #m Udder
    my $O;
    my $opid;
    for my $C (@$M) {
        # opens new land
        if ($opid) {
            # sets our W output
            # Opper Ilans it and sends lv elvi to WebHost/in
            $O ||= G.c.bay."/p/Opper/in";
        }
        Rw CellOvulation $C $O;
        s&pid || return
            saygr "Flies in as: C.t $$";
        saygr "Stands as:  C.t $$";
        # first handles output
        if (!$opid) {
            $opid = s&pid;
        }
    }
    G.c.bay;
Dopler: |
    Rw Tiot;
    sayre "J.t: Hihi: A.inG";
Doperl: |
    Rw Tiot;
    sayre "J.t: Hihi: A.inG";
CeLovulation: | # Ge Co, 1 finds itself
    my $i = G.c.oipi++;
    my $pa = $$;
    (s&pid = fork()) && return;
    if (ar.O) {
        # get Dejo to send new chunks of tape (z) to:
        G.c.tapeze = 'Ualve';
        # which stores and sends that address to O-ward:
        G.c.Oin = ar.O;
    }
    G.c.oparent = $pa;
    G.c.oipi = 0;
    $0 .= " $i";
    if ($C && ref $C eq 'HASH') {
        my $Gt = delete(c&Gt) || C.t;
        $0 .= ":$Gt";
        ar.take = G.t = $Gt;
    }
    Rw Washup;
    saybl "CellOvulation: $0";
    
    4s&toy->({to=>[$C]});
    saybl "Wandering Ovv";

