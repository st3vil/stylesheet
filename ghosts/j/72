AWriter: | # way up 7s&writer to make 12345
    7s&writer = &acgt{
        my $f = 1c&write_to;
        my $gd = 1c&write_bay;
        1 && saygr "We are A.1.t ($f)";
        
        # not s but the top/9
        my $s = G&hup,$C;
        
        # take meta off the 9, put ha on W
        my $meta;
        my $ub = &Cd{
            # the 9 has this old meta bunch
            # helped impart itself to s
            if (my $m = delete s&meta) {
                $meta && die "doublemeta";
                $meta = $m;
            }
            # assume W is in G
            if (my $t = s&W) {
                $t =~ s/\W+/-/gs;
                my $d = "$gd/$t";
                -d $d || die "Nod $d";
                my $ha = readlink "$d/1";
                $ha =~ s/^h\///;
                s&ha = $ha;
            }
        };
        G&ind,$s,$ub,{nohup=>1};
        
        # the 4: has 9, gist of first t/y
        # add some sc{shape,stringth,c,sc,etc}
        # < histogram and group like things
        # < compress styles
        # and collect W joins for 5
        my $W = G&Ct,['W',1];
        $ub = &Cd{
            return undef if d.d > 2;
            if (s&W) {
                my $D = G&Ct,[C.t,C.y.cv];
                Ds&W = s&W;
                Ds&ha = s&ha || die "W without ha: ".ki $C;
                push @{Ws&z||=[]}, $D;
            }
            my $D = G&Ct,[C.t,C.y.cv];
            # assuming gk is safe to join with -
            # < imply the style's encoding for FactorEase
            # like we can do for Line's
            for my $k (qw'c sc') {
                my $v = $C.>$k || {};
                keys %$v || next;
                D.sc.>$k = join'-',sort keys %$v;
            }
            # seem to prefer ytv than z connection
            # < both
            Ds&zs = @{s&z||[]} if s&z;
            Ds&zs = map{values %$_} values %{C.y.tv} if C.y.tv;
            # < more shape, classify language
            Ds&slines = split "\n", c&s if c&s;
            
            Ds&W = s&W if s&W && s&W ne C.t;
            Ds&ha = s&ha if s&ha;
            
            if (d.d == 1 && C.y.cv == 0.9) {
                Ds&ha = 'HAHAR';
            }
            G&Line,$D;
        };
        my @four = G&ind,$s,$ub;
        
        # 1/everything
        $ub = &Cd{
            my $p = join "/", @{d.path};
            my $l = eval {
            
            s&z && die "Hadz";
            delete s&z;
            delete C.y.>$_ for qw'next prev in more up tv tw';
            G&Line,$C;
            
            };
            $@ && die "For $p:\n  C: ".ki($C)."\n$@";
            
            $l
        };
        my @all = G&ind,$s,$ub,{nohup=>1};
        
        #c storage the bits: h/$hash = content
        my $st = &st{
            $s = join "\n", @$s,'' if ref $s eq 'ARRAY';
            my $ha = slm 9, dig $s;
            `mkdir -p $f/h` if !-d "$f/h";
            my $hf = "h/$ha";
            write_file("$f/$hf", $s);
            if ($t) {
                `unlink $f/$t` if -e "$f/$t";
                `ln -s h/$ha $f/$t`;
            }
            $ha
        };
        
        # point to object: 1 -> h/$hash
        my $ha = $st->(\@all,'1');
        
        # lum feeling: 4 ~= content, 
        $four[0] =~ s/HAHAR/$ha/;
        my $foha = $st->(\@four,'4');
        
        # meta/5cience behind it: 5
        my $fi = G&Ct,[C.t,C.y.cv];
        # < Scuttle copy various light things from 9
        fi.sc.ha = $ha;
        my $z = [];
        
        # belief structure dependage
        my $xo = meta.A.xo;
        if (my $way = xo.way) {
            my $w = G&Ct,[w=>1];
            my $wz = ws&z = [];
            for my $pin (sort keys %$way) {
                my $p = G&Ct,[$pin,1];
                push @$wz, $p;
                my $v = $way.>$pin;
                if (keys %$v > 1) {
                    pc&s = $v;
                    ps&way_variants = keys %$v;
                    next;
                }
                (ps&dige,ps&used) = %$v;
                # could be a map to where/who it was used from?
                delete ps&used if ps&used eq 1;
            }
            push @$z, $w if @$wz;
        }
        
        # other meta stuff
        delete $xo.>$_ for qw'way o sWo';
        if (keys %$xo) {
            push @$z, G&Ct,[xo=>1=>{s=>$xo}]
        }
        
        # other W and their ha
        push @$z, $W if @{Ws&z||[]};
        
        fi.sc.z = $z if @$z;
        $ub = &Cd{
            delete s&z;
            G&Line,$C;
        };
        my @five = G&ind,$fi,$ub;
        my $fiha = $st->(\@five,'5');
        
        # status check point: 2 versions 1,4,5
        my $t = G&Ct,[C.t,C.y.cv];
        ts&1 = $ha;
        ts&4 = $foha;
        ts&5 = $fiha;
        my @two = G&ind,$t,$ub;
        my $twha = $st->(\@two,'2');
        
        # changelog/tree: 3 -> 2, last 3...
        my $r = G&Ct,[C.t,C.y.cv];
        (my $was = readlink "$f/3") =~ s/^h\///
            if -s "$f/3";
        # < was's 2 may eq twha, when no change, no commit?
        rs&parent = $was if $was;
        rs&2 = $twha;
        my @three = G&ind,$r,$ub;
        my $rwha = $st->(\@three,'3');
    };
    
Placement: | # org about Locate and Line
    n Liney
    J.gloway.>$_ = 1 for qw'Line Beach Believe';
    n Placey
    J.gloway.>$_ = 1 for qw'Experience Read Write Locate';
Liney: | # read/write/ lines
    u i
    # C becomes Lines (AWriter handles the many)
    n Line=>''=>G.way.Line
    # $f file/$s string/array of Lines becomes N=[C] with s&z for the many
    Beas:
        G&Beach,'',$s
    n Beach=>''=>G.way.Beach,'%acgt:f s'
    # $N=[C] with s&z becomes {i,ii} with y.in/next for many
    n Believe=>''=>G.way.Believe,'%acgt:N'
LineTest: |
    
    my $s = G&Ct,[te=>3=>''=>'%hs:34,fs:40%,f:file/land/of/1'];
    sc&nort = 4;
    sc&noot = 4;
    sc&nooot = 4;
    sc&s = "Four\nMiles";
    
    ss&z = [
        G&Ct,[more=>5=>"sevreal\nbitsof\ncode?\n",'%of:i']
    ];
    
    saygr "Origin: ".Dump [$s];
    
    my $z = delete(ss&z)->[0];
    my $l = Rw Line $s;
    $l .= "\n".ind("  ",
        Rw Line $s:z
    );
    
    saybl "Out: $l";
    my $N = Rw Beach $s:l $f=1;
    saybl "In: ".Dump 5, $N;
    exit;
    
Line: | # C as a tabby line
    # for Beach
    $C = $s if $s;
    my $t = C.t;
    my $y = C.y.cv;
    $y =~ s/^0\.//;
    
    # aims for simplicity of notation for G&C, G&peel
    # block quotes (BQ) big strings or data after the  line
    # uses json for anything complicated
    # z insides done by the process around this one Line
    #  - they have the same indent as BQs
    #    but their t should json or not look like BQ
    
    my $h; # hath
    h.c  = { %{C.c ||{}} };
    h.sc = { %{C.sc||{}} };
    my $n = {}; # needs json
    my $q = {}; # needs blockquote
    
    # check out how sayable the values on the line are
    my $simp = &s{
        $s =~ /^\w[\w\.\-\/]*$/s && $s !~ /\n$/ && length $s < 24
    };
    each nk,gk,v $h {
        unless ($simp->($gk)) {
            $n.>$nk.>$gk = $v;
            next;
        }
        if (ref $v) {
            if (G&oleak,$v,4 ) {
                G&oleak,$v,24 && die "Leaky $nk $gk: ".ki $v;
                # big enough to quote, simplifies remainder
                $q.>$nk.>$gk = $v;
            }
            else {
                # ref too small to quote, json hemisphere
                $n.>$nk.>$gk = $v;
            }
        }
        else {
            if (length $v > 42 && $v =~ /\n/) {
                # long enough to quote
                $q.>$nk.>$gk = $v;
            }
            elsif ($simp->($v)) {
                # decipherable to G&peel
            }
            else {
                # midway to unwieldy
                $n.>$nk.>$gk = $v;
            }
        }
    }}
    
    # quote freaks, if just a few break the peelability of many
    each nk,g $n { 
        my $v = $h.>$nk;
        next if !keys%$v;
        next if grep{!$simp->($_)}keys %$g;
        if (keys(%$g) / keys(%$v) < 0.3) {
            $q.>$nk.>$_ = $h.>$nk.>$_ for keys %$g;
        }
    }
    
    # remove quoted things and their need of json from the line
    each nk,gk,v $q {
        delete $h.>$nk.>$gk;
        delete $n.>$nk.>$gk;
    }}
    each nk,gks $n {
        delete $n.>$nk if !%$gks; # all freaks got quoted
    }
    
    # get a json encoded string
    my $enj = &s{
        $s = sjson[$s];
        $s =~ s/^\[|\]$//sg;
        $s
    };
    
    # t can be messy
    my $l = $simp->($t) ? $t : $enj->($t);
    
    # y.cv = 1 is implied
    $l .= "\t".($y ne '1' ? $y : '');
    
    # throw it one way or another
    for my $nk (qw'c sc') {
        my $v = $h.>$nk;
        if ($nk eq 'c' && 0 == keys %$v) {
            # blank
            $l .= "\t";
        }
        elsif ($nk eq 'c' && 1 == keys%$v && v.s) {
            # t y "the s" sc
            $l .= "\t".$enj->(v.s);
        }
        elsif ($n.>$nk) {
            # t y {c} {sc}
            $l .= "\t".$enj->($v);
        }
        elsif (keys %$v) {
            # t y W:At et:3,se:te
            my @k = sort keys %$v;
            $l .= "\t".join",",map{ "$_:".$v.>$_ } @k;
        }
    }
    
    my @l;
    #c add quoted things at the z indent
    # < quoting with Line other N/C looking vals
    each nk,gk,v $q {
        my $k = "  $nk $gk:";
        if (ref $v) {
            # BQ yaml data
            $v = Dump $v;
            $v =~ s/^--- \n//s;
            $v = join "\n", map{"    $_"}split"\n",$v;
            $k .= "\n".$v;
        }
        elsif ($simp->($v)) {
            # simple strings
            # not confusible into 'Thing 2'
            $k .= " $v";
        }
        elsif ($v !~ /\n$/) {
            # BQ implies trailing \n
            $k .= " ".$enj->($v);
        }
        else {
            # BQ string
            $k .= " |\n".join "\n", map{"    $_"}split"\n",$v;
        }
        push @l, $k
    }}
    
    @l = sort @l;
    my @large;
    @l = grep{$_} map {
        if (300 < length $_) {
            push @large, $_;
            undef
        } else { $_ };
    } @l;
    $l = join "\n", $l, @l, @large;
    
    $l
Beach: | # inhale Lines
    my @l = ref $s ? @$s : split "\n", ($s || ''.`cat $f`);
    my $tot = @l;
    my $N = [];
    local A.V = 0;
    my @in;
    my $l;
    my $lastC;
    my $peel = &s{
        return {map { split':',$_ } split ',', $s}
    };
    my @oL;
    eval{
    while (@l) {
        $l = shift @l;
        push @oL, $l;
        my ($in) = $1 if $l =~ s/^(\s+)//;
        my $d = length($in) / 2;
        my ($t,$y,$c,$sc,$s) = split "\t", $l;
        
        sayyl "$in $l";
            
        $t = djson $t if $t =~ /^\W/;
        
        $y = 1 if !length$y;
        $y = 0+('0.'.$y);
        
        if ($s =~ /^\W/) {
            # fifth thing would be c.s
            $s = djson $s;
        }
        if ($c =~ /^"/) {
            $s = djson $c;
            $c = {};
        }
        elsif ($c =~ /^\W/) {
            $c = djson $c
        }
        elsif ($c) {
            $c = $peel->($c);
        }
        else { $c = {} }
        c.s = $s if $s;
        
        if ($sc =~ /^\W/) {
            $sc = djson $sc
        }
        elsif ($sc) {
            $sc = $peel->($sc)
        }
        else { $sc = {} }
        
        my $C = {t=>$t,y=>{cv=>$y},c=>$c,sc=>$sc};
        my @il;
        
        # add blockquoted c/sc
        while ($l[0] =~ /^$in  (\w[\S ]+):( (\||.+))?$/) {
            my ($k,$v) = ($1,$3);
            my $string;
            if ($v eq '|') {
                $string++;
                undef $v;
            }
            $v = djson($v) if $v =~ /^\W/;
            push @il, shift @l;
            my ($nk,$gk) = split ' ', $k, 2;
            sayyl "$in C.t C.y.cv - $nk $gk ($string) $v";
            unless ($v) {
                saybl $in."Beaming in";
                my @s;
                while ($l[0] =~ /^$in    (.*)$/) {
                    push @s, $1;
                    push @il, shift @l;
                }
                $v = join "\n", @s;
                sayyl "Loaded til $l[0]\n with $nk $gk - ".slim(30,$v);
                unless ($string) {
                    $v = Load $v
                }
                else {
                    $v .= "\n" unless $v =~ /\n$/s;
                }
            }
            
            $C.>$nk.>$gk = $v;
        }
        
        saygr "Popped $in".ki$C;
        $in[$d] = $C;
        if ($d) {
            my $p = $in[$d-1];
            $p || die "No parent, indent madness? (d=$d) "
                .wdump 4,{line=>$l,blockquotes=>\@il,prev_line=>$oL[-2]};
            p.y.tw.>C.t = $C;
            p.y.tv.>C.t.>C.y.cv = $C;
            push @{ps&z||=[]}, $C;
        }
        else {
            push @$N, $C;
        }
    }
    };
    $@ && die "On line ".($tot - @l).": $l\n\n$@";
    $N
Believe: | # fold Waters together into i/ii
    # take $N, produces A.i/A.ii
    my $hup = &s{
        my $C = {%$s};
        $C.>$_ = {%{$C.>$_ }} for
            grep {ref $C.>$_ eq 'HASH'} keys %$C;
        $C
    };
    # t v = C what are with sz D
    my $tv = {};
    for my $P (@$N) { # Punter 9
        for my $C (@{Ps&z||[]}) { # Water 0.001
            c&W || next;
            
            $C = $hup->($C);
            C.y = {cv=>C.y.cv};
            my $z = delete s&z;
            
            if (my $c = $tv.>C.t.>C.y.cv ) {
                # merge sc from the rest?
                cs&contrib .= ",P.t";
                $C = $c;
            }
            else {
                s&contrib = P.t;
                $tv.>C.t.>C.y.cv = $C;
            }
            s&z ||= [];
            for my $D (@$z) { # Doing 1
                if (my $over = C.y.tv.>D.t && C.y.tv.>D.t.>D.y.cv ) {
                    @{s&z} = grep { $_ ne $over } @{s&z};
                    delete C.y.tw.>D.t if C.y.tw.>D.t eq $over;
                }
                C.y.tv.>D.t.>D.y.cv = $D;
                C.y.tw.>D.t ||= $D;
                push @{s&z}, $D;
            }
        }
    }
    
    # tw of 
    my $ii = {};
    each t,cv,C $tv {
        $ii.>$t && die "$t comes again at $cv";
        if (s&contrib =~ /,/) {
            # wants to sort in to z above?
            @{s&z} = sort {a.y.cv <=> b.y.cv || a.t cmp b.t} @{s&z}
        }
        my $la;
        for my $D (@{s&z}) {
            $D = $hup->($D);
            Ds&coded || sayre "Not coded: ".ki$D;
            delete Ds&coded;
            Dc&code = eval Dc&s;
            
            die "Throcompile Ds&of D.y.cv: D.t:"
            .ind('  ',$@)."\n\n D.c.s\n" if $@;
            die "Not code: D.t D.y.cv: $@\n".ki $D if ref Dc&code ne 'CODE' && !Ds&subpeel;
            
            if (!$la) {
                C.y.in = $D;
            }
            else {
                la.y.next = $D;
                D.y.prev = $la;
            }
            $la = $D;
        }
        $ii.>$t = $C;
    }}
    
    my $i = {};
    my $n = ii.i;
    while ($n) {
        if (nc&code) {
            $i.>n.t = nc&code;
            ii.i.y.tw->{n.t} = $n;
        }
        $n = n.y.in || n.y.next;
    }
    
    {i=>$i,ii=>$ii}
Placey: | # locate lines
    u i
    
    n Experience=>''=>G.way.Experience
    
    n Read=>''=>G.way.Read
    
    n Write=>''=>G.way.Write
    
    Locate_read: %acgt:t s
        G&Locate,'read',$t,$s
    
    Locate_write: %acgt:t s
        G&Locate,'',$t,$s
    
    n Locate=>''=>G.way.Locate,'%acgt:read t s'
Experience: | # wake ourself up, short of resuming osc
    # wakeup, dome, goto sleep
    # domes build like carpentry
    # force needs ways to build across language
    
    # in: be somewhere you've been betfore:
    A.6.t ||= 'stay';
    # out: bet somewhere else:
    A.7.t ||= 'gou';
    
    # remember aft s
    1c&sang = &acgt{
        local A.V = 2;
        G&Write;
    };
    
    # wake up now
    G&Read;
Locate: | # A J and its space
    # looking for/center of us
    my @J = $t || A.1.t;
    
    # right: our osc page by /s/$s, if not ''
    # layers/partitions upon a piece of the tree
    push @J, s=>$s if $s;
    
    # left up to A.3, Word to the overmind, amongst A.4/G
    # inners join by W(/j/j.t)+
    unless ($t || A.1 eq A.3) {
        my $j = A.1;
        while (j.2) {
            $j = j.2;
            unshift @J, j.t=>'j';
            last if $j eq j.3;
        }
    }
    
    # make safe
    s/\W+/-/gs for @J;
    
    # most left, beyond all sense
    my $star = G.c.bay || die "no community of G";
    
    # second most left, edge of sense
    my $t; # G having W
    # run cateGories we orGanise chaos into, a Gravity of W
    # G is a moving path, many may have a J
    # there is a moving part between infinity and finity
    # we may work off and onto several G
    # place of work, the worker and the Gallery
    # travelling process sense and wormhole sense                              
    # probably all: A.4.t, same name as worker
    my @search = $read ?
        # 6 for travel instructor
        #     can wire readonly chunks
        # 5 mind factory/stable but not ours to write to
        # 4 for usual reading ourselves
        (6,5,4)
        # 7 for explicit output place, a branch
        # 4 for usual overwriting ourselves
        # with A.8 having a stabilised A.4.t,
        #   running tests through forks
      : (7,4);
    # < any of them implementing a more complicated search/resolver
    
    my $f; # path to dir full of head/xo/c/etc files and s/j/etc dirs
    my $gd; # the G dir its in, before Jing
    for my $num (@search) {
        my $j = $A.>$num;
        next if !$j;
        my $jt = j.t;
        $jt =~ s/\W+/-/gs;
        $gd = join '/', $star, $jt;
        $f = join '/', $gd, @J;
        my $e = -e $f;
        $read && !$e && next;
        $t = j.t;
        last;
    }
    
    return if $read && !$t;
    ($f,$gd)
LowCat: | # Locate (arbitrarily), read (some 1-5) & Beach
    my $bay = ar.bay || Gc&bay || die "Nobay";
    my $g = ar.g || A.6.t || die "Nog";
    my $t = ar.t || die "Not"; # 'You' or 'You/pi' or ['You','pi']
    ($t,my@ja) = ref $t ? @$t : split /\//, $t;
    $t = [$t];
    push @$t, 'j',$_ for @ja;
    s/\W+/-/gs for @$t;
    
    my $f = join "/", $bay, $g, @$t;
    -d $f || sayre("No file: $f") && return;
    
    # Wdir has 1-5, maybe j/, s/ in it
    my ($n) = ar.n || ar.m && ar.m->[0] || 1;
    
    $f = "$f/$n";
    -f $f || sayre("No file: $f") && return;
    
    my $N = Rw Beach $f $s=0;
    
    @$N != 1 && die "non-singular Beaching $f: ".wdump 3, $N;
    
    $N->[0]
    
    
Read: | # the J you're in remembers itself
    # having created a place for it to land
    my $s = ''; # TODO osc channel, api here too Jeneral
    my $f = G&Locate_read
        || saybl("Nothing to read A.1.t") && return;
    1c&read_from = $f;
    #saybl "Read located: $f";
    my $head = "$f/head";
    my $d = 1s&Read.>$head ||= {};
    my $m = (stat $head)[9];
    if (ds&meta.mtime eq $m) {
        # sleep J?
    }
    else {
        -f $head || die "Read no $head";
        $d = LoadFile("$f/head");
        ds&meta.mtime = $m;
        1s&Read.>$f = $d;
    }
    
    return $d
Write: | # the 
    # C is a completed s, Jc&sang = &acgt{ to get here
    c&imp || die "C not completed s: ".ki$C;
    
    my ($f,$gd) = G&Locate_write;
    #saybl "Write located: $f";
    1c&write_to = $f;
    1c&write_bay = $gd;
    
    my $write = &C{
        # forked, C is the top (9)
        `mkdir -p $f`;
        DumpFile("$f/head",$C);
        
        if (my $m = s&meta) {
            # applies to the Reading s
            # separately for map makers
            if (my $xo = m.A.xo) {
                DumpFile("$f/xo",$xo);
            }
            if (my $c = m.c) {
                DumpFile("$f/c",$c);
            }
        }
        
        if (my $y = 7s&writer) {
            $y->($A,$C,$G,$T);
        }
    };
    # fork and disconnect subtle/wirings
    # but keep in/next/tv etc connected
    # wants to output lines of [C], but for the same ref Tricks
    G&stowexp,$write;
ReadMe: | # the J you're in remembers itself
    # having created a place for it to land
    my $s = ''; # TODO osc channel, api here too Jeneral
    my $f = Rw Locate $read=1 $t=0 $s=0;
    $f || saybl("Nothing to read A.1.t from A.6.t / A.7.t") && return;
    1c&read_from = $f;
    #saybl "Read located: $f";
    my $head = "$f/1";
    my $d = 1s&Read.>$head ||= {};
    # < for Wall to deal in
    my $m = (stat $head)[9];
    if (ds&meta.mtime eq $m) {
        # sleep J?
        1 && saygr "ReadMe Sleeps: $head";
    }
    else {
        -f $head || die "Read no $head";
        $d = Rw Beach $s=0 $f:head;
        ($d) = @$d;
        ds&meta.mtime = $m;
        1s&Read.>$f = $d;
        1 && saygr "ReadMe belivei: $head";
    }
    return $d
NamePosition: | # determine s&naming
    my $n = s&naming = {};
    
    # should get all naming in this pile
    # 
        my @js = my $j = A.1;
        while (j.2 && $j ne j.3) {
            $j = j.2;
            unshift @js, $j;
        }
        # J.t usually enough to find them
        # Jc&s = last mo C, may have ch for chunk
        my $f = $js[0];
        f.3 eq $f || die "first not W";
        n.W = f.t;
        n.js = [map{
            my $C = _c&s;
            my $l = [C.t, C.y.cv];
            push @$l, c&ch if c&ch;
            $l
        }@js];
    
    # C.t = $ch, is also section, page, partition, timeframe
    
    n.Jo = s&Jo || die "noJo";
    
    my @f;
    for (@{n.js}) {
        push @f,'j' if @f; # for tw of J
        # to be 'J' for tv of J
        my ($t,$cv,$ch) = @$_;
        push @f, $t;
        push @f,'s',$ch if $ch;
    }
    my @la = @f;
    shift @la;
    if (@la) {
        # if J is not A.3, they may be buried in C...
        # hoisting figures that C path
        n.jay = join "/", grep {s/\W/-/g;1} @la;
    }
    
    n.name = join "/", grep {s/\W/-/g;1} @f;
    # nonrefs are namey
    $n
    

