HaMachine: | # new
    # wants to have pointers to W
    # with the suggestion that you Believe them together
    y.at.massive = 1;
    
    n World
    n Process
    n Erupts
World: | # sheer being (1,2,3)
    # tubing
    n Zequines
    
    # rolling language around
    n DungBeatles
    
    # < world of the particle (was ForJ)
    n Jaya
Process: | # resonant pits (4,6)
    # G&o the noticer (was Tangle)
    n SenseCertainty
    
    # G&s the oscillator (was Stuff)
    n SelfConsciousness
Erupts: | # wiring standards
    # J handling requests, electrics through the wormhole
    n Elvectors
    
    # locate load & save
    n Placement
    
    # < numbers in the colloquial sense
    n Int
    
    # W knowing process alteration/debug electrodes
    n Tripical
    
    # extra nice
    n ThArt
    
    # dubiously designed
    #n Storage
    
Zequines: | # 1 centered self process
    # how to form a C
    n TheSea
    
    # how A
    n Atool
    
    # tube helpers
    n To
    
    # tubes of self
    n Tubes
TheSea: | # folds of the day
    u i
    # is it C
    isC:
        ref $s eq 'HASH' && defined s.t && s.y && s.y ne $s && (s.c || s.sc)
    isA:
        ref $s eq 'HASH' && defined s.t && s.y && s.y eq $s && (s.c || s.sc)
    # start C by t,c/s
    # making c s if !hash or s.y
    tcs: %acgt:t c
        return $t if ref $t eq 'HASH' && ref t.y && t.y ne $t;
        $C = {};
        C.t = $t;
        C.y = {};
        C.c = ref $c eq 'HASH' && !c.y ? $c : {s=>$c};
        $C
    # start C
    Ct:
        my $C = {};
        G&Cs,$s;
        $C
    # parse [This=>3=>{etc}] into your C
    Cs:
        $s = [$s] if ref $s eq 'HASH';
        my ($t,@e) = @$s;
        my $cs;
        if (ref $t eq 'SCALAR') {
            C.c = G&peel,$$t;
            $cs++;
        }
        elsif (ref $t eq 'ARRAY') {
            die "Aray: ".wdump 3, $s;
        }
        elsif (ref $t eq 'HASH') {
            G&xot,$C,$t;
            t.y.moC = $C;
            return;
        }
        elsif (ref $t) {
            die "reft: ".wdump 3, $s;
        }
        else {
            C.t = $t;
        }
        if (!@e && !$cs) {
            C.c.W = C.t;
        }
        else {
            my ($y,$c,$sc,@ex) = @e;
            if (ref $y eq 'SCALAR' && @e == 1) {
                $c = G&peel,$$y;
                $y = {};
                y.cv = delete c.cv if c.cv;
            }
            
            if (ref $c eq 'HASH') { # the c itself
                C.c = $c;
            }
            elsif (ref $c eq 'SCALAR') { # c as stringed hash
                C.c = G&peel,$$c;
            }
            elsif (@e > 1) { # string or ref to ref
                C.c.s = $c;
            }
            
            $sc = G&peel,$$sc if $sc eq 'SCALAR';
            $sc = {} if $sc eq '';
            $sc = G&peel,$sc if !ref $sc;
            C.sc = $sc if $sc;
            
            if (ref $y eq 'ARRAY') {
                if (@$y == 1) {
                    ($y) = @$y;
                    C.c.e = ref $y ? $y : # [$e]
                        G&s,$y; # [t]
                }
                else {
                    C.c.e = @$y <3 ? G&tcs,@$y : # [t=>s] or [$C]
                        G&Ct,$y; # C
                }
                $y = 'W';
            }
            if (ref $y eq 'HASH') {
                if (y.y) {
                    c&e = $y;
                    $y = 'W';
                }
                else {
                    C.y = $y;
                }
            }
            if (!ref $y) {
                if ($y =~ s/^-(\w+?)(?:_(o?\d+))?$//) {
                    c&pi = $1;
                    $y = $2 if $2;
                    c&s = C.t if !exists c&s;
                }
                # oo2 = 0.002
                $y = '0.'.join('',('0') x length($1)).$2
                    if $y =~ /^([o0]+)(\d+)$/;
                if ($y =~ /^\d+(\.\d+)?$/ || !length $y) {
                    C.y.cv = $y
                }
                elsif ($y =~ /^(\d+)?(?:\.\.(\d+))?(?:x(\d+))$/) {
                    C.y.in = $1;
                    C.y.out = $2 if defined $2;
                    C.y.thi = $3 if defined $3;
                }
                elsif ($y =~ s/^(\w+)$//) {
                    C.c.>$1 = C.t;
                    C.y.cv = $y; # ''
                }
                else {
                    die "Cs y not: '$y'\n".ki $C
                }
            }
            C.y.cv /= 10 until !C.y.cv || C.y.cv < 1;
            die "Extra: ".wdump 3,$s if @ex;
        }

    # for C seeing (C.c.s) another C, same t/y
    # new C knows y.A
    # like a piece of consc falling
    Chs: %acgt:s hs
        my $C = {};
        C.t = s.t;
        C.y.cv = s.y.cv;
        C.y.A = $A;
        C.c.s = $s;
        return $C;
    
    #c ways at C, see 2/Sea for C chewing/itself
    peels: %subpeel
        qr/^[\{\%]\w+/;
    
    peel:
        return $s if ref $s;
        $s =~ s/^%//;
        my $c = {};
        for (split ',', $s) {
            my ($k, $v) = split ':', $_, 2;
            $v = 1 if !defined $v;
            $c->{$k} = $v;
        }
        $c
    
    # k into hash path    also T/ip
    pint:
        my $o = ref $Me[-1] eq 'HASH' ? pop @Me : {};
        my @p;
        for (@Me) {
            if ($_ eq '*' && ref $s eq 'HASH' && 1 == keys %$s) {
                ($_) = keys %$s;
            }
            unless (ref $s eq 'HASH' && exists $s.>$_
                || ref $s eq 'ARRAY' && exists $s->[$_]) {
                o.fail = $_;
                o.mong = [ref $s eq 'HASH' ? sort keys %$s
                    : ref $s eq 'ARRAY' ? "0..".(@$s-1) : slim("?was: $s") ];
                o.have = \@p;
                return
            }
            push @p, $_;
            $s = ref $s eq 'HASH' ? $s.>$_ : $s->[$_];
        }
        $s
    
    # put hash k+ = v
    punt:
        my $v = pop @Me;
        my $la = pop @Me;
        $s = $s.>$_ ||= {} for @Me;
        $s.>$la = $v;
    
    # guess sJ means sc J, etc
    pang: %acgt:s def
        my ($nk,$gk) = $s =~ /^([tycs])?(.+)$/;
        $nk || $gk eq 't' && return $gk;
        $nk = 'sc' if $nk eq 's';
        $nk = $def || 'sc' if !$nk;
        $nk && $gk || die"strv:$s";
        ($nk,$gk);
    
    # hash ordering
    hord: %acgt:s head tail
        my ($he,$ta) = ([],[]);
        $head ||= [qw't cv y c sc'];
        $tail ||= [qw's z'];
        my $tw;
        for ([$he=>$head],[$ta=>$tail]) {
            my ($to,$k) = @$_;
            for my $t (@$k) {
                $s.>$t || next;
                $tw.>$t ++;
                push @$to, $t;
            }
        }
        my @mi = sort grep { !$tw.>$_ } keys %$s;
        [ map { [ $_ => $s.>$_ ] } @$he, @mi, @$ta ];
    
    #c flexible data tester
    # \$whereclause
    ip: %acgt:s c u
        my $z;
        $s = G&peel,$$s if ref $s eq 'SCALAR';
        my $n;
        if (ref $s eq 'REF') {
            # do s.do
            $s = $$s;
            $n = $s;
            s.ip || die "sip no ref";
            $s = {%{s.ip}};
            my $ord = delete s.order;
            $s = {map{$_=> \$s.>$_ }keys %$s};
            s.order = $ord if $ord;
        }
        # n.all keeps going after a pass--
        my $pass = 1;
        # the many named checks must pass
        # their name is probably the k in $c.>$k
        my $o = ref s.order eq 'ARRAY' && s.order || [keys %$s];
        EE: for my $k (@$o) {
            my $y = $s.>$k; # intel
            my $x = $c.>$k; # carb
            my $u = $u.>$k ||= {}; # return
            $pass == 1 || n.all || y.or || return 0;
            
            return 1 if y.or && $pass == 1;
            $pass = 1 if y.or;
            
                my $exi;
                if (exists y.nk) {
                    $x = $c;
                    for my $k (grep{defined}y.nk,y.gk,y.tk) {
                        $pass--, next EE unless
                            ref $x eq 'HASH' && exists $x.>$k;
                        $exi = exists $x.>$k;
                        $x = $x.>$k;
                    }
                }
                my $wa = $pass;
                if (y.pint) {
                    my $o = {};
                    $x = G&pint,$c,@{y.pint},$o;
                    $exi = !o.fail;
                    u.pint = $o;
                    u.s = $x;
                }
                !defined $x || $pass-- if y.ndef;
                defined $x || $pass-- if y.def;
                !$exi || $pass-- if y.nexi;
                $exi || $pass-- if y.exi;
                $x || $pass-- if exists y.true;
                y.is eq $x || $pass-- if exists y.is;
                y.eq eq $x || $pass-- if exists y.eq;
                y.not ne $x || $pass-- if exists y.not;
                y.in->{$x} || $pass-- if y.in;
                !y.nin->{$x} || $pass-- if y.nin;
                $x > y.gt || $pass-- if exists y.gt;
                $x < y.lt || $pass-- if exists y.lt;
                $x >= y.gteq || $pass-- if exists y.gteq;
                $x <= y.lteq || $pass-- if exists y.lteq;
                $x =~ y.re || $pass-- if exists y.re;
                $x =~ /y.re/i || $pass-- if exists y.rei;
                if (my $h = y.hasany) {
                    my $is = grep {
                        my $s = $x.>$_;
                        my $u = $h.>$_;
                        $s && (!$u || do {
                            $u eq '!ref' ? !ref $s
                            : 1
                        });
                    } keys %$h;
                    $pass-- unless $is;
                }
                $pass = $pass < $wa ? $wa : $pass-1
                    if y.neg;
        }
        $pass == 1
    #c data
    # oh -  copy c over s, 2 hashes deep, like C
    oh:
        G&xot,$s,@Me;
    xot: %acgt:s c
        ref $c eq 'HASH' && ref $s eq 'HASH'
            || die "Hash up".wdump 3, [$s,$c];
        while (my($k,$v) = each %$c) {
            $s->{$k} = ref $v eq 'HASH' ?
                        {%{$s->{$k}||{}}, %$v}
            : $v;
        }
        return $s
    
    # ho - copy c over s (half oh)
    #ho:
    #    G&xo,$s,@Me;
    hoh:
        G&xo,$s,@Me;
    xo: %acgt:s c
        ref $c eq 'HASH' && ref $s eq 'HASH'
            || die "Hash up".wdump 3, [$s,$c];
        while (my($k,$v) = each %$c) {
            $s->{$k} = $v;
        }
        return $s
    
    # hup - clone s, 2 hashes deep
    hup:
        my $CC = {%$s};
        $CC->{$_} = {%{$CC->{$_}}} for
            grep {ref $CC->{$_} eq 'HASH'} keys %$CC;
        return $CC;
    
    # assign to a hash, pass unless it was already something else
    always: %acgt:s k v
        my $pass = !exists $s.>$k || $s.>$k eq $v;
        $s.>$k = $v;
        $pass;
    
    # round number
    rou:
        0.0001 * int(10000*$s)
    roun:
        0.000001 * int(1000000*$s)
    # 33 -> 0.33
    sca:
        $s /= 10 while $s > 1 || $s < -1;
        $s
    
    # check for rounded datastructure, non sprawl into A
    oleak: %acgt:s n
        length(wdump $n,$s) < length(wdump $n+1,$s);
Atool: | # reliable/old A
    u i
    # snake outwards by A.up
    # < move other ways
    # verging on FactorEaseity
    Aup:
        my $ay = $A;
        my @A = $ay;
        push @A, ($ay = ay.up) while ay.up && ay.up ne $ay;
        wantarray ? @A : join' ',reverse map{_.t} @A;
        
    # sort by many y.As
    sortysip:
        my $so;$so = sub {
            my ($i,@try) = @_;
            my ($yk) = @try;
            my ($c,$d) = (a.y->{$yk},b.y->{$yk});
            $c && $d || return;
            ($c,$d) = (c.c.ip,d.c.ip);
            $c && $d || die "sort noy$yk ip";
            unless (exists $c->[$i] || exists $d->[$i]) {
                shift @try;
                return $so->(0,@try) if @try;
                die "ip sort ran out:\n  ".ki($a)."\n  ".ki($b);
            }
            $c->[$i] <=> $d->[$i]
            || $so->($i+1,@try);
        };
        sort {$so->(0,@Me)} @$s;

    # describe A net
    sn:
        if (ref $s eq 'HASH' && s.y eq $s) {
            ($A,$s) = ($s);
        }
        $s ||= 6;
        my @net = ('y',1,2,3,4,5);
        shift @net if $s < 6;
        pop @net if $s < 5;
        pop @net if $s < 4;
        
        my ($s,$h,$la);
        for my $i (@net) {
            my $Y = $A->{$i} || die "Npo $i on ".ki $A;
            ref $Y eq 'HASH' || die "Got $i from A.t: ".ki $Y;
            my ($cvb) = Y.cv =~ /^0\.(\d+)$/ if $Y eq $A;
            my $sep = '.' if $s;
            $sep = '@' if $la eq $A;
            my $th = Y.t;
            if (my $ii = $h.>$Y ) {
                # number position if seen before
                $th = ','.$ii;
                $sep = '';
            }
            $h.>$Y ||= $i;
            if ($la eq A.2) {
                # can go funny directions
                if ($la ne A.5 && $la ne A.4 && la.3 ne A.3) {
                    # J inherit 12345 before its set right
                    $sep = "(".($la eq la.3 ? "" : "la.3.t)");
                }
            }
            $s .= "$sep$th$cvb";
            $la = $Y;
        }
        $s =~ s/\(,/(/g;
        $s
    
To: | # party controls
    u i
     # for tubes of rhythm
    # A transfiguring A
    
    # complicated delete
    Tnot:
        A.cv = 0.9;
    # moves/spawns in time (cv)
    # eventually T.Z.56.3 = [$C] or $A means when pipe is at 56 do from 3
    Tz: %acgt:D
        my ($to,$ba) = keys %{T.Z};
        $ba && die "Too many TZ: ".ki [sort keys %{T.Z}];
        my $wh = delete T.Z.>$to;
        delete T.Z;
        $wh eq $A || die "Too complic TZ: ".ki T.Z;
        $to /= 10 while $to > 1;
        A.cv = $to - 0.001;
        T.nocvz = 1;
    # catch up children every 0.1 (before our 0.1)
    tugA:
        $s = G&A,$s,@Me;
        G&entug,$s;
        $s
    entug:
        my $o = A.c.tug->{s.c.sip};
        A.c.tug->{s.c.sip} = $s;
        delete A.c.tog if $o ne $s;
        $s
    # TODO go wide by 0.1?
    tug:
        my $og = A&tog ||= [sort keys %{A&tug}];
        saybl "A&sip A.t tugs $s -> ".@$og;
        for (@$og) {
            my $m = A&tug.>$_;
            next if my&cv >= $s;
            next if mc&tugblock && mc&tugblock->();
            my $A = $m;
            A&ov = $s;
            G&throat
        }
    block:
        A&tugblock = $s;
        $s->();
    timer: %acgt:d cb
        Mojo::IOLoop->timer($d,$cb);
Tubes: | # G&A spawns A, G&throat progresses A, working on C
    u i
    # be a A.y = A (means is full of wires)
    # J are A that inherit from each other
    # as A wave connection to them
    A: %acgt:s ov c sc
        if (ref $s) {
            $A = $s;
        }
        else {
            my $i = $A;
            $A = {%$A};
            A.t = $s;
            A.y = $A;
            A.y.cv = 0;
            A.c = {};
            A.sc = {};
            A.up = $i;
            A.c.ip = [@{A.up.c.ip||[]}, A.up.c.ipi++];
            A.c.sip = join' ',@{A.c.ip};
            delete A.V if A.V == 2;
            delete A.C;
            delete A.T;
            trip At/$s
            saygr "A.c.sip A.t from i.t";
        }
        %{A.c} = (%{A.c},%$c) if $c;
        %{A.sc} = (%{A.sc},%$sc) if $sc;
        @Me && die "No more trailing A Me: ".ki \@Me;
        if ($ov) {
            $ov /= 10 while $ov >= 1;
            A.c.ov = $ov;
            G&throat;
        }
        return $A

    # go A - rows a T
    
    # .t a We thing to actuate consciousness
    # net look up to 3
    throat:
        $T = A.c.T ||= {};
        return if T.not;
        $s ||= A.c.of || A.t;
        my $z = G&t,$s
            || return sayre "Not found: $s: ".G&sn;
        #snooze 500;
        my $uov = A.c.ov;
        my $ntug = 0.1;
        my $keep; # going many same cv
        while ($z) {
            next if z.c.W;
            next if z.y.cv <= A.y.cv && (!$keep || z.y.cv > keep.y.cv);
            $keep = $z;
            
            A.V > 2 && say "For A.cv - $uov ( z.y.cv z.t (A.t)";
            
            last if $uov && z.y.cv > $uov;
            my $etug = $ntug;
            if (A.c.tug && $ntug <= z.y.cv) {
                $ntug += 0.1 until $ntug >= z.y.cv;
                G&tug,$ntug;
            }
            my $C = A.c.s ||= {y=>{A=>$A}};
            my @is = (A.c.N || $z);
            
            # z wants C.?.?
            if (zs&nk) {
                exists $C.>zs&nk || next;
                @is = $C.>zs&nk;
                if (zs&gk) {
                    exists $C.>zs&nk.>zs&gk || next;
                    @is = $C.>zs&nk.>zs&gk;
                }
            }
            # z wants anything more from C, compiles to ip
            if (zs&t) {
                ref zs&ip eq 'HASH' || die "Dsct ip not: ".ki$z;
                # whole z.sc could arg/solute things
                my $sc = z.sc;
                my $u = {};
                G&ip,zs&ip,$C,$u || next;
                my @u = grep{defined} map{_.s} values %$u;
                if (@u > 1) {
                    sayre "Many picked via ".ki(sc.ip).":\n".ki $u;
                    @u = $u[0];
                }
                @is = @u if @u;
            }
            
            # z readies
            if (z.sc.acgt && !z.c.code) {
                my $y = eval z.c.s;
                die "Throcompile z.y.cv: z.t: ".ind('  ',$@)."\n" if $@;
                z.c.code = $y;
            }
            #
            A.V > 2 && say "A.c.sip \t Onto A.t A.y.cv ~ C.t ~ z.t z.y.cv";
            T.D = $z;
            trip Acv/z.y.cv
            $z = T.D;
            #
            # happens
            for my $s (@is) {
                z.sc.acgt eq 's' || die "nonacgts".wdump $z;
                T.D = $z;
                my $y = z.c.code;
                ref $y || die "Compile z.y z.y.cv!";
                G.i.h->($A,$C,$G,$T,$z,$s);
                
                T.ut && G&Tut,$s;
                T.Z && G&Tz,$z;
                G.tuberay && G.tuberay->($A,$C,$G,$T);
                T.whack = T.nocvz = delete T.whock if T.whock;
                last if T.not || T.whack;
            }
            # back
            delete T.ut;
            
            A.y.cv = z.y.cv unless delete T.nocvz;
            last if delete T.whack || T.not || T.seek;
        }
        continue {
            $z = z.y.in || z.y.next; # or timeout, mass comb via A.m
        }
        if (delete T.seek) {
            return G&throat;
        }
        # leaving
        A.c.tug && G&tug,A.y.cv;
        delete A.c.ov;
        T.not && G&Tnot;
        A.V > 2 && saybl "A.c.sip \t<--  A.t A.cv";
        # TODO cycle all A.c.N as C
        # TODO line with Targety interrupt potential
        # see 1 KnowTime/Cone
    
    

