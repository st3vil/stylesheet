Clalia: | # drag n learn
    G&heading;
    ys&ab = '1';
    ys&height = '30%';
    ys&width = '60%';
    A.noelvis = 1;
    # to make html+javascript that lives a life of its own
    
    $t = window.t = 3s&t = {};
    
    n Classes -Pupula $s:<<'' %ab:1,width:100%,height:100%
    Engineering	4000
      seeing	439	%st:being,pow:24
        c s: |
          Lovely and sighted.
          Takes hold.
        Riddiford	%day:1,time:900-1040
        Riddiford	%day:3,time:1300-1450
        Taxiderm	%day:2,time:1300-1340
      triangle	469	%st:geometrica,pow:12
        c s: |
          Bring togs.
        Riddiford	%day:4,time:1120-1340
        Riddiford	%day:3,time:1400-1550
        Taxiderm	%day:2,time:1500-1640
      weld	468	%st:geometrica,pow:9
        c s: |
          Ceramic?
        Riddiford	%day:1,time:900-1040
        Riddiford	%day:3,time:1300-1450
        Taxiderm	%day:2,time:1300-1340
    Art	8000
      weld	868	%st:enjoyment,pow:9
        c s: |
          But with plenty of slop.
        Riddiford	%day:1,time:900-1040
    
    t.emplate = <<'';
    <div id="bits"> Classes </div>
    <div id="week"> Week </div> 
    <div id="info"> Info </div>
    
    t.days = 5;
    t.fracday = &s{
        $m = (''+s).match(/^(\d?\d)(\d\d)$/);
        !m and throw "not a time: "+s
        return (m[1] * (1/24)) + (m[2] * (1/1440))
    };
    t.daystart = t.fracday('0900');
    t.dayend = t.fracday('1700');
    t.Start = &{
        $('#bits').replaceWith(t.emplate);
        #$('table td').css('vertical-align','top');
        
        # classes
        $cl = $('#bits').empty()
            .css('position','absolute')
            .css('width','30%')
            .css('height','100%');
        cl = $('<ul>').appendTo(cl)
        each ic t.group {
            $('<li>').appendTo(cl)
                .attr('id',c.id).text(c.t)
                .on('click',t.togGroup);
        }
        
        # week
        $we = $('#week').empty()
            .css('position','absolute')
            .css('left','30%')
            .css('width','40%')
            .css('height','100%');
        $width = 100 / t.days;
        $side = 0;
        for (var day = 1; day <= t.days; day++) {
            $d = $('<div id="day'+day+'">')
                .css('width',width+'%')
                .css('height','100%')
                .css('position','absolute')
                .css('background','rgba('+(day*30)+',120,120,0.3)');
            side and d.css('left', side+'%')
            we.append(d);
            side += width;
        }
        
        # info
        $we = $('#info').empty()
            .css('position','absolute')
            .css('white-space','pre')
            .css('left','70%')
            .css('width','40%')
            .css('height','100%');
        we.css('background','rgba(120,40,40,0.3)');
        we.text('Click on a class');
    };
    #c tog grasp time
    t.togGroup = &{
        $g = t.group[this.id];
        !g and return;
        $cl = $(this);
        if (cl.attr('ope')) {
            cl.attr('ope','');
            cl.children().remove();
            return;
        }
        cl.attr('ope',1);
        cl = $('<ul>').appendTo(cl)
        each ic g.z {
            $('<li>').appendTo(cl)
                .attr('id',c.id).text(c.t)
                .on('click',t.graspClass);
        }
    };
    t.graspClass = &e{
        e.stopPropagation();
        $cla = t.class[this.id];
        !cla and return
        $te = [];
        cla.t and te.push(cla.t)
        # Placed $attime  or Placing
        cla.st and te.push("St: "+cla.st)
        cla.pow and te.push("Pow: "+cla.pow)
        cla.desc and te.push(cla.desc)
        cla.z and te.push(ki(cla.z,5))
        te.length and $('#info').text(te.join("\n\n"));
        # plot
        $('#week .potential').remove();
        each ic cla.z {
            $day = $('#week #day'+c.day);
            $time = c.time.split('-');
            $starts = t.fracday(time[0]) - t.daystart;
            $endures = t.fracday(time[1]) - starts;
            endures < 0.1 and endures = 0.1;
            $plot = $('<span>')
                .css('position','absolute')
                .css('width','100%')
                .css('top',(starts*100)+'%')
                .css('height',(endures*100)+'%')
                .css('background','rgba(176,140,130,0.6)');
            plot.text(starts+' - '+endures);
            plot.attr('class','potential');
            plot.appendTo(day);
            
        }
    };
    
    

    
    G&yl:0.05,&s{ t.Start() };
    
    #
pi/Pupula: |
    $io = G&way,'iooia';
    ys&id = 'bits';
    ys&width = '30%';
    
    n t 1 $s:C.t
    
    if (typeof s == 'string') {
        $uni = G&readLines,s;
        # now we have a university using C
        # make a few bits of csv since reality
        $tables = 3s&t;
        $ids = {};
        $everything = [];
        $insert = &type,s{
            $c = ex({},s.sc);
            c.type = type;
            
            s.y.cv != 0.1 and c.id = (s.y.cv+'').replace(/^0\./,'')
            else {
                ids[type] ||= 0;
                c.id = ids[type]++
            }
            
            c.t = s.t;
            sc&s and c.desc = sc&s
            everything.push(c);
            $table = tables[type] ||= {};
            table[c.id] = c;
            return c
        };
        # < io/S at many indent levels... call em ay,by,cy,dy...
        $ta = 3s&tables = {};
        $uni = G&Cye,['uni','','',{z:uni}];
        o $uni/:group/:class/:time
        io.nz().ind(&s,t{
            #debugger;
            ~Aye: t.ark, ki(s,2)
            t.ark == 'uni' and return
            $c = insert(t.ark,s);
            c.z = [];
            $up = t.parenting;
            up and up.z.push(c)
            return c
        });
        everything.map(&c{ c.z && !c.z.length && delete c.z });
        #n thing  $s:eny(tables) %ws:pre,dis:block
        #return
    }
    
    
    
    
Sevo: | # seive o
    $io = G&way,'iooia';
    io.iz = 1;
    G&heading;
    # anything
    n anything 2 s:anyething %fs:300%,blr:3px
    =pod
    
    A is causality cones,     spreading
    C is causing thing,       growing
    G is a receptive ground,  filled
    T is a trouble hoist,     empty
    
    We shall get diff/patch speaking quietly over websockets to the babz,
    eventually getting everything in js and building castles all over.
    
    24 NutThing has:
     h to call a function, looking for t[0]='i', t[1]=name via:
     t looks up a thing (named) or two (named in named)
    24 NutIns began:
     ting looking further (async) for things to push/pull and protocol
    
    the only global, called H(A,C,G,T,[of,t],args[],c,sc)
    so immediately localised along A
    looking for something to do such with
    the such is C-like, so it could have:
      where that particular thing should be (of,t or more fuzzy)
      a push/pull supplied,
        brokered by a protocol/boundary-handler J
        with H gating usage to up-to-dateness,
          entering existing E sidetrack if...
      a melted down compilation one day
    H is a join (or separation) of two pieces
      notions -> actuality
    
    < still coded G&func?
    
    io will have to travel A as well... looking for t, A
    
    =cut
    $me = c&me ||= {};
    me.H = &acgttycs{
        typeof t == 'string' and t = ['i',t]
        typeof y == 'object' and c = {args:y}
        c ||= {};
        $sc = s || {};
        c.push and throw "this thing wants to be this thing"
        c.pull and throw "this thing is wanted"
        # < pull also acquired from looking
        
    };
    me.timestamp = &{ return(new Date).toISOString() };
    G&way,'Soogle',{},'noop';
    #$w = G&t,'w','Soogle';
    #debugger;
    me.start = &{
        $Y = G&Aye,'Four';
        A = Y;
        A.noelvis = 1;
        me.io = io;
        A&me = me;
        A.1 = A.3 = A.4 = A;
        
        4s&NormalI = A.I; # TOGO
        # in favour of random codes upon 4:
        # inits and continues methods on me
        # unco:
        4s&N = [];
        
        G&way,'Soogle';
    
        A.on = el;
        el.A = A;
        C = A&s = {t:me.timestamp(),y:{},c:{},sc:{}};
        #$G = {y:{},c:{},sc:{}};
        T = {y:{},c:{},sc:{}};
        A&fps = 3;
        
        me.star(A,C,G,T);
    };
    
    
    $el;
    $colour;
    $i = 0;
    $flip = &{
        colour = colour == 'pink' ? 'blue' : 'pink';
        $(el).css('border','2px solid '+colour)
        i++ > 20 and return
        i == 2 and me.start();
        G&yl,(1000/432)*13,&{flip()}
    };
    
    #G&way,'Steev';
    A&shook = &s{
        el = sc&on;
        flip();
        $('body div.v7').remove();
        el =
        $('<div class="v7" style="position:absolute;'
            +'white-space:pre;font-size:70%;'
            +'top:0%;left:55%;height:20%;width:43%">')
        .appendTo('body')[0];
    };
    
    
Soogle: |
    $me = 4c&me;
    !me and throw "no me";
    $io = me.io;
    
    # loop comebacks between attentions
    me.star = &acgt{
        !A.on.ownerDocument.contains(A.on) and return "Unplugged"
        $me = A&me;
        $starts = G&time;
        $Y = A;
        $frames = 1000/A&fps;
        frames += A&brake ||= 0;
        G&yl,frames,&{me.star(Y,C,G,T)};
        
        try { me&starc }
        catch (e) {
            $async = (e.message || e).match(/^async/);
            # assume requests complete between framerates
            async and return
            # or staccato explosions
            A&brake += 2000;
            throw e, 'star'
        }
        
        $ends = G&time,starts;
        # aim for a third of our time out of the loop
        ends > (frames * 0.7) and A&brake += 200
        elsif (A&brake) { A&brake -= 100 }
        4s&busyratio = ends / frames;
        4s&busyratio < 0.0001 and delete 4s&busyratio;
    };
    # cast gaze
    me.starc = &acgt{
        $A = G&Aye,'star';
        $g = A.ground = G&Cye,[me.timestamp(),{},{root:1},{}];
        i $g/self
        yac&s = C;
        
        #yac&foN = 4s&N;
        ex(ya.sc,A.4.sc);
        yac&brake = upc&brake;
        
        me&digwaypoll;
        
        me&osc,A.ground;
        
        # already part of some self-reflexive time
        4s&upghost and me&doupghost
    };
    
    me.osc = &acgts{
        A.on.innerText = G&ind,s,'ki';
        $(A.on).append('<p>T</p>').on('click', &{ me&upghost });
    };
    # drop (1) or permanento (null) way caching
    me.waytime = &acgtts{
        $wa = A.5.I.w; # alien stash
        !wa and throw "no wa"
        $w = wa.y.tw[t]; # has G&ways we use
        !w and throw "no w", t
        ws&now = s; # unixtime, forces update
    };
    me.upghost = &acgtt{
        t ||= 'Soogle';
        me&waytime,t,1;
        4s&upghost ||= [];
        0 > 4s&upghost.indexOf(t)
        4s&upghost.push(t);
    };
    me.doupghost = &acgt{
        each it 4s&upghost {
            G&way,t
        }
        delete 4s&upghost
    };
    
    #c Jay
    me.J = &acgts{
        # do a J
        $j = G&n,[s,1,{J:s}],5;
        !me.J[s] and throw "unknown me.J", s
        me.J[s](j.y.A,j,G,T);
    };
    # to receive way notifies
    me.J.digwaypoll = &acgt{
        
    };
    me.digwaypoll = &acgt{
        $C = G&n,['digwaypoll',''];
        c&s = ki(A.5.I);
        #ex(C.sc,A.5.I);
    };
    me.bounda = &{
    # give A websocket
    #   winds itself back when disconnected
    # spawns:
    #   A=send when you G&h,wss&send,'YourString'
    #   A=receive when the a&receive happens, which sends 
    #   and A receive (or whatever you set a&receive)
    #   put in a J=tel to be recording stuff,
    #     making compressions
        a&ws && a&ws.readyState == 1 and return
        
        A&ws ||= 'ws://'+location.host+'/s';
        
        $ws = a&ws = new WebSocket(A&ws);
        
        ws.onopen = &{
            ws !== a&ws  and return ~sockalivedupe: A&ws
            delete a&dead;
            
            ~connected: A&ws
            $('body').stop().css('-webkit-filter', '');
        };
        
        ws.onclose = &{
            ws !== a&ws  and return ~sockalivedupe: A&ws
            a&dead = (a&dead||0) + 1
            
            ~closed: A&ws
            $('body').stop().css('-webkit-filter',
                'blur(1px) brightness(1.3) contrast(2)');
            
            T.N.2 = 3;
        };
        
        ws.onmessage = &ev,{
            a&receive(A,C,G,T,ev.data,ev);
        };
        // generally it would be tied to a dialectic state
        //   see making compressions ^
        // Y may != A if someone in 4 uses our a&receive
        // also AA is taking
        $AA = A;
        a&receive = &Y,C,G,T,s,ev{
            A = AA;
            $A = G&Aye,'receive',0,{Y:Y};
            
            // could be in I.receive
            
            typeof s != 'string' and throw "not string: ",s
            
            $guesswork = s.substr(0,1);
            guesswork == "[" and s = $.parseJSON(s)
            guesswork == "{" and s = $.parseJSON(s)
            
            // trusted to create anything
            G&n,s
        };
        
        // Y whoever G&h,wss&send,'YourString'
        a&send = &Y,C,G,T,s,eg{
            A = AA;
            $A = G&Aye,'send',0,{Y:Y};
            
            // could be in I.send
            
            // test coverage:
            $ws = upa&ws;
            ws.readyState !== 1 and ~sockdropped: upA&ws
            
            typeof s != 'string' and s = JSON.stringify(s);
            
            // if too long?
            ws.send(s);
        };
    
        // wanting T.N=6 to do so
        A.cv = 0.6
    }
pi/god: | # surf all
    # #
    #

