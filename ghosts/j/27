NutLands: | # reading bay/el/Figures/1,2 and etc
    u jc
    n \'of:om'
    
    #c < Cc&lv as separate (async) bits of tree
    #   as Hut used to say Thing clv:Thing/348sjd329 over the websocket
    #   and Hut would GET the file, decode, om here
    # this stuff shouldn't need to be said,
    # A:tree-reader would have its own intent about where items should be
    #   eg s&W !s&z refers to a name in 4
    #   and s&W s&z is content for the name, of which I is a 1-sphere
    #   and s&J (s&pi implies) implies it be fetched from $Wt/6/$Ct
    
    # s&lv spawns a c&lv within itself
    0 &&
    lv 66: %nk:sc
        G&om,[C.t,'',{lv:s},C.sc]
    
    # c&lv haps before/without el creating an element 
    # G&nn manually to A.b self
    # G&oms the lv at the same A.on
    0 &&
    lv 17:
        $b = A.b;
        G&nn;
        A.b.lv ||= {};
        $lv = A.b.lv;
        s&f and lv.f = s&f;
        !lv.f and ~die~LVnof: C, lv
        lv.haN ||= {};
        A.b = b;
        !c&seeks and c&seeks = [s];
        $t
        $.each(c&seeks, &i,v{
            lv.haN[v] and return
            t ||= v
        });
        if (t) {
            $.ajax('shed/'+lv.f+'/h/'+t).done(&L{
                !L.length and ~noL: lv.f, t
                T.readinglv = lv.f+'/h/'+t;
                $l = lv.haN[t] = G&readLines,L;
                !l.length and ~nolinesin: t
                l = l[l.length-1];
                $h = ''
                ls&parent and h = 'v '+ls&parent;
                ~lvread: C.t, t, h
                ls&parent and c&seeks.push(ls&parent);
                G&yl:30,&{ G&throat,7 };
            });
            return T.not = '2';
        }
        // now from oldest to newest
        c&seeks.reverse();
        if (lv.ha) {
            $is
            $.each(c&seeks, &i,v{
                lv.ha === v and is = 1;
            });
            while (is && c&seeks.length) {
                while (c&seeks[0] === lv.ha) {
                    c&seeks.shift();
                    is = 0;
                }
                is and c&seeks.shift();
            }
        }
        $ii = 0;
        $wi = 0;
        $ha;
        $.each(c&seeks, &i,t{
            ii++;
            $N = lv.haN[t];
            $.each(N, &i,v{
                wi++;
                G&om,v;
            });
            ha = t;
        });
        
        $bumps = ii+'x'+wi;
        ~wlv: C.t, s, lv.ha, bumps
        ha and lv.ha = ha;
        return T.not = 1;
        
        
    
    #c Serialise/Compress, around line making
    n \'of:eye'
    u j
    
    # make string
    # able to leave/reenter the hallucination of program memory
    #  s=C, with insides
    #   G&ind makes clone.y.D = origin, but no .y.tw etc.
    #   G&Compress tidies it up
    #   G&toLines makes one string, no y but cv
    # d.not saying nothing
    # d.nofurther saying this one but no deeper
    Serialise: %acgt:s comp c
        !s and throw "undef"
        $ers = [];
        $cb = &s,d{
            $part = "Compress";
            try {
                # put this one bit back so ind can keep moving in order
                $z = ss&z;
                part = 'comp';
                comp && comp(s,d);
                d.not and return
                part = 'Compress';
                G&Compress,s;
                part = 'toLines';
                $string = G&toLines,s;
                z and ss&z = z
                return string;
                
            }
            catch (er) {
                ers.push([part,d,s,er]);
                return ki(s,2)+"   !"+part+"! "+er
            }
        };
        $op = {hup:1};
        c and $.extend(op,c);
        $l = G&ind,s,cb,op;
        ers.length and ~>29 unserial: ki(ers)
        !l.match(/\n$/) and l += "\n"
        return l
    
    # various things shouldn't be let out
    # something else (G&toLines) makes y.* disappears, wormholing only cv
    # < an embryonic composited sub, like thro, 
    # < the opposite, collected from n and something else...
    # < use the d (state from G&ind) to make links for duplicated objects
    # see j/7 K
    #   used to mute any ref not gk =~ /x$/
    Compress: %acgt:s d
        # the other things are around, also via y.{tw,tv,in} etc
        delete ss&z;
        
        # especially if pi
        ss&J and delete sc&s;
        typeof sc&s == 'object' and delete sc&s
        delete ss&J
        
        $mute = {c:['code'],sc:[]};
        $unmuted_objects = [Object,Array];
        # this just does: sc&code and delete sc&code; sc&mc = 'code';
        each nk,gks mute {
            $he = s[nk];
            $muted = {};
            each gk,v he {
                gks[gk] and muted[gk] = 1; continue
                # data should be limited somehow...
                typeof v != 'object' and continue
                unmuted_objects.indexOf(v.constructor) >= 0 and continue
                # name of v.constructor
                muted[gk] = G&arfgunc,v || 1;
                
            }
            each gk,reason muted {
                delete he[gk]
            }
            # say that it is muted, eg c&mc = 'muted Cc keys'
            #  in a thing that could pretend to be a hash for simplicity...
            if (Object.keys(muted).length) {
                $ou = 'm' + nk.slice(0,1);
                $was = s.c[ou];
                if (was) {
                    was = G&peel:was,{sep:' '};
                    $.extend(muted, was);
                }
                s.c[ou] = G&depeel:muted,{sep:' '};
            }
        }
    
    #c readLines - string to [C+]
    readLines: %acgt:s opt
        opt ||= {};
        $L = s.split("\n");
        $oL = [];
        $tot = L.length;
        $N = [];
        $stack = [];
        $paniconce = 0;
        
        while (L.length) {
        
        $l = L.shift();
        oL.push(l);
        !l.length and continue
        $lin = l.match(/^(\s*)(.*)$/);
        $ind = lin[1];
        $d = ind.length / 2;
        l = lin[2];
        $li = l.split("\t");
        $t = li[0];
        $y = li[1];
        $c = li[2];
        $sc = li[3];
        # sc can kick in early, still one \t
        y && y[0] == '%' and sc = y.slice(1); y = '';
        c && c[0] == '%' and sc = c.slice(1); c = '';
        y && opt.y1 && opt.y1[0] == '%' and (opt.tosc ||= {})[opt.y1.slice(1)] = y; y = '';
        $s = li[4];
        
        t.match(/^\W/) and t = $.parseJSON(t);
        
        y ||= 1
        y = 1*('0.'+y);
        
        if (s && s.match(/^\W/)) {
            s = $.parseJSON(s);
        }
        if (c && c.match('^"')) {
            s = $.parseJSON(c);
            c = {};
        }
        else if (c && c.match(/^\W/)) {
            c = $.parseJSON(c)
        }
        else if (c) {
            c = G&peel,c
        }
        else { c = {} }
        
        s and c.s = s;
        
        if (sc && sc.match(/^\W/)) {
            sc = $.parseJSON(sc)
        }
        else if (sc) {
            sc = G&peel,sc
        }
        else { sc = {} }
        
        $C = {t:t,y:{cv:y},c:c,sc:sc};
        
        #c readLines indented bits
        
        $k
        $v
        $indenting = &{
            !L.length and return;
            $m = L[0].match("^"+ind+"  (\\w[\\w ]+):(?: (\\||.+))?$");
            !m and return;
            k = m[1];
            v = m[2];
            return 1;
        };
        while (indenting()) {
            $string
            if (v === '|') {
                string = 1;
                v = undefined;
            }
            v && v.match(/^\W/) and v = $.parseJSON(v)
            L.shift();
            k = k.split(' ');
            $nk = k.shift();
            $gk = k.join(' ');
            if (!v) {
                $s = [];
                $one;
                $blockquoting = &{
                    !L.length and return;
                    $m = L[0].match("^"+ind+"    (.*)$");
                    !m and return;
                    one = m[1];
                    return 1;
                }
                while (blockquoting()) {
                    s.push(one);
                    L.shift();
                }
                v = s.join("\n");
                # console.log("Loaded "+nk+gk+": "+v+'  Next: '+L[0]);
                if (!string) {
                    v = jsyaml.safeLoad(v);
                }
                else {
                    !v.match(/\n$/) and v = v+"\n"
                }
            }
            C[nk][gk] = v;
        }
        
        d.toFixed() != d and ~fractionalind: d, C, T.readinglv
        d = 1 * d.toFixed();
        if (d > 0) {
            $p
            $dl = d;
            while (dl--) {
                p = stack[dl];
                p and break
            }
            if (dl < d - 1) {
                $few = oL.slice(-3);
                if (! paniconce++)
                    ~toomuchind: d, dl, T.readinglv, few
                d = dl+1;
            }
            # use io?
            ps&z ||= [];
            ps&z.push(C);
            # tv/tw/in/next?
            $tv =
            p.y.tv ||= {};
            tv[C.t] ||= {};
            tv[C.t][C.y.cv] = C;
            # a mass inCing, dialecting
        }
        else {
            N.push(C);
        }
        stack[d] = C;
        while (stack[d+1])
            stack.pop();
        opt.tosc and ex(C.sc,opt.tosc);
        
        }
        return N
        
    #c toLines - C to string
    # one C, possibly many lines
    # < use from o that can conjoin the many C
    # but first, oleak tests depth of data structure
    #   true if more than d * 3 nodes
    #   true if l and encoded
    # < limit depth not number of nodes, reuse the encoding?
    oleak: %acgt:s d l
        $fail = 0;
        $was = window.maxyamling;
        window.maxyamling = d * 3;
        $code;
        try { code = jsyaml.safeDump(s) }
        catch (er) {
            window.maxyamling = was;
            er.message != "Too much to yaml" and throw er
            fail = 1;
        }
        if (l && code && code.length > l) {
            fail = 'large-ish'
        }
        window.maxyamling = was;
        return fail
    toLines:
        s and C = s;
        $t = C.t;
        $y = C.y.cv;
        # aims for simplicity of notation for G&readLines, G&C, G&peel
        # block quotes (BQ) big strings or data after the  line
        # uses json for anything complicated
        # z insides done by the process around this one Line
        #  - they have the same indent as BQs
        #    but their t should json or not look like BQ
        # hath
        $h = {};
        h.c  = $.extend({},C.c||{});
        h.sc = $.extend({},C.sc||{});
        delete hs&z;
        # needs json
        $n = {};
        # needs blockquote
        $q = {};

        # check out how sayable the values on the line are
        # for c/sc as peelable, 
        # < we can know thing:thing:thing
        #   means thing = 'thing:thing'
        $peelok = /^[\w\.\-%\/:]+$/;
        $nameok = /^\w[\w\.\-%\/]*$/;
        $simp = &s{
            s = ''+s;
            return s.match(nameok) && s.length < 24
        };
        # inject 2sphere
        $lod = &n,nk,gk,v{
            n[nk] ||= {};
            n[nk][gk] = v;
        };
        each nk,gk,v h {
            if (!simp(gk)) {
                lod(n,nk,gk,v);
                continue
            }
            if (typeof v != 'string' && typeof v != 'number') {
                # is > 4*3 nodes or encodes to > 42 chars
                if (G&oleak,v,4,42 ) {
                    G&oleak,v,24 and throw "Leaky "+nk+"."+gk+": "+ki(v);
                    # big enough to quote, simplifies remainder
                    lod(q,nk,gk,v);
                }
                else {
                    # ref too small to quote, json hemisphere
                    lod(n,nk,gk,v);
                }
            }
            else {
                if (v.length > 42 && v.match(/\n/)) {
                    # long enough to quote
                    lod(q,nk,gk,v);
                }
                else if ((v+'').match(peelok)) {
                    # decipherable to G&peel
                }
                else {
                    # midway to unwieldy
                    lod(n,nk,gk,v);
                }
            }
        }}

        # quote freaks, if just a few break the peelability of many
        each nk,g n { 
            $v = h[nk];
            !Object.keys(v).length and continue;
            $complex_keys;
            each ik g {
                !simp(k) and complex_keys = 1;
            }
            complex_keys and continue;
            
            if (Object.keys(g).length / Object.keys(v).length < 0.3) {
                each ik g {
                    lod(q,nk,k,h[nk][k]);
                }
            }
        }
        
        # remove quoted things and their need of json from the line
        each nk,gk,v q {
            h[nk] && delete h[nk][gk];
            n[nk] && delete n[nk][gk];
        }}
        each nk,gks n {
            # all freaks got quoted:
            !Object.keys(gks).length and delete n[nk]
        }
        #c toLines encoded bits
        # may pass a T.enj_catch, so functions can warn/show up as 'CODE'
        $enj = &s{ return window.enj(s,T) };

        # t can be messy
        $l = simp(t) ? t : enj(t);

        # y.cv = 1 is implied
        !y and y = 1
        y = (y+'').replace(/^0\./,'');
        l += "\t"+(y == 1 ? '' : y);

        # throw it one way or another
        $hem = ['c','sc'];
        each i,nk hem {
            $v = h[nk];
            if (nk == 'c' && 0 == Object.keys(v).length) {
                # blank
                l += "\t";
            }
            else if (nk == 'c' && 1 == Object.keys(v).length && v.s) {
                # t y "the s" sc
                l += "\t"+enj(v.s);
            }
            else if (n[nk]) {
                # json bits: t y {W:"At"} {et:3,se:"te",ra:1}
                l += "\t"+enj(v);
            }
            else if (Object.keys(v).length) {
                # G&peel bits: t y W:At et:3,se:te,ra
                l += "\t"+G&depeel,v;
            }
        }

        $L = [];
        #c toLines indented bits
        # < quoting with Line other N/C looking vals
        each nk,gk,v q {
            $k = "  "+nk+" "+gk+":";
            if (typeof v != 'string') {
                # BQ yaml data
                T.eny_nkgk = [nk,gk];
                $v = eny(v,T);
                delete T.eny_nkgk;
                $vs = [];
                v = v.split("\n");
                each is v {
                    vs.push("    "+s);
                }
                k += "\n"+vs.join("\n");
            }
            else if (simp(v)) {
                # simple strings
                # not confusible into 'Thing 2'
                k += " "+v;
            }
            else if (!v.match(/\n$/)) {
                # BQ implies trailing \n
                k += " "+enj(v);
            }
            else {
                # BQ string
                $vs = [];
                v = v.split("\n");
                each is v {
                    vs.push("    "+s);
                }
                k += " |\n"+vs.join("\n");
            }
            k = k.replace(/\n\s*$/,'');
            L.push(k);
        }}
        
        # extra lines (L) sorted, larger bits after smaller
        L = L.sort();
        $tidy = [];
        $large = [];
        each is L {
            s.length > 300 ? large.push(s) : tidy.push(s)
        }
        l = [l];
        tidy.length and l.push(tidy.join("\n"))
        large.length and l.push(large.join("\n"))
        l = l.join("\n");
        
        return l
j/en/Teev: | # string t,s for N
    $M = [];
    each iC N {
        $ts = [C.t,c&s];
        # if any insides \W, throw if empty t?
        $en
        each is ts {
            !s and debugger;
            !s.match(/^[\/\w]+$/) and en = ts
        }
        en and M.push(enj(en)); continue
        M.push(ts.join("\t"));
    }
    return M.join("\t");
j/de/Teev: | # N C t,s for s 
    # slightly toLines, for t and y
    $N = [];
    # TODO way sometimes gets c&code_args = 's' but c&code = acgtar?
    !s.split and s = ar.s;
    s = s.split("\t");
    while (s.length) {
        $k = s.shift();
        $v;
        if (k.match(/^\W/)) {
            k = dej(k);
            k.length != 2 and throw "Funny: "+k, s
            k = k[0];
            v = k[1];
        }
        else {
            v = s.shift();
        }
        $d = G&Cye,[k,''];
        N.push(d);
        null == v and continue;
        if (ar.to == 'cv') {
            d.y.cv = v || 1;
            while (d.y.cv >= 1) {
                d.y.cv *= 0.1
            }
        }
        else { dc&s = v }
    }
    return N
p/en/Teev: | # string t,s for N
    return join "\t", map{
        my $ts = [_.t,_c&s]; 
        # if any insides \W, throw if empty t?
        my $whack = 
        grep{ !/^[\/\w]+$/ }@$ts;
        $whack && sayyl "Was whack: ".wdump 2, $ts;
        $whack ? sjson $ts : join "\t", @$ts
    }@$N;
p/de/Teev: | # N C t,s for s 
    # slightly toLines, for t and y
    my $N = [];
    $s = [split "\t", $s];
    while (@$s) {
        my $k = shift @$s;
        my $v;
        if ($k =~ /^\W/) {
            $k = djson($k);
            @$k != 2 && die "Funny: @$k";
            ($k,$v) = @$k;
        }
        else {
            $v = shift @$s;
        }
        push @$N, G&Ct,[$k,'',{s=>$v}]
    }
    return $N

