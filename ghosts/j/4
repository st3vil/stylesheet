pi/foursleepier: | # (non)piley log of things going mo 45
    s&fs = 8;
    
    # de-coda into C again
    my $top = Rw decoda $s;
    my $z = top.y.val;
    
    ref $z eq 'ARRAY' || die "Notrar: ".wdump 3, [$s,$z,$top];
    
    my @s = @$z;
    
    my $lev = {}; # masklen/[C]
    for (@s) {
        _s&sip || sayre "Somenotsip: ".ki$_;
        my $len = _c&len = split ' ', _s&sip;
        push @{ $lev.>$len ||= []}, $_;
    }
    
    my $lenind = {};
    for my $len (sort keys %$lev) {
        $lenind.>$len = keys %$lenind;
    }
    
    n t=>o1=>C.t=>dis
    n type=>o2=>'sip sn',dis
    
    #,ml:". $lenind.>_s&len 
    for (@s) {
        my $x = {%{_.sc}};
        my $sc;
        sc.dis = 1;
        if (my $type = delete x.isin) {
            sc.hs = (
                $type eq 's' ? '2' :
                $type eq 'u' ? '6' :
                die "Other isin type: $type"
            ).'86';
        }
        if (x.dec eq '6 from elvis') {
            delete x.dec;
            my $M = sc.z = [];
            m ise=>''=>"e",'ma:0.3,hs:458'
        }
        my $t = _.t;
        $t =~ s/\.Motor\.Howz$//;
        m _.t=>''=>{s=>"_s&sip    $t"},$sc
        delete x.sip;
        if (keys %$x) {
            my $sc = "dis,fs:8,hs:486";#,ml:". $lenind.>_c&len ;
            m _.t=>''=>{s=>ki $x},$sc
        }
        if (!_s&sip) {
            my $s = top.y.rw.>_.sc;
            m sup=>-od=>{s=>wdump 3, $s}
            m stern=>-od=>{s=>$s};
        }
        if (my $gw = _.y.gets_pw) {
            # edges of perception, where any -gets s&gets vague/limited
            m gets_pw=>-od=>{s=>$gw}
        }
    }
    
Intre: | # what T sets up for I res
    # the 5 has in and out trays
    #5s&stores && die "Double z";
    # is now (5 readying) mapped for names to resolve there
    5s&stores =  [
        # place to thaw u from
        G&e,sac=>-mine=>{}=>'implies:thaw,if:A-clusping' ,
        
        # posit for sac all other u things?
        G&e,sac_sc=>-mine=>{}=>'otherwise:use,if:A-clusping' ,
        
        # to continue
        G&e,gou=>-mine=>{}=>'implies:resume' ,
        
        # default write location
        G&e,neu=>-mine=>{}=>'implies:write' ,
    ];
    # name in gou/neu causes resuming/writing where it needn't
    # most taped things will flop into neu, being last
    # most gou
    # and should give path up to toplevel? HaMachine
    #return;
    my @tvs = [map{
        "_.t = ".ki _s&J.sc.top.sc.z;
    }@{5s&stores}];
    saybl wdump 3, \@tvs;
    #n glop=>-od=>{s=>\@tvs}
    
FourSleep: | # J entry/sleep decision
    # all sorts of policy...
    # restart osc once this piece adds to mo J 45
    #1s&fourslept++ || 1c&imping++;
    local A.V = 1;

        # < should happen if Js&ein known too
        A&want.elvis ||= 6 if A&E;
    
        A.clusping = A.up if A.up.t eq 'clusping';
        
        # A mo sensors, sticks on the J
        my $c;
        if (4s&foursleepy) {
            $c = 1s&mosen = G&Ct:[G&sn =>'',{},{sip=>Ac&sip}];

            my $isu = A.up.t eq 'clusping';
            $isu = 1 if A.clusping;
            if ($isu) {
                cs&isin = 'u';
                # first W layer below u-ing/clusping
                cs&clusping = A.up.2.t if A.up.t eq 'clusping';
            }
            if (A.up.t eq 's') {
                cs&isin = 's';
                # cs&labe = join ' ', sort keys %{A.up};
            }

            A.mo.sampling_darkness ||
            push @{4s&foursleepy}, $c;
            if (my $reg = 5s&tig_foursleepy) {
                A.1.t =~ $reg && A.mo.sampling_darkness++;
            }
        }
        
        # not for osc positing content of hyper-W (Swim/We)
        return if A.up.t eq 's';
        
        # the A.3 figures some storage relationship
        # may suggest A&to_cv to T.Z us to if sleep
        A.1 eq A.3 &&
            Rw FourStorage;
        
        # desire to wake comes from many places
        my $de;
        de.mo = A&want if A&want;
        de.C = c&want if c&want;
        de.J = 1c&want if 1c&want;
        
        $de || return; # continues
        
        my $des = "C.t C.y.cv ".G&sn,3 ." -> ".ki $de;
        
        # want.* is weight if numeric, explanation if ref
        my $eq;
        my @got;
        each ftc $de {
            next if ref $c;
            push @got, $t;
            $eq += $c;
        }}
        my $only = $got[0] if @got == 1;
        
        my $iselvis = keys %$de == 1 && keys %{de.mo||{}} == 1 && de.mo.elvis eq '6';
        
        # want to add counterpoints
        # everything eventually sleeps way/u/W stuff
        my $et = A&may_save_in ? "    may>A&may_save_in" :
            A&must_save_in ? "    must>A&must_save_in" : '';
        cs&dec = "$eq from @got";
        !$iselvis && sayyl "HAving decided:  ".G&sn ."    cs&dec$et";
        @got > 1 && die "Getting complicated: cs&dec  $et";
        
        if ($eq < 0) {
            
            $only eq 'once' ||
                saybl "Sleep $eq   $des";
            # we can skip 6, keep ground
            # our mo C should be re-put from before
            
            A&if_sleeping ->() if A&if_sleeping;
            
            my $to = A&to_cv || 8; #$eq < -6 ? '8' : '7';
            T.Z.>$to = $A;
        }
        else {
            # no thaw unless resume
            A&if_waking ->() if A&if_waking;
            # FactorEase/qua?
            $iselvis ||
            saygr "Waker $eq   $des";
        }
        
        
FourStorage: | # collaborate thing with the Wall
        my $g;
        my $mode;
        my $o;
        # look for somewhere to fit in
        my @search = @{5s&stores||[]};
        while (@search) {
            my $D = shift @search;
            # FactorEase 
            # also Scuttle modey sc (implies,etc) moC (D) -> 9 (d)
            my $d = Ds&J.sc.top if Ds&J;
            # is the name pool
            if (Ds&if) {
                if (Ds&if =~ /^A-(.+)$/) {
                    $A.>$1 || next;
                }
                else {
                    die "Unko if: ".ki $D;
                }
            }
            # is the name
            $o = d.y.tw.>C.t;
            if ($mode = Ds&otherwise) {
                # combined with if for default in that condition
                # begin planting u in sac_sc
            }
            elsif (!$o && @search) {
                next;
            }
            else {
                $mode = Ds&implies
            }
            $g = D.t;
            last;
        }
        
        # write - do 6 with a fresh osc, restarting the log
        #   normal thing that happens, the G J taking over
        #   resume syncs the osc to the W J, continuing it
        
        if ($mode eq 'write') {
            if ($o) {
                # save required
                # Scuttle some T from last save 8
                # alternate-history linkage
                A&may_save_in = $g;
            }
            else {
                A&may_save_in = $g;
            }
        }
        
        
        # osc-syncing modes:
        # thaw - skip 6 and replant osc
        #   thing's updates are managed by another
        # use - thaw with w/W dependance checking
        #   thing is random cachement not yet managed by other
        #   as in sac_sc's random u things heading to sac's our u things
        # resume - replant osc and do 6, continuing the log
        #   as if in running sequence
        #   
        
        my $K = {}; # tw of 5s cache
        if ($mode eq 'thaw' || $mode eq 'use' || $mode eq 'resume') {
            # A&thaw == 1c&thaw when still
            
            if (my $R = 1c&thaw) {
                my $F = R.y.five || die "Thaw no y5";
                # was: small 2 links group of objects making the commit
                # use the 5 so system can be hacked for tests
                my $t = Rw LowCat $g $t:C.t 5;
                if (ts&ha eq Fs&ha) {
                    A&thaw = $R;
                }
            }
            my $r = A&thaw ||= Rw LowCat $g $t:C.t;
            my $f = r.y.five ||= $K.>C.t ||= Rw LowCat $g $t:C.t 5;
            if (my $s = 1s&s) {
                if (my $m = ss&meta) {
                    if (mc&ha eq fs&ha) {
                        # thing is as this save is
                        1c&thaw = A&thaw;
                    }
                }
            }
        }
        
        if ($mode eq 'use' && A&thaw) {
            # check this unmanaged island of stuff's 5 w/W
            # could get very thrashy
            # < per 5/Wall cachement?
            # < W refs leaving the g or further
            my @check = C.t;
            my $do = {}; # tw need update
            while (@check) {
                my $t = shift @check;
                my $f = $K.>$t ||= Rw LowCat $g $t 5;
                if (!$f) {
                    $do.>$t = 1;
                    last;
                }
                if (my $w = f.y.tw.w) {
                    for my $w (@{ws&z}) {
                        my $y = G&wops,w.t;
                        if (ws&dige ne ys&dige) {
                            saybl "Way diff $t's w.t";
                            $do.>$t = 1;
                            last;
                        }
                    }
                }
                if (my $W = f.y.tw.W) {
                    for my $W (@{Ws&z}) {
                        my $y = $K.>W.t ||= Rw LowCat $g $t:W.t 5;
                        if (Ws&ha ne ys&ha) {
                            saybl "Wormhole diff $t: W.t (Ws&ha) vs y.t (ys&ha)";
                            $do.>W.t = 1;
                            last;
                        }
                        push @check, W.t; # Wecursively
                        
                    }
                }
            }
            
            if (keys %$do) {
                # do 6, yonder use's will repeat this
                # < plant T to refresh bits if changes
                #   like -od/Crank js&boosts, but centrally
                my $tr = join', ',sort keys %$do;
                if ($tr ne C.t) {
                    saybl "Continuing C.t because of $tr";
                    if (my $c = 1s&mosen) {
                        cs&cont = $tr;
                    }
                }
                delete A&thaw;
            }
        }
        if ($mode eq 'use' && !A&thaw) {
            A&want.use = 5;
            A&must_save_in = $g;
        }
        
        if (A&thaw) {
            my $note; # motion about mode
            my $val = -6; # to sleep, if sleeping to avoid 6/trust its state
            if (1c&thaw) {
                $note = A&thaw eq 1c&thaw ? "still" : "diff";
            }
            if ($note eq "still") {
                A&thawed = delete A&thaw;
            }
            
            if (my $r = A&thaw) {
                # non-still thawing
                # set up/do osc to continue, given r = 1 to resurrect
                # might need to load before being awake? only if resume?
                A&if_sleeping = &{
                    sayyl "Want to thaw: ".G&aC,$r;
                    1s&FishBrainDump = 1;
                    G&s,{thaw=>$r};
                    A&to_cv = 7;
                    T.nose = 3; # mo 7 stores Jtv, doesn't osc
                };
                A&if_waking = A&if_sleeping if $mode eq 'resume';
            }
            
            my $reason = join'_',grep{defined}$mode,$note;
            if ($mode eq "resume") {
                $val = 5; # to do 6
            }
            A&want.>$reason = $val;
        }
        
