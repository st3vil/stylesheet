Packle: |
    #
    $me = 4c&me;
    !me and throw "no me";
    $io = me.io;
    
    # bel
    
    $ffmpeg = &{
        # the general overview
        # ! lost its code snippets
        # https://medium.com/@dernis/ffmpeg-tips-tricks-and-and-lessons-learned-a6f3c1187085
        # pics -> video
        # http://hamelot.io/visualization/using-ffmpeg-to-convert-a-set-of-images-into-a-video/
    };
    #c edges
    # wants to leap onto new osc gear (1c&newosc)
    me.Ja.edges = &acgt{
        A.3 = A.1;
        n t  $s:C.t %fs:20,hs:594
        #A&o = 'ind';
        1c&newosc = 1;
        s&blr = 10;
        
        n things 2
        
        if (1 || !1s&es) {
            $st = <<''.split("\n");
            Long way going to
            Get my medicone
            Skys the autumn grey of a lonely wren

            =pod
            Piano from a window played
            Gone tomorrow, gone yesterday
            I found it in the street
            At first I did not see
            Lying at my feet
            A trampled rose
            =cut

            st.pop();
            $s = {};
            each il st {
                l = l.split(" ");
                $z = s;
                each iw l {
                    w == 'of' and z.lof = 'yea'; z.to={eo:{}};
                    w == 'to' and z.edg = C
                    z = z[w] ||= {};
                }
            }
            1s&es = s;
        }
        $s = 1s&es;
        
        n vedge 3 s:vedge %fs:23,hs:594,dis
        $tricks = "gala <pre>vi   ous";
        n vedge 4 $s:tricks %fs:23,hs:894,dis
        n vedge 5 $s:tricks,ht:1 %fs:14,hs:694,dis
        
        me&J,['expr','-go',{s:s}];
        
    };
    me.Ja.havethis = &acgts{
        $R = c&s;
        i A.ground/$R
    };
    # data sift/unpack/classify/pointerise with osc
    # be yinyander
    
    # - globe with C
    # - J os direct
    # - new A&o ind = indented ki trip
    me.Ja.go = &acgts{
        $M = c&M = [];
        n t  $s:C.t %fs:20,hs:594
        1c&newosc = 1;
        s&dis = 1;
        s&bgi = 'i/greencush.jpg';
        s&hue = 90;
        # be a significant chunk/size
        # along running s into a extenter,
        $be = me&J,['lookfortheedge','-globe',{s:s}];
        
        # and showing output
        
        $sc = {};
        $it = &ts{
            return me&J,[t,'44444'+i,{s:s,newosc:1,pi:'od'},ex({},sc)];
        };
        $j = bes&J;
        
        $I = js&s;
        it('R:I',I);
        
        it('Ic\&head',Ic&head);
        $grou = A.ground;
        $ii = 2;
        each tN Ic&head {
            sc.ml = 0.3;
            sc.hue = ii++ * 30;
            each iR N {
                A.ground = grou;
                $t = 'head'+t+i;
                #A.ground = # < makes things vanish?
                it(t,R);
                Rc&ha and it(t+'-ha',Rc&ha)
            }
        }
        # wants to be pointed to not coded
        return;
        each ic sc&chR {
            # continue;
            me&J,['ch:'+i,'-od',{s:c,newosc:1}];
        }
    };
    #c facilitate_daydream
    #  c&s should -> s&z til explains
    me.Ja.globe = &acgts{
        n t  $s:C.t %fs:20,hs:594
        1c&newosc = 1;
        # to lay out the sources for:
        # oscillate the looker/climber, parenting from A.gobe
        A&o = 'Gaze';
        n s  $s:s %unknown
        # where the Js break up the gobes becomes a size thing
        # could end up walking z by usuality
        n looks  $s:ki(s,7) %hs:298
        return;
        1s&counting ||= 1;
        
        1s&counting++;
        1s&counting > 5 and 1s&counting = 0;
        1s&counting > 3 &&
        n counts  s:counts
        s&medo = 'cra';
    };
    me.cra = &acgtD{
        $el = c&path_yon.slice(-1)[0];
        #debugger;
        #4s&elvising = C.c;
        ~etc: $(el).text();
    };
    

