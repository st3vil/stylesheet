
Topo: | # and - the activity DEST 25
    # Topo - single read/writer
    #   to know more W about Four/Five/etc than you need to
    #   for async G&t lookup and allocation
    #   writable stuff given to it, knows the 1-5 non-git form
    #   W pushed outside of the G must be commit
    
    # Tri - pushing G frontiers of language
    # Typ - molten C edits of stuff in G
    
    this file, rebuild everything hut,
    from om, html, bootstrapping Is through 4s&in, mixing, starting
    so that J Jins J, reelecty hierarchy
    and there are various safety mechanisms
Cluts: | # ore - the matrial
    # land upon body,
    # balance neuron attention
    # into time, around tasks
NutReady: | # on startup, after NutGravy (after G&Four)
    # start the thing, we will leave/async via e
    e Tri
    # whenever that finishes, click it
    $done = &{
        $e = G&Cye,['click','',{p:'rm'}];
        G&e,['Tri'],e;
    };
    G&yl,390,done;
    
    $done = &{
        $e = G&Cye,['click','',{p:'first'}];
        G&e,['Tri'],e;
    };
    G&yl,390,done;
    # turn on the all-retry
    !4c&Jinlooping and G&waylay,'con/Jinloop';
    ~Lovely:
Typ: | # exact lounge
    # TO give at a glance a pretty good idea of where you are
    # in the colour code of
    G&heading;
    
        G&u,['MelTest'];
        G&u,['NutText'];
        G&u,['NutLands'];
        
        G&clusp;
        1s&i ||= 0;
        1s&i++;
        G&n,['C',4,{s:'Hererereere'+1s&i},{e:1}];
    ~>3 Ze colour: 1s&i, '>1 one', '>2 two', '>3 three', '>4 four',  '>5 five',  '>6 six', '>7 seven', '>8 eight', '>9 nine'
        
        $te = "steve\t4\t\"Val\"\tEin:4,daw:go,sf:004";
        $N = G&readLines,te;
        each in N {
            $cv = 0.6+i*0.002;
            G&n:['readLines+ki',cv,{s:"Item: "+4s&ki(n)},{dis:'block'}];
            $s = G&toLines,n;
            G&n:['toLines',cv+0.001,{s:"Writ: "+s},{dis:'block'}];
        }
        
    $m = G&n:['M','-jod_7',{s:A,dl:4}];
    #$m = G&n:['overflow:scroll','-jod_7',{s:A,dl:4}];
        
    1c&save = "lo";
    
Tri: | # travel
    G&heading;
    # sends G by setting T they sprout from
    # u t - declare find-and-change thing, usually into being
    #  making an I that matches (finds) and applies change,
    
    
    # waddley
    G&u,['NutText'];
    G&clusp;
    
    # navigation/breadcrumb
    # < click to reposition/wake
    # < leave what you didn't interact with
    n other 1 s:Ge %jela:5,dos:SwitchupEl:4msgs:css:overflow:hidden/scroll
    n otheR 11 s:R %jela:5,dos:SwitchupEl:4msgs:css:position:absolute/fixed
    n rm 11 s:rm %jela:5,dos:SwitchupEl:4on:W:leftbehind:slideUp
    
    'Shovel Ch Launch Expect Ventur Revisit Bystand Sevo'
    .split(' ').map(&s{
        n $s 13 $s:s %ma:0.3em,dow:do/Launch
    });
    
    n Sevotic 13 s:Sevotic %ma:0.3em,dow:Sevoticate
    # the name, renamable
    G&n,['Name',3,{s:"Steve"},{e:2}];
    
    1s&ein['C+says'] = 'says:intent:overwrite';
    1s&ein['A+says'] = 'says:intent:expand';
    1s&ein['says'] = {w:'says/Tri'};
    
    
    # where latest ^ gets down
    $src = "$('body > nexpectn')[0].A[1].sc.s.sc.lv[3].sc.z";
    G&n,['Content',4,{s:src},{e:1}];
    
    1s&runput and G&n:['Wheer','-jod_6',{v:1s&runtime,s:1s&runput,dl:4}];
    
    if (1s&M.length) {
        each in 1s&M {
            i == 6 and G&n,['many',5,{s:'...'}]; break
            i = i * 0.001;
            G&n,['ane',4+i,{s:n},{dis:'block'}];
        }
    }
    
says/Tri: | # code is said
    $c = G&E:'hC -1';
    if (c.t == 'Name') {
        # change the name/write in a new place
        # < reset pre-name-change changes to Content, dividing history as:
        #   (thing became as it is), GAP, (changes to thing, renamed to thing2)
        #   with link between...
        
    }
    else
    if (c.t == 'Content') {
        if (cc&s != ec&s) {
            # diff and save
        }
        #debugger;
        $B = Gc&B;
        $was = Bs&way;
        Bs&way = e;
        
        # not finding any way to get line numbers from syntaxerrors in eval
        # TODO maybe jslint/jshint can help diagnosure?
        if (0) {
            $cod = "window.funcifunc = function() {\n"+ec&s+"\n}";
            try { 
            #eval(cod);
            var lu;
            #var lu = $('<script/>')[0]; $(lu).html(cod).appendTo($('head'))[0];
            var ul = Function(ec&s);
            #window.funcifunc;

            }
            catch(e) { var za = e }
            $(lu).remove();
            #debugger;
            $ln = za && za.lineNumber;
            $or = za;
            za and za = za.stack;
            console.log("EVA:",ln, ul, za, or);
        }
        
        $evaler = &s{
            # more of it
            return eval(s);
        };
        
        $r = evaler(ec&s);
        Bs&way = was;
        1s&runput = r;
        1s&runtime ||= 0;
        1s&runtime++;
    }
    ~>3 says/Tri:
    
Sevoticate: |
    G&e,['Sevo'],['C+click','',{p:'t'}];
    T.ok = 1;
    
Sevo: |
    G&heading;
    $s = "Glapsitic Blows";
    $d = diff(s,"Vlapitutic Vowels");
    n in 1 $s:d,ht:1 %dis:block
    $d = diff(s,"Vlapitutic Vowels",{chunk:'line'});
    n inline 1 $s:d,ht:1 %dis:block,hue:80deg
    $d = diff(s,"Vlapitutic Vowels",{chunk:'word'});
    n loz 1 $s:d,ht:1 %dis:block,hue:80deg
    n nie 2 s:glapulism\sgaps %hue:40deg,fs:400%
Launch: | # TODO never gets an A
    $h = G&heading,'55';
    ys&class = 'ww'; # takes space but not direct clicks
    G&u,['NutIns'];
    G&clusp;
    
    ys&height = '96%'
    1s&counter ||= 1;
    
    # push for attention
    n Dosin 23 $s:1s&counter++ %dos:do/Lunch
    
    # put the inside
    $n =
    n Inner 24  %hue:30deg
    
    # name innerer and innerer
    $dolls = 'Four Inside Around Near Close'.split(" ");
    $i = dolls.indexOf(A.4.t);
    i < 0 and throw "Where? "+A.4.t
    $t = dolls[i+1];
    
    # place its element.A=4up
    # el<3 blows away any innerer (and create zombies?)
    G&n,[t,3,{Four:6},{height:'80%'}];
    
    # resolve the name
    # should really AndContinue once at the top level,
    #   and travel in through the above n s&J = this 1s&child
    if (1s&child && 1s&child != G.DNS[t]) {
        # if they G themselves
        G&n,['restart',28,{s:'restart'},'fs:70%'];
        1s&child = G.DNS[t];
    }
    # and display it since resolve
    nc&s = ki(1s&child,2);
    
    
Lunch: | # toplevel control/summary of a foodport (tests)
    G&heading;
    
    # aspects, some of these can be switched on
    # < hardwire a bunch of this, no time to be Aing
    [ 
    G&n,['A',2,{s:'A'}] ,
    G&n,['C',21,{s:'C'}] ,
    G&n,['G',22,{s:'G'}] ,
    G&n,['T',23,{s:'T'}]
    ].map(&c{
        cs&dos = 'do/Lunchust';
        cs&doswaylay = 1;
        c.t == "A" && 4c&Jinlooping and cc&s += '°';
        c.t == "T" && 4c&ttl and cc&s += '°';
    });
    
    G&n:['Dosin',3,{s:'Lunch '+4s&uuid},{hue:'60deg'}];
    
do/Lunchust: | # adjust/fire parameters ACGT
    $adj = 1 && e.t.match(/^S\+/);
    if (c.t == 'A') {
        adj and G&waylay,'con/Jinloop';
        else { G&waylay,'AndContinue' }
    }
    else if (c.t == 'C') {
        G&n,['Typ'];
    }
    else if (c.t == 'G') {
        throw "How to restart 4?"
    }
    else if (c.t == 'T') {
        adj and G&waylay,'con/VastTimeout';
        else { G&n,['Tri'] }
    }
    else {
        throw "Nut a button", c
    }
    ~>87 adj: c.t, ki(adj)
    !adj and T.ok = 1;
    
con/VastTimeout: | # less asyncing by making G&t sure of cached things
    if (4c&ttl) {
        delete 4c&ttl;
        delete Gc&ttl;
    }
    else {
        4c&ttl = 3600;
        Gc&ttl = 3600;
    }
con/Jinloop: | # A continuously
    # would rather change OC s&on and tell s to pull
    if (4c&Jinlooping) {
        delete 4c&Jinlooping;
        ~>5 Jinloop off:
    }
    else {
        $lo = 4c&Jinlooping = Math.random();
        $op = &{
            lo != 4c&Jinlooping and return
            G.DNS[A.4.t] != A.4 and G&c,"Loopoff:"+A.4.t+"-VS-"+ki(G.DNS[A.4.t],2); return;
            G&delay,0.3,op;
            G&waylay,'AndContinue';
        };
        op();
        ~>5 Jinloop on:
    }
    
Who: | # lis, wandering We things
    G&heading;
    
    G&n,['Name',3,{s:"Fand"},{e:2}];
    
    

