
Topo: | # and
    # Topo - single read/writer
    #   to know more W about Four/Five/etc than you need to
    #   for async G&t lookup and allocation
    #   writable stuff given to it, knows the 1-5 non-git form
    #   W pushed outside of the G must be commit
    
    # Tri - pushing G frontiers of language
    # Typ - molten C edits of stuff in G
Typ: | # exact lounge
    # TO give at a glance a pretty good idea of where you are
    # in the colour code of
    G&heading;
    
        G&u,['MelTest'];
        G&u,['NutText'];
        G&u,['NutLands'];
        
        G&clusp;
        1s&i ||= 0;
        1s&i++;
        G&n,['C',4,{s:'Hererereere'+1s&i},{e:1}];
    ~>3 Ze colour: 1s&i, '>1 one', '>2 two', '>3 three', '>4 four',  '>5 five',  '>6 six', '>7 seven', '>8 eight', '>9 nine'
        
        $te = "steve\t4\t\"Val\"\tEin:4,daw:go,sf:004";
        $N = G&readLines,te;
        each in N {
            $cv = 0.6+i*0.002;
            G&n:['readLines+ki',cv,{s:"Item: "+4s&ki(n)},{dis:'block'}];
            $s = G&toLines,n;
            G&n:['toLines',cv+0.001,{s:"Writ: "+s},{dis:'block'}];
        }
        
    $m = G&n:['M','-jod_7',{s:A,dl:4}];
    #$m = G&n:['overflow:scroll','-jod_7',{s:A,dl:4}];
        
    1c&save = "lo";
    
Tri: | # travel
    G&heading;
    # sends G by setting T they sprout from
    # u t - declare find-and-change thing, usually into being
    #  making an I that matches (finds) and applies change,
    
    
    # waddley
    G&u,['MelTest'];
    G&u,['NutText'];
    G&clusp;
    
    # navigation/breadcrumb
    # < click to reposition/wake
    # < leave what you didn't interact with
    G&n,['other',1,{s:"Ge"},{jela:15,dos:"SwitchupEl:4msgs:css:overflow:hidden/scroll"}];
    G&n,['something',15,{s:"La"},{fs:'170%',hs:'345',dos:"do/Launch"}];
    
    # the name, renamable
    G&n,['Name',3,{s:"Steve"},{e:2}];
    
    1s&ein['C+says'] = 'says:intent:overwrite';
    1s&ein['A+says'] = 'says:intent:expand';
    1s&ein['says'] = {w:'says/Tri'};
    
    
    # where latest ^ gets down
    $src;
    src = "$('body > nlaunchn')[0].A";
    G&n,['Content',4,{s:src},{e:1}];
    
    #G&n,['Who'];
    if (1s&runput) {
        G&n:['Wheer','-jod_6',{v:1s&runtime,s:1s&runput,dl:4}];
    }
    
    
    if (1s&M.length) {
        each in 1s&M {
            i == 6 and G&n,['many',5,{s:'...'}]; break
            i = i * 0.001;
            G&n,['ane',4+i,{s:n},{dis:'block'}];
        }
    }

says/Tri: | # code is said
    $c = G&E:'hC -1';
    if (c.t == 'Name') {
        # change the name/write in a new place
        # < reset pre-name-change changes to Content, dividing history as:
        #   (thing became as it is), GAP, (changes to thing, renamed to thing2)
        #   with link between...
        
    }
    else
    if (c.t == 'Content') {
        if (cc&s != ec&s) {
            # diff and save
        }
        #debugger;
        $r = eval(ec&s);
        1s&runput = r;
        1s&runtime ||= 0;
        1s&runtime++;
    }
    ~>3 says/Tri:
    
do/Launch: |
    delete 4s&Jtv.Launch;
    G&e,['Launch']
Launch: | # TODO never gets an A
    $h = G&heading,'55';
    hs&dos = 'do/Launch';
    ys&class = 'ww'; # so it can take up space, yet you can click through it
    G&u,['NutIns'];
    G&clusp;
    
    ys&height = '80%'
    1s&counter ||= 1;
    G&n:['Dosin',23,{s:'Dose of inward '+1s&counter++},{dos:'do/Lunch'}];
    #debugger;
    
    # viewport, begins G/G&Four in element buildout:
    G&n,['Inside',3,{Four:'Inhtro'},{height:'80%'}];
    #{ab:1,width:'50%',height:'50%','min-height':'25em'}];
    return;
    
    
do/Lunch: |
    ~>39 Want: ki(1s&theg,2)
    1s&theg;
Lunch: | # sequence a foodport (tests)
    G&heading;
    
    
    G&n:['Dosin',3,{s:'Dose of inward'},{hue:'60deg'}];
    
NutIns: | # subverse valuar, for editables s&e
    u jc
    # of html?
    n \'of:om'
    Four 6:
        $Y = 4s&other = 1s&theg = G&Four;
        
Who: | # lis
    G&heading;
    
    G&n,['Name',3,{s:"Fand"},{e:2}];
    
    
einclick: | # what any webby W can experience s&dos
    #G&E,'hC s&dos';
    # 
    #debugger;
    $D = G&E:'hC s&dos -1';
    if (D) {
        $ar = G&F:D,'s&dos peel:way:@m';
        ~>3 dos: ar.way
        G&way,ar.way,ar;
        return T.el = 1;
    }
    else {
        
    }
    #debugger;
    #1s&M.push("Anteract: "+4s&ki(C,3));
    
SwitchupEl: | # tweak Elemental bitology
    $find = m.shift();
    find.slice(0,1) == '4' and find = A.4.sc[find.slice(1)]
    $adjust = m.shift();
    $property = m.shift();
    $between = m.shift().split('/');
    $el = $(find);
    !el and throw "Nofind "+find;
    $now = el[adjust](property);
    $i = 0;
    while (between[0] != now) {
        between.push(between.shift());
        i++ > between.length and throw "Didnt start with any of "+ki(between);
    }
    between.shift();
    $next = between.shift();
    el[adjust](property, next);
t/JSTesti: | # test the JS bits
    # how does it work?
    # a bunch of timers?
    # C-ing
        ~W: ki(G&Cye,['Thumb'] )
        ~W: ki(G&Cye,['Thumb','W',{},'flac:please'] )
        ~pi: ki(G&Cye,['Thumb','-lattice_331'] )
        
        
        $az = G&Cye,['yo',5,{s:'lalala'},{re:'554',en:3}];
        
        $see = G&Cye,['tango',22,{e:C},{la:'hn',na:3,z:[az]}];
        
        see.y.A = A.up;
    
    # data-ing
        G&datam,[],"['*']" and throw "Isnt 1"
        !G&datam,['anything'],"['*']" and throw "Isnt 2"
        !G&datam,[['']],"[['']]" and throw "Isnt 3"
        G&datam,[['']],"['']" and throw "Isnt 4"
        ~WayLAy
        G&waylay,'AndType',2;
        
        
MelTest: |
    u js
    n \'of:n'
    
    jela 53:
        s&fs = (15 * s)+'%';
    
NutTal: | # speak of W
    u j
    n \'of:eye'
    # n usual title in J6
    # should t s be a ki of the J?
    heading:
        G&jam and throw "jamming", A.1;
        
        $size = A.1 == A.3 ? "200" : "150";
        $n = G&n,['t',0.01,{s:A.1.t},{ab:1,fs:size+'%',blr:'2px',zi:-20}];
        
        $r = 1s&root;
        
        if (s) {
            if (s == '55') {
                rs&left = '50%';
                rs&width = '50%';
                rs&ab = '1';
            }
            else {
                throw "unknown heading style", s
            }
        }
        
        rs&dis = 'block';
        rs&width = '50%';
        
        1s&ein ||= {};
        1s&ein.click = {w:'einclick'};
        
        1s&M ||= [];
        
        return n
    
    
    
pi/jod: | # a js J, shows a J-shaped bit of data, to aspect serialising change
    # decide lummitry
    # chase detail
    # make assertions
    # code folding J
    # start a tree of -jod
    
    # has several osc flavours changable without fully J-ing
    # holds markers into whatever data/code is being asked to be opened
    
    # should partition indenty text,
    # as data structures
    # and save everything, or just a patch/lv
    
    # G&t/search for everything and add blue underline
    
    G&n,['t',0.01,{s:C.t},{hue:'60deg'}];
    
    c&v and G&n,['v',0.02,{s:c&v},{hue:'80deg'}];
    
    G&n,['Thing',3,{s:ki(c&s,c&dl||3)}];

