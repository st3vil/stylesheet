not: | # do everything! (run as Spec)
    Jc&tape = 1;
    Jc&save = 1;
    A.6.t = A.7.t;
    
    Rw Tiot;
    # the sprawldy
    
    my $d = Rw ReadMe;
    !ds&pid || ds&pid eq $$ || sayre("Giving over to ds&pid") && exit;
    y.at.pid = $$;
    
    # to collect via T.has:
    Js&servetime = [];
    
    my $def = 
    n blank=>-Trooms
    
    Rw GiveTime;
    my $ti;
    $ti = Js&ti = &{ $ti eq Js&ti && 4s&toy ->({to=>[[C.t]]}) };
    G&timer:0.2,$ti;
    
    
    #n roms=>4=>Js&bowls++=>'%dis,fs:44'
    
    
    # watch own saves for open/close/plot T
    #   and the latest fork... shouldn't fork?
    
    # to get up Knowing T.has
    
    # must have own clock, to watch Cluster
    #   osc knows T.has.timing
    # making T:
    #   - left, what to incorporate into Normal/SunBeatling
    #   - right, what/where to write out
     
    # sprout clusters (bay) (GG), gusts (bay/wil) (G) and wormholes (W)
    #   bind wormhole with travel, ghost
Plael: | # test el function
    y.at.ellog = 1;
    
    my $l =
    n giveth=>-od=>[[1,2,3],[3,4,(Js&bowls + 5)]]
    Js&bowls > 2 &&# sleep(2) &&
    n again=>2=>{},{J=>ls&J}
    
    Js&bowls++ if Js&bowls < 3;
    
    return;
    
    #y.at.ellog = 1;
    $M = _s&z = [] for
    n the=>3=>"Expe"
    m sev=>3=>"Fo"
    m eral=>6=>"Five"
    my @l = (('x') x Js&bowls++);
    n bo=>-bowling_5=>[neg=>@l,a=>trope=>5]
    0 &&
    n see=>'8'.Js&bowls=><<'','e'
        //console.log(A.on);
    my $t = T.op;
    $t = t.y.s;
    $t = ts&lv;
    #$t = $t->[-1];
    my $s = G&Ct:[s=>{}=>{s=>$t}];
    Js&bowls > 5 &&
        G&give,Suck=>$s;
    
Suck: | # diag, 
    y.at.ellog = 9;
    Rw Tiot;
    Rw Elationist;
    S
    n from=>o1=>"From: ".G&sn,Jc&from ,'dis,hs:874'
    n suction=>-od=>{s=>Jc&es||"blank"};
    # and turn back into line-per-time host
    G&timer:0.1,&{ 4s&toy->({to=>['Udder']}) }
Bal: | # G up in a GG
    # from Udder, assume T position
    die "Cosume: ".ki $C;
pi/bowling: |
    Jc&save = 'W';
    m teh=>''=>$_,'ma:0.2' for @$s;
pi/Trooms: |
    Jc&save = 'W';
    # C Trooms, instead of single items everywhere:
    
    n panics=>-clust=>{s=>$s,mode=>'err'}
    
    # get written on
    n gravities=>-GG_2=>{s=>$s}
    
    # put forward
    #n travels=>-T
pi/GG: |
    Jc&save = 'W';
    -d "$s/p" || die "No $s/p";
    y.at.dos = 'Clustout';
    
    my $eh = hitime();
    
    n see=>-listle_1=>$s,'qz'
    m _.t=>6=>{s=>_.t,fils=>$_},'dos:Fur' for G&op,'pi:fils';
    # ^ others, refind selves v
    my $d = Rw ReadMe;
    
    my $tw;
    for my $C (@$M) {
        $tw.>C.t = $C;
        my $f = c&fils;
        my $M = [];
        my $o = d.y.tw.>C.t;
        # all knowledge must pass through every time, or be lost
        m $_ for @{$o && os&z || []};
        s&z = $M if @$M;
        s&unknown = 1 if !@$M;
    }
    # add selves whose other is missing
    m d.y.tw.>_.t for grep { _s&dos eq 'Fur' && !$tw.>_.t } @{ds&z};
    my @ope;
    for my $C (@$M) {
        s&ma = 0.3;
        my $s;
        $s = '!' if !c&fils; # self is missing now
        $s = '?' if s&unknown; # other begins missing
        (s&sep,c&s) = ("0.7","c&s$s") if $s;
        push @ope, $C if Js&Fur && Js&Fur.t eq C.t;
    }
    
    n vokate=>-lookins_02=>[qw'bay peace']
    m _.t=>-looking_6=>{s=>$_} for G&op;
    
    m _.t=>-GGo=>{s=>$C}
    y.u = 4;
    Js&Fur &&
    n Fur=>-od_8=>{s=>Js&Fur}
Fur: | # thing further and not
    return delete js&Fur if us&S;
    js&Fur = $c;
pi/GGo: | # identify your bits
    n t=>1=>C.t=>'fs:12,hs:488,dis'
    my $y = &C{ G&aC };
    my @l = G&ind:$s,$y;
    n s=>6=>wdump(\@l)
pi/gust: | # a look at a G
    # 

