not: | # do everything! (run as Spec)
    Jc&tape = 1;
    Jc&save = 1;
    A.6.t = A.7.t;
    
    Rw Tiot;
    # the sprawldy
    
    my $d = Rw ReadMe;
    !ds&pid || ds&pid eq $$ || sayre("Giving over to ds&pid") && exit;
    y.at.pid = $$;
    
    # to collect via T.has:
    Js&servetime = [];
    
    my $def = 
    n blank=>-Trooms
    
    Rw GiveTime;
    my $ti;
    $ti = Js&ti = &{ $ti eq Js&ti && 4s&toy ->({to=>[[C.t]]}) };
    G&timer:7,$ti;
    
    
    #n roms=>4=>Js&bowls++=>'%dis,fs:44'
    
    
    
    
    
    # watch own saves for open/close/plot T
    #   and the latest fork... shouldn't fork?
    
    # to get up Knowing T.has
    
    # must have own clock, to watch Cluster
    #   osc knows T.has.timing
    # making T:
    #   - left, what to incorporate into Normal/SunBeatling
    #   - right, what/where to write out
     
    # sprout clusters (bay) (GG), gusts (bay/wil) (G) and wormholes (W)
    #   bind wormhole with travel, ghost
Bal: | # G up in a GG
    # from Udder, assume T position
    die "Cosume: ".ki $C;
pi/bowling: |
    1s&sayo = 1;
    m teh=>''=>$_ for @$s;
pi/Trooms: |
    Jc&save = 'W';
    # C Trooms, instead of single items everywhere:
    
    n panics=>-clust=>{s=>$s,mode=>'err'}
    
    n gravities=>-GG_2=>{s=>$s}
pi/GG: |
    Jc&save = 'W';
    -d "$s/p" || die "No $s/p";
    y.at.dos = 'Clustout';
    
    my $eh = hitime();
    
    n see=>-listle_1=>$s,'qz'
    # ^ others, refind selves v
    my $d = Rw ReadMe;
    
    m _.t=>6=>{s=>_.t,fils=>$_},'dos:Fur' for G&op,'pi:fils';
    my $tw;
    for my $C (@$M) {
        $tw.>C.t = $C;
        my $f = c&fils;
        my $M = [];
        my $o = d.y.tw.>C.t;
        # all knowledge must pass through every time, or be lost
        m $_ for @{$o && os&z || []};
        s&z = $M if @$M;
        s&unknown = 1 if !@$M;
    }
    # add selves whose other is missing
    m d.y.tw.>_.t for grep { _s&dos eq 'Fur' && !$tw.>_.t } @{ds&z};
    my @ope;
    for my $C (@$M) {
        s&ma = 0.3;
        my $s;
        $s = '!' if !c&fils; # self is missing now
        $s = '?' if s&unknown; # other begins missing
        (s&sep,c&s) = ("0.7","c&s$s") if $s;
        push @ope, $C if Js&Fur && Js&Fur.t eq C.t;
    }
    
    m _.t=>-GGo=>{s=>$C}
    y.u = 78;
    Js&Fur &&
    n Fur=>-od_8=>{s=>Js&Fur}
Fur: | # thing further and not
    return delete js&Fur if us&S;
    js&Fur = $c;
pi/GGo: | # identify your bits
    n t=>1=>C.t=>'fs:12,hs:488,dis'
    my $y = &C{ G&aC };
    my @l = G&ind:$s,$y;
    n s=>6=>wdump(\@l)
pi/gust: | # a look at a G
    # 

