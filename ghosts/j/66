not: | # do everything! (run as Spec)
    Jc&tape = 1;
    Jc&save = 1;
    A.6.t = A.7.t;
    
    Rw Tiot;
    # the sprawldy
    
    
    my $d = Rw ReadMe;
    !ds&pid || ds&pid eq $$ || sayre("Giving over to ds&pid") && exit;
    y.at.pid = $$;
    
    # to collect via T.has:
    Js&servetime = [];
    
    my $def = 
    n blank=>-Trooms
    
    Rw GiveTime;
    my $ti;
    $ti = Js&ti = &{ $ti eq Js&ti && 4s&toy ->({to=>[[C.t]]}) };
    G&timer:3.2,$ti;
    
    
    #n roms=>4=>Js&bowls++=>'%dis,fs:44'
    
    
    # watch own saves for open/close/plot T
    #   and the latest fork... shouldn't fork?
    
    # to get up Knowing T.has
    
    # must have own clock, to watch Cluster
    #   osc knows T.has.timing
    # making T:
    #   - left, what to incorporate into Normal/SunBeatling
    #   - right, what/where to write out
     
    # sprout clusters (bay) (GG), gusts (bay/wil) (G) and wormholes (W)
    #   bind wormhole with travel, ghost
Plael: | # test el function
    y.at.ellog = 1;
    
    my $l =
    n giveth=>-od=>[[1,2,3],[3,4,(Js&bowls + 5)]]
    Js&bowls > 2 &&# sleep(2) &&
    n again=>2=>{},{J=>ls&J}
    
    Js&bowls++ if Js&bowls < 3;
    
    return;
    
    #y.at.ellog = 1;
    $M = _s&z = [] for
    n the=>3=>"Expe"
    m sev=>3=>"Fo"
    m eral=>6=>"Five"
    my @l = (('x') x Js&bowls++);
    n bo=>-bowling_5=>[neg=>@l,a=>trope=>5]
    0 &&
    n see=>'8'.Js&bowls=><<'','e'
        //console.log(A.on);
    my $t = T.op;
    $t = t.y.s;
    $t = ts&lv;
    #$t = $t->[-1];
    my $s = G&Ct:[s=>{}=>{s=>$t}];
    Js&bowls > 5 &&
        G&give,Suck=>$s;
    
Suck: | # diag, 
    y.at.ellog = 9;
    Rw Tiot;
    Rw Elationist;
    S
    n from=>o1=>"From: ".G&sn,Jc&from ,'dis,hs:874'
    n suction=>-od=>{s=>Jc&es||"blank"};
    # and turn back into line-per-time host
    G&timer:0.1,&{ 4s&toy->({to=>['Udder']}) }
Bal: | # G up in a GG
    # from Udder, assume T position
    die "Cosume: ".ki $C;
pi/bowling: |
    Jc&save = 'W';
    m teh=>''=>$_,'ma:0.2' for @$s;
pi/Trooms: |
    Jc&save = 'W';
    # C Trooms, instead of single items everywhere:
    
    n panics=>-clust=>{s=>$s,mode=>'err'}
    
    my $eh = hitime();
    # get written on
    n gravities=>-GG_2=>{s=>$s}
    
    my $ts = hitime() - $eh;
    my $delta = Rw mass $s:ts;

    n fromi=>3=>"Fro grav, $delta",'dis,fs:6,hs:474'
    
    # put forward
    #n travels=>-T
    n Taste=>-Turn_5
pi/Turn: | # button to run thing and sort through ashes
    y.at.dos = 'Turns';
    n t=>1=>C.t
Turns: | # send instance into running
    my $s = [Turning=>[W=>''=>{s=>cc&s}]];
    #sayre "Giving $w: $f/$t: sc.Jo";
    Rw Wudder $s;
Turning: | # set up on the running instance
    # brackets whole Run inc timers, Sucks Wall
    Jc&entire = [];
    Jc&done_hook = [Turning=>[done=>'']];
    Js&ein.t.W.sMJ = &sMJjeTCA{
        # prepare node for testrun:
        push @{Gc&when_done||=[]}, Jc&done_hook;
        # mutation
        5c&plus = ['StarTime'];
        n Howz
        # muting
        n Wall=>W=>{mute=>1,entire=>Jc&entire}
        
        # being
        Gc&testbeing = 'Taste';
        n Gc&testbeing
    };
    Js&ein.t.done.sMJ = &sMJjeTCA{
        # cancel test Ting
        @{Gc&when_done} = grep{ $_ ne Jc&done_hook } @{Gc&when_done};
        # Tee and comp to test data
        my $W =
        n Wall=>W=>{mute=>0,entire=>0}
        my $Wallz = Ws&J.sc.top.sc.z;
        my $Wentz = Jc&entire;
        G&e,LiveResult=>[Wentz=>''=>{s=>$Wentz}];
        
    };
    S
    Rw GiveTime;
    
LiveResult: |
    Rw Tiot;
    Js&ein.t.Wentz.sMJ = &sMJjeTCA{
        # every item sent to Wall
        for my $C (@$s) {
            my $o = G&o,$C;
            my $t = "C.t's Wentz";
            $t = "$t ".Jc&tes.>$t if Jc&tes.>$t ++;
            m $t=>-result=>{s=>oc&s}
        }
    };
    S
    #_.y.cv = 1 for @{Js&M||[]};
    m $_ for @{Js&M||[]};
    n Gc&testbeing=>-lookins
    
pi/result: |
    y.at.dis = 1;
    n tee=>1=>C.t
    #n W=>2=>{s=>G&aC,$s },'fs:7,hs:647,dis'
    if (my $f = C.y.self) {
        n self_had=>2=>" us: ".G&aC,$f  ,'dis,fs:7'
    }
    if (s&unknown) {
        n unknown=>32=>"unknown",'dos:looksult,ma:0.2,hs:895';
    }
    y.n = 3;
    #n seein=>-od=>{s=>$s};
    #return;
    for my $D (@{ss&z||[]}) {
        my $desc = G&aC,$D ."   ha=Ds&ha";
        my $w =
        m "writes D.t"=>''=>{s=>$desc},'fs:7,hs:347,dis'
        my $M = ws&z = [];
        m s=>''=>{s=>Dc&s},'fs:7,hs:247,dis'
    }
looksult: | # accept -result
    my ($i,$s) = Rw lookinating;
    
    # place changes
    
    #is&lum = (ss&lum||1) + (ec&us.S ? -1 : 1);
    my ($j) = reverse e&_hJ;
    jc&s.sc.pi eq 'result' || die "strang -result: ".G&aC,$j;
    my $r = js&root;
    G&give,Suck=>[s=>''=>{s=>rc&M}];
    
    my $vsn = G&sn,$J;
    1 && saybl "With a: $vsn", G&ind,Js&change,'aC';
    1 && sayyl "3 to ".G&sn ." Ist: ".G&sn,A.3;
    
Taste: | # waylay self
    my $i = Js&bowls++ + 1;
    Jc&tape = 'W';
    S
    n Figuration=>1=>"Luxe Elan",{fs=>4*$i}
    
    my $cb = &{ 4s&toy->({to=>[C.t]}); };
    $i < 3 &&
    G&time,1,$cb;
StarTime: | # explicit Motor-served timers
    u i
    # todo compute desire
    time: %acgt:s cb
        1 && saygr "Eating time";
        push @{4c&todo||=[]}, [$A,$s,$cb];
MotorTime: | # serve time
    sayre "Plan future: ".ki $_ for @{4c&todo};
    my $tz;
    for my $y (@{4c&todo}) {
        my ($Y,$s,$cb) = @$y;
        saybl "Timering $s: ".G&sn,$Y;
        push @{$tz.>$s ||=[]}, [$Y,$cb];
    }
    @{4c&todo} = ();
    if (!$tz) {
        if (my $wd = Gc&when_done) {
            G&e,@$_ for @$wd;
        }
        return;
    }
    my @int;
    for my $s (sort keys %$tz) {
        push @int, $s;
        my $v = $tz.>$s;
        Mojo::IOLoop->timer($s,&{
            1 && sayyl "Here again!";
            for my $y (@$v) {
                my ($Y,$cb) = @$y;
                1 && saybl "Comeback $s: ".G&sn,$Y;
                $cb->();
            }
        });
    }
    sayyl "Have timers at ".join", ", @int;
pi/GG: |
    Jc&save = 'W';
    -d "$s/p" || die "No $s/p";
    s&is = 'directory';
    y.at.dos = 'Clustout';
    
    my $eh = hitime();
    
    n see=>-listle_1=>$s,'qz'
    m _.t=>''=>{s=>_.t,fils=>$_},'dos:looking,ma:0.2' for G&op,'pi:fils';
    # ^ others, refind selves v
    n vokate=>-lookins_02
    
    #m _.t=>-GGo=>{s=>$C}
    y.u = 4;
    Js&Fur &&
    n Fur=>-od_8=>{s=>Js&Fur}
Fur: | # thing further and not
    return delete js&Fur if us&S;
    js&Fur = $c;
pi/GGo: | # identify your bits
    n t=>1=>C.t=>'fs:12,hs:488,dis'
    my $y = &C{ G&aC };
    my @l = G&ind:$s,$y;
    n s=>6=>wdump(\@l)
pi/gust: | # a look at a G
    # 

