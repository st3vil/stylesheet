pi/clust: | # a look at a GG/p (or so)
    Jc&save = 'W';
    -d "$s/p" || die "No $s/p";
    y.at.dos = 'Clustout';
    
    my $eh = hitime();
    
    my $c;
    c.s = G.d ? do { # Wet G Ge
        c&mode eq 'err' ? "$s/G/Ge/ip/*/err"
        : "$s/G/Ge/ip";
    } : c&mode eq 'err' ? "$s/p{,/*/err}"
        : "$s/p{,/*}";
    c.do = 'f' if G.d;
    n "s/p"=>-listle_1=>$c,'qz'
    my $dir = T.op.sc.dir;
    my $N = [ G&op,'pi:fils' ];
    
    my $skip_pile;
    my @err;
    my $M = []; # one-time messages + permanent errors
    if (c&mode eq 'err') {
        @err = grep { _s&size } grep {_.t =~ /\/err$/} @$N;
        if (@err) {
            my @s = grep{$_} map{
                G.d ? /^$s\/G\/Ge\/ip\/(.+)\/err$/
                : /p\/(\d+)\/err$/ }
                map { _c&s } @err;
            for (@s) {
                1s&err_spawn.>$_ ++ && next;
                # Wet G by ipd
                G&elph,Elvis=>[opt=>"Gc&Down:Clustouting:the:$_,bay:$s"];
            }
            m errors=>32=>"Errors: @s",'hs:586,fs:7,dis'
        }
        else {
            c&skip_pile = 1;
        }
    }    
    
    unless (c&skip_pile) {
        # to pi chewing list edge-blur:
        # basically receive $N or previous $M stuff
        # and chew, output $M stuff
        #   cv = 1 for sort of $M
        #   cv = '' to keep as $M is
        #   cv = cv to keep cvs

        #Rw pi/linkle $N;
        n linked=>-linkle_2=>{},'qz'

        #Rw pi/groule $N;
        n grouped=>-groule_3=>{},'qz'

        n piled=>-pilele_4=>{},'dos:Clustout'
    }
    
    my $ts = hitime() - $eh;
    my $delta = Rw mass $s:ts;

    _s&z = $M for
    n fromi=>3=>"Fro $dir, $delta",'dis,fs:6,hs:474'
    
    1s&data &&
    n dat=>-od_5=>{s=>1s&data},'hue:3'
    
Clustout: | # chase output, event
    my ($J) = map{_s&J} grep {_s&pi eq 'clust'} e&_hC;
    my $m = Js&data = [];
    push @$m, "Having: ".ki $_ for e&_hC;
    saybl "Put: ".G&sn,$J ."  ".wdump 3, $m;
    return;
    #G&elph,Elvis=>[opt=>"Udder:Chase:the:os&pid"];
Clustouting: | # chase output
    Gc&Glan = 'Elan' if G.d;
    Rw Tiot;
    Js&pid = c&the if c&the; # may be ip
    my $bay = c&bay||G.c.bay;
    my $dir = G.d ? "$bay/G/Ge/ip" : "$bay/p";
    Jc&pd = "$dir/Js&pid";
    
    n t=>1=>Jc&pd,'%hs:347,fs:13'
    -l "Jc&pd/Gt" && 
    n Gt=>11=>readlink("Jc&pd/Gt"),'%hs:443,fs:17'
    
    n out=>-hasl_2,{},'fs:6'
    n err=>-hasl_3,\'bgh:942','fs:7'
pi/hasl: | # log tail
    #y.at.over = 'scroll';
    y.at.dis = 1;
    y.at.bgh = c&bgh if c&bgh;
    #y.at.mh = '36';
    #y.at.mw = '48';
    Js&len ||= 30;
    my $f = 2c&pd || die "2 by c pd.";
    $f .= "/C.t";
    my @l = `tail -n Js&len $f`;
    
    chomp for @l;
    n t=>1=>C.t=>'%hs:349,fs:14'
    
    y.n = 12;
    my (@c,$lc);
    @l = map {
        # group by line colour
        
        1 while s/^\x1b\[(\d+)m//;
        if ($1 ne $lc || !@c) {
            $lc = $1;
            push @c, {t=>$1,y=>{}};
        }
        my $c = $c[-1];
        push @{cs&z||=[]}, $_;
        $_
    } @l;
    #m l=>''=>join("\n",_s&z)$_,'%dis:3' for @c;
    for (@c) {
        my $hs = _.t eq '31' ? '066' # red
            : _.t eq '93' ? '276' # yellow
            : _.t eq '94' ? '676' # blue
            : _.t eq '37' ? '224' # non
            : "109";
        my $l = join "\n", @{_s&z};
        m bit=>''=>$l,"%hs:$hs,dis:3"
    }
    #n C.t=>-pud=>{dl=>6,s=>\@c};
    say "C.t is ".@l;
    #G&give,Toter=>o=>\;
    
pi/pilele: | # pile filenames
    Jc&save = 'W';
    # FactorEase top
    # and list chewing pi that know how to be Rw
    my $N = ar.N || c&N || do {
        my $t = T.op = ref $s ? ss&J.sc.top || die "Notop" : T.oT.op;
        [ G&op,'pi:fils' ];
    };
    # assuming they're in order
    for my $C (@$N) {
        C.t = s&unit if s&unit;
        delete c&s;
        
        my $M = [];
        if (C.y.C) { # follow back to -listle o
            my $S = $C;
            my @e;
            while (S.y.C) {
                $S = S.y.C;
                push @e, $S;
            }
            # the one in o after the first mo
            my $i = $e[-1];
            $S = $e[-2];
            $S = S.y.A;
            S.t eq 'o' || die join"\n", "Didn't find last o along: ",
              map { "--- _.t: ".G&aC,_.y.A } @e;
            
            my $d = Sc&diff || {};
            my $D = $d;
            $D = {} if ds&allnew;
            if (C.t eq 'err' && s&size) {
                Ds&neg.sc.size ||= {c=>{s=>s&size}};
            }
            
            if (my $n = Ds&neg) {
                each nk,gk,v $n {
                    my $k = $nk;
                    if ($k eq 'sc') {
                        next if $gk eq 'mtime' && gkv.size;
                        $k = 's&';
                        $k = $gk = '' if $gk eq 'size';
                    }
                    else {
                        $k = "$nk&";
                    }
                    my $d = vc&s;
                    if ($d =~ /^\d+$/ && vc&was =~ /^\d+$/) {
                        $d = $d - vc&was;
                        $d = "+$d" if $d > 0;
                    }
                    my $s = join" ", grep{$_} "$k$gk", $d;
                    m "$nk $gk"=>''=>$s,'hs:877,fs:6'
                }}
            }
        }
        
        c&s = "C.t";
        s&z = $M if @$M;
    }
    
    # put ind in their up's s&z
    my @N;
    my @p;
    for my $C (@$N) {
        next if !length C.t;
        $p[s&ind+0] = $C;
        if (s&ind) {
            my $o = $p[s&ind-1];
            s&ma = 0.4;
            push @{os&z||=[]}, $C;
            os&bus++ if s&z;
        }
        else {
            push @N, $C;
        }
        delete C.sc.>$_ for qw'inside mtime ind size';
    }
    @$N = @N;
    
    for my $C (@$N) {
        s&fs = 6 if !s&bus;
        s&ml = s&ind * 2 if s&ind;
        s&dis = 1;
        saybl G&aC ." And: ".ki s&z;
    }
    
    my $M = ar.M || [];
    ar.N || do {
        @$M = @$N;
        _.y.cv = 1 for @$M;
    }
    
    
pi/groule: | # pile filenames
    # FactorEase top
    # and list chewing pi that know how to be Rw
    my $N = ar.N || do {
        my $t = T.op = ref $s ? ss&J.sc.top || die "Notop" : T.oT.op;
        [ G&op,'pi:fils' ];
    };
    my @p = ();
    for my $C (@$N) {
        my @b = split '/', C.t;
        my $i = 0;
        for my $et (@b) {
            my $c = $p[$i]; # last insider
            if (c.t && C.t =~ /^c.t\/(.+)$/) {
                s&inside = $c;
                s&ind = $i+1;
                s&unit = $1;
                #saygr "c.t has C.t";
            }
            else {
                pop @p while @p > $i;
                $p[$i] = $C;
            }
            $i++;
        }
    }
    
    
    
    my $M = ar.M || [];
    ar.N || do {
        @$M = @$N;
        _.y.cv = 1 for @$M;
    }
    
pi/linkle: | # dedupe linked filenames
    # FactorEase top
    # and list chewing pi that know how to be Rw
    my $tw;
    my $N = ar.N || do {
        my $t = T.op = ref $s ? ss&J.sc.top || die "Notop" : T.oT.op;
        $tw = t.y.tw;
        [ G&op,'pi:fils' ];
    };
    $tw ||= {map{_.t=>$_}@$N};
    
    my $linked_tw = {};
    for my $l (grep {_s&link} @$N) {
        my $to = ls&link;
        next if $to =~ /\.\./;
        my $o = $tw.>$to;
        # get everything inside either place
        my ($ls,$os) = map {my$t=$_; [ grep {_.t =~ /^\Q$t\E/} @$N] } l.t, o.t;
        @$ls == @$os || die "confusing linkage";
        my @dodge;
        # are they the same except for the name in linkage, and the s&link itself
        for (0..(@$ls-1)) {
            my $l = $ls->[$_];
            my $o = $os->[$_];
            (local oc&s = oc&s) =~ s/o.t/l.t/;
            local os&link = ls&link if ls&link;
            unless (ki(l.c) eq ki(o.c) &&
                   ki(l.sc) eq ki(o.sc)) {
                push @dodge, [$l,$o];
            }
        }
        # if the inode is the same, it grew between each way we looked at it
        for (@dodge) {
            my ($l,$o) = @$_;
            my ($li,$oi) = map{ (stat _c&s)[1] } $l,$o;
            $li eq $oi || sayre "Differing inodes even: ".ki($l)."\nvs: ".ki$o;
        }
        $linked_tw.>l.t = o.t;
    }
    each l,o $linked_tw {
        @$N = grep {
            _.t !~ /^$o/
        } @$N;
    }
    
    my $M = ar.M || [];
    ar.N || do {
        @$M = @$N;
        _.y.cv = 1 for @$M;
    }
pi/listle: | # find filenames, ^^^^^^^^
    Jc&save = 'W';
    my $h;
    hc&do = c&do if c&do;
    hc&nonempty = 1;
    my $l = Rw Lst + $s $h;
    y.at.dir = ls&dir;
    my $s = join("\n", map {G&aC,$_ }@$M);
    n disop=>''=>$s,'fs:7,dis'
    _.y.cv = 6 for @$M;
    
Lst: | # gives your $M files from ls -1ct, sleeps using your past
    # return bigger and bigger looks at the list
    my $laC;
    my $list = &i{
        my $C = G&Ct,[C.t=>''=>{s=>$s}];
        s&iterat = $i;
        c&lim = 16 * $i;
        ar.h && G&oh,$C,ar.h;
        
        my $N = Rw Exer;
        $laC = $C;
        $C
    };
    
    # en-2 each file
    my $form = &C{
        (s&size,s&mtime) = (stat c&s)[7,9];
        s&link = readlink c&s if -l c&s;
        s&dir = 1 if -d c&s;
    };
    
    # retrieves our last save, doesn't impart/resume it
    my $d = Rw ReadMe;
    # osc changing atom loads contents
    local A.V = 1;
    push @$M,
        Rw Modulim $s $d $list $form;
    
    $laC
Modulim: | # loadup M news from an ls or so
    # stop when old news found
    my $piit = 'fils';
    my $done;
    my $list_done;
    my $seen; # C.t
    my $seens; # c&s
    my @l;
    my $page = 1;
    my $M = [];
    # whether to read into the rest of the page
    # once something same has been found
    my $keen; 
    # if the lines go directory:\nfile\nfile\nfile
    # must see a whole directory of unchanged
    # - changes bump the directory but may then 
    #     have unchanged stuff before more changes
    # < keep going a page or so after stillness
    #   $done > 10 helps too
    my $con;
    until (($done > 10) && (!$keen || !@l)) {
        if (!@l && !($done > 10)) {
            last if $list_done;
            my $C = $list->($page++);
            
            $list_done = 1 if s&done;
            @l = grep {
                if (my $c = $seen.>_.t ) {
                    # containers may dupe if {,/*}
                    #   but then goes mad when sleeping
                    if (0 && _s&container && !cs&container) {
                        sayyl "Swapping c.t For _.t";
                        @$M = grep {$_ ne $c} @$M;
                        1
                    }
                    else {
                        0
                    }
                }
                else {
                    1
                }
            } @{s&z};
            @l || last;
        }
        my $s = shift @l;
        $seen.>s.t && next; # container and not in-@l
        length sc&s || die "Isnt ".ki $s;
        
        # form this one line
        my $C;
        if (ar.form) {
            $C = $s;
            ar.form->($C);
        }
        elsif (ar.forms) {
            my @C = ar.forms->(sc&s);
            $C = G&Ct,\@C;
        }
        
        $con = [] if s&container;
        
        s&pi = $piit if $piit;
        my $c = d.y.tw.>C.t;
        
        my $cha = ki(c.sc) ne ki C.sc;
        
        if ($cha) {
            $done = 0;
            $con && push @$con, $C;
            saybl "Cha: C.t:  ".ki(c.sc)." ne ".ki C.sc;
        }
        elsif (!$con || !@$con) {
            sayyl "Done upon C.t";
            $done++;
        }
        $seen.>C.t = $C;
        push @$M, $C;
    }
    for my $C (@{ds&z}) {
        next if $piit && $piit ne C.sc.pi;
        next if $seen.>C.t;
        next if !-e c&s;
        saybl "Cached C.t";
        push @$M, $C;
    }
    @$M
Exer: | # find bits for the show
    c&s =~ s/\/$//;
    c&s =~ s/\/\//\//g;
    c&do ||= 'l'; # or find
    # to know l goes dir: t, t, t  # so c&s = dir/t
    my $may_containerise = c&do eq 'l';
    if (c&do eq 'l') {
        c&do = 'ls -1ct';
        c&nostderr = 1;
    }
    elsif (c&do eq 'f') {
        c&size = "+0c" if c&nonempty;
        my $size = " -size c&size" if c&size;
        c&do = "find c&s $size";
        c&sindo = 1;
        sayre "Made up Exer: c&do";
    }
    if (my $ups = !A&upsetted++ && 3s&upsetters) {
        # set up watcher sub, J awakes if returns true
        my $cmd = c&do =~ /^ls\b/ ? "c&do c&s" :
            # ls each thing from find to get timestamp/size
            c&do =~ /^find/ ? "c&do -exec ls --full-time -1ct {} \\;"
            : die "Watcher upsetter for c&do?";
        sayyl "Seeing Upsetter Exer: $cmd";
        my $see = &{
            dig ''.`bash -c "$cmd 2>/dev/null"`
        };
        my $before = $see->();
        my $watch = &{
            $see->() ne $before
        };
        push @$ups, $watch;
    }
    my $es = c&sindo ? "" : c&s;
    c&cmd = c&nostderr ? qq[bash -c "c&do $es 2>/dev/null"]
        : "c&do $es";
    
    # search for string
    c&cmd .= "| grep c&grep" if c&grep;
    
    # maybe, with timer to kill?
    #J.mo.J.sizeup = split"\n",''.`c&cmd` if c&sizeup;
    
    c&lim ||= 20 unless c&unl;
    # skip in
    c&cmd .= "| tail --lines=+".(c&se) if c&se ;
    # skip out
    #   further to tell if theres more,
    #    have enough after image filtering?
    c&cmd .= "| head -n ".(c&lim + 4) if c&lim;
    
    # do it
    my @img = split"\n",''.`c&cmd`;
    1 && say "EXE: c&cmd: ".@img;
    
    my $N = [map { {c=>{s=>$_}} } @img];
    # the directory all are within,
    #   would be the c&s up to {,} or *
    my ($know) = $1 if c&s =~ /^([^\{\*]+)(\/.*?|$|.+?)/;
    $know ||= c&s;
    my $l; # last titled directory bunch, for ls -1ct
    # upgrade all to full path c&s
    my $blanks;
    for my $C (@$N) {
        if (!length c&s) {
            C.sc.not = 1;
            $blanks++;
            undef $l;
            next;
        }
        if ($may_containerise && c&s =~ /^($know.*)\/?:$/ && -d $1) {
            $l = $C;
            c&s = $1;
            s&container = 1;
        }
        else {
            next if c&s =~ /^\Q$know\E/; # is full path
            if ($l) {
                -e "lc&s/c&s" || -l "lc&s/c&s" # may be a broken link
                    || die "($know) expected lc&s/c&s    c&s to be in lc&s!";
                c&s = "lc&s/c&s";
            }
            else {
                if (!-e "$know/c&s") {
                    if (c&s =~ /^\Q$know\E\/(.+)/) {
                        die "Have $know and then $1";
                        C.t = $1;
                    }
                    else {
                        die "expected c&s to be in $know!";
                    }
                }
                c&s = "$know/c&s";
            }
        }
    }
    # split $know off c&s to get C.t
    @$N = grep {
        _.t = $1 if _c&s =~ /^\Q$know\E\/?(.+)$/;
        unless (defined _.t) {
            if (_c&s eq $know && _s&container) {
                _.t = ''; # hmm
                sayyl "Gets blank from $know: ".ki $_
            }
            else {
                die "Not in $know: ".ki $_;
            }
        }
        1
    } grep {
        !_.sc.not
    } @$N;
    
    
    
    
    if (c&only eq 'images') {
        @$N = grep {
            _.t =~ /^[\/\w\[\]\{\}\(\)!@%-]+\.jpe?g$/i
        } @$N
    }
    
    # reunlimit until lim is full of satis ^
    if (c&lim && c&lim < @$N) {
        saybl "Returned c&lim < ".($blanks + @$N)." rows, keep reading...";
        #@$N = @{$N}[0..(c&lim-1)]
    }
    elsif (c&lim > @$N + $blanks) {
        saybl "Done! c&s since c&lim vs ".($blanks + @$N);
        s&done = 1
    }
    #_.y.cv ||= 9 for @$N;
    s&dir = $know;
    s&z = $N

