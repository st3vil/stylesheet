rez/thier: | # flat t=(sip|fraction|etc) -> depth, s&bit difference, ordered?
    my @p; # the path
    my $sepr = ar.sep ? qr/\W+/ : '';
    for my $C (sort {a.t cmp b.t} @$z) {
        delete C.y.next;
        delete C.y.in;
        insi: while (@p) {
            my $l = $p[-1];
            # dirs split / and ips split .
            if (C.t =~ /^l.t($sepr)(.*)$/) {
                #sayre "^ l.t  $1 -> $2";
                C.y.parent = $l;
                s&sep = $1 if $1;
                s&bit = $2;
                push @{ls&z||=[]}, $C;
                last insi;
            }
            else {
                pop @p;
            }
        }
        push @p, $C;
    }
    # < order after s&bit separates and know numberology
    grep {!_.y.parent} @$z
ind/sort: | # clone/flatlist with rearrangement
    # only sorts on each s&z
    my $gk = ar.gk || 'bit';
    my $cb = &Cd{
        @{s&z} = sort {
            exists a.sc.>$gk && exists b.sc.>$gk && do {
                a.sc.>$gk =~ /^\d+$/ && b.sc.>$gk =~ /^\d+$/
                ? a.sc.>$gk <=> b.sc.>$gk
                : a.sc.>$gk cmp b.sc.>$gk
            }
        } @{s&z} if s&z;
        $C
    };
    G&ind,$C,$cb,{cbfirst=>1};
Min/bits: | # entre for new life
    # becomes local-est cs
    my $te = defined s&bit ? s&bit : C.t;
    # as depth knower
    my $sc;
    sc.ml = c&ind;
    sc.dis = 1;
    sc.dos = ar.dos if ar.dos;
    if (ar.keep) {
        $sc.>$_ = C.sc.>$_ for split ',', ar.keep;
    }
    
    m C.t=>{C=>$C}=>{depth=>c&ind,s=>$te},$sc
ef/Bs: | # describe callstack, a little
    my @l;
    my $B = ar.B || Gc&B;
    my $S=$B;
    my $i;
    push @l,$B while $B = $i++<10 && B.y.out;
    
    my ($n,$o) = @{ar.m||[]};
    $o && die "more m";
    map { shift @l } 1..$n if $n;
    
    if (ar.t) {
        my @r;
        shift @l until $l[0]->{t} eq ar.t;
        push @r, shift @l while $l[0]->{t} eq ar.t;
        @l = @r;
    }
    
    join"->", reverse map {
        ar.t && ref _c&s ? _c&s.t : _.t;
    } @l;
Origist: | # origin infographics, merge with above
    my @l = my $S = $C;
    push @l, $S while $S = @l < 30 && S.y.C;
    #
    @l = map { $_, _.y.A && G&sn,_.y.A || "noyA" } @l;
    n history=>-od_4=>{dl=>1,s=>\@l}
Diff: | # i<->o c&s
    my @l = map {
        my $f = "/tmp/valiput_Dif_$$".($i eq $_ && "_i" || "_o");
        write_file($f,_c&s||"NOTHING");
        $f
    } $i,$o;
    my $diff = `diff @l`;
    `rm $_` for @l;
    G&give:Budge=>["Diff i.t"=>''=>{s=>$diff}];
    #
cz/M: | # Czech M, check nonempty and all are a certain pi
    my $pi = ar.pi || die "whatnow";
    return if ar.emptyok && !@$M;
    die"Send -$pi, got: ".join("-",map{_s&pi}@$M)."
        ".ki$M 
    unless @$M && @$M == grep{_s&pi eq $pi} @$M;
te/Jpin: | # point through Js beyond $J by t, and maybe the last C
    # similar to Elvising ~ 3
    my @p = ref ar.p ? @{ar.p} : split ';', ar.p;
    my $j = $J;
    my $i = 1;
    my @J; # Js beyond $J
    my $c; # the last C
    my @fi; # debug
    for (@p) {
        js&top || js&Jtv || die "Lost @p    at $_ No top: ".G&aC,$j;
        my $f; # C with s&J
        my $J; # next J
        if (js&top) {
            $f = js&top.y.tw.>$_;
        }
        if ($f && !fs&J && $i < @p) {
            # more to go, look in Jtv, the f was probably thawed?
            undef $f;
        }
        if (!$f && js&Jtv) {
            my $jv = js&Jtv.>$_;
            if (keys %$jv != 1) {
                a&lost_point = $_;
                m "Lost @p at $_, maybe Jv:"=>-od_5=>{s=>[$j,$jv]}
                T.Jpinfail = 1; # enclosing (t/FindOrigin) must handle
                # to return as much as possible:
                return @J;
            }
            ($J) = values %$jv;
        }
        if (!$f && $J) {
            $f = Jc&s; # holds latest mo C
        }
        if ($f && !$J) {
            $J = fs&J;
            if (!$J) {
                if (@p > $i) {
                    m "Lost @p at $_"=>-od_5=>{s=>[@fi,js&top,$j]}
                    return
                }
                elsif (!ar.Clast) {
                    die "last thing in @p was only C: ".ki $f;
                }
                else {
                    # last hop can be C, no J
                }
            }
        }
        $c = $f;
        if ($J) {
            push @fi, "Found ".G&sn,$J ." on ".G&aC,$f;
            push @J, $J;
        }
        elsif (@p > $i) {
            die "Lost @p at $_ with no J on ".G&aC,$f ."   try Cytw not CsJstopytw?"
        }
        $j = $J;
        $i++;
    }
    ar.Clast ? (@J,$c) : @J;
t/CreateOrigin: | # storable J path of CyC+'s origin (-origin's s&location)
    # came from so elvistivity can fade out
    #   and find where to awake on push
    my @os = Rw fe/yCtrail $group=Ao+;
    
    if (@os < 2) {
        n argh=>3=>"Not enough history to find A.2.t's origin",'fs:7,dis,hs:566';
        Rw Origist;
        return;
    }
    @os > 2 && die "Lots of history";
    # first o'ing
    my $os = $os[0];
    # last o
    my $c = $os->[-1];
    my $Y = c.y.A;
    my $J = Y.1;
    
    Rw t/OriJin $J;
    
t/OriJin: | # given J, return path like -origin's s&location
    # is missing the C that we are
    J.3 ne A.3 && die "Origin not in J.t  "
        . G&give:Budge=>["gal"=>''=>{s=>[$J,J.3,"J.3.t vs A.3.t",A.3,C=>$C]}];
    
    my @J = Rw fe/upJs $J;
    A.3 eq shift(@J) || die  "Origin not in J.t";
    
    a&origin_hJ = \@J;
    
    join";",map{_.t} @J;
    
t/FindOrigin: | # later moment, look for our -origin's location, usu in 3
    my $j = A.3;
    js&top || die "3: j.t not ready!";
    
    # < failing with an object in T.Jpinfail
    # < pointing with a -pointer, that can unpack from the s&location
    #   which implies it...
    # < using fe/Nab to choose $path/(w,ways)'s w as the most-original thing
    # < pushing to a different name?
    my $p = [split ';', s&location ];
    push @$p, A.2.t; # < what our thing is called over there?
    
    my @J = Rw te/Jpin $M $J:j $p $Clast=1;
    # know the way in for navigation bar
    a&origin_hJ = \@J if @J;
    # even if it didn't get all the way:
    return if !@J || delete T.Jpinfail;
    my $c = pop @J;
    
    $c
    

