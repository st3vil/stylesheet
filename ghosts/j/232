Topo: | # and - the activity DEST 25
    # Topo - single read/writer
    #   to know more W about Four/Five/etc than you need to
    #   for async G&t lookup and allocation
    #   writable stuff given to it, knows the 1-5 non-git form
    #   W pushed outside of the G must be commit
    
    # Tri - pushing G frontiers of language
    # Typ - molten C edits of stuff in G
    
    this file, rebuild everything hut,
    from om, html, bootstrapping Is through 4s&in, mixing, starting
    so that J Jins J, reelecty hierarchy
    and there are various safety mechanisms
Cluts: | # ore - the matrial
    # land upon body,
    # balance neuron attention
    # into time, around tasks
Ch: | # swim channel, check tv
    G&heading,'Hz:50';
    
    1s&the ||= {};
    # < elvis hook specifically for events on/in a thint
    G&u,['NutIns'];
    G&u,['NutText'];
    S
    
    n loadsave o1 s:<^v> %dis:block
    n surftv -tain s:Fly
pi/tain: | # access the network + chain effects
    G&heading;
    1s&the ||= {};
    1s&ein.says = &acgtsc{
        # c in here is the main point of the point,
        #   it may be below other vaguer intentions,
        #   and above tiny details
        # probably $d = G&E:'hC -1';
        #debugger;
        1s&the[c.t] = s;
    };
    S
    # make editable starting point
    1s&the.W ||= 'Fly';
    n W 3  %e:2
    # show how that goes
    
    
    $n =
    n $1s&the.W V
    $j = ns&J;
    
    !j and return n waits 1 $s:ki(n) %
    $s = js&s;
    !s and return n waits 1 s:waitss %
    
    #delete js&brains;
    #return;
    $tops = ss&lv;
    #tops = [ss&top];
    
    each il tops {
        $l;
        try {
        $l = G&Serialise,l;
        }
        catch (er) { l = "Error: "+er+": "+ki(l) }
        $n =
        n toL 15 $s:l %hue:1$i+9deg,ws:pre,dis:block,ma:1em
        n.y.cv += 0.015 * i;
    }
    
    
    
Who: | # lis, wandering We things
    G&heading;
    G&n,['Name',3,{s:"Fand"},{e:2}];
    
    
Typ: | # exact lounge
    # TO give at a glance a pretty good idea of where you are
    # in the colour code of
    G&heading;
    
        G&u,['MelTest'];
        G&u,['NutText'];
        G&u,['NutLands'];
        
        G&clusp;
        1s&i ||= 0;
        1s&i++;
        G&n,['C',4,{s:'Hererereere'+1s&i},{e:1}];
    ~>3 Ze colour: 1s&i, '>1 one', '>2 two', '>3 three', '>4 four',  '>5 five',  '>6 six', '>7 seven', '>8 eight', '>9 nine'
        
        $te = "steve\t4\t\"Val\"\tEin:4,daw:go,sf:004";
        $N = G&readLines,te;
        each in N {
            $cv = 0.6+i*0.002;
            G&n:['readLines+ki',cv,{s:"Item: "+4s&ki(n)},{dis:'block'}];
            $s = G&toLines,n;
            G&n:['toLines',cv+0.001,{s:"Writ: "+s},{dis:'block'}];
        }
        
    $m = G&n:['M','-jod_7',{s:A,dl:4}];
    #$m = G&n:['overflow:scroll','-jod_7',{s:A,dl:4}];
        
    1c&save = "lo";
    
Tri: | # travel
    G&heading;
    # sends G by setting T they sprout from
    # u t - declare find-and-change thing, usually into being
    #  making an I that matches (finds) and applies change,
    #ys&mb = '30%';
    
    # waddley
    G&u,['NutText'];
    G&clusp;
    
    # navigation/breadcrumb
    # < click to reposition/wake
    # < leave what you didn't interact with
    n other 1 s:Ge %jela:5,dos:SwitchupEl:4msgs:css:overflow:hidden/scroll
    n otheR 11 s:R %jela:5,dos:SwitchupEl:4msgs:css:position:absolute/fixed
    n rm 11 s:rm %jela:5,dos:SwitchupEl:4on:W:leftbehind:slideUp
    
    'Fly Shovel Ch Launch Expect Ventur Revisit Bystand Sevo'
    .split(' ').map(&s{
        n $s 13 $s:s %ma:0.3em,dow:do/Launch
    });
    
    n Sevotic 13 s:Sevotic %ma:0.3em,dow:Sevoticate
    # the name, renamable
    G&n,['Name',3,{s:"Steve"},{e:2}];
    
    1s&ein['C+says'] = 'says:intent:overwrite';
    1s&ein['A+says'] = 'says:intent:expand';
    1s&ein['says'] = {w:'says/Tri'};
    
    
    # where latest ^ gets down
    $src = "$('body > nexpectn')[0].A[1].sc.s.sc.lv[3].sc.z";
    G&n,['Content',4,{s:src},{e:1}];
    
    1s&runput and G&n:['Wheer','-jod_6',{v:1s&runtime,s:1s&runput,dl:4}];
    
    if (1s&M.length) {
        each in 1s&M {
            i == 6 and G&n,['many',5,{s:'...'}]; break
            i = i * 0.001;
            G&n,['ane',4+i,{s:n},{dis:'block'}];
        }
    }
    
says/Tri: | # code is said
    $c = G&E:'hC -1';
    if (c.t == 'Name') {
        # change the name/write in a new place
        # < reset pre-name-change changes to Content, dividing history as:
        #   (thing became as it is), GAP, (changes to thing, renamed to thing2)
        #   with link between...
        
    }
    else
    if (c.t == 'Content') {
        if (cc&s != ec&s) {
            # diff and save
        }
        #debugger;
        $B = Gc&B;
        $was = Bs&way;
        Bs&way = e;
        
        # not finding any way to get line numbers from syntaxerrors in eval
        # TODO maybe jslint/jshint can help diagnosure?
        if (0) {
            $cod = "window.funcifunc = function() {\n"+ec&s+"\n}";
            try { 
            #eval(cod);
            var lu;
            #var lu = $('<script/>')[0]; $(lu).html(cod).appendTo($('head'))[0];
            var ul = Function(ec&s);
            #window.funcifunc;

            }
            catch(e) { var za = e }
            $(lu).remove();
            #debugger;
            $ln = za && za.lineNumber;
            $or = za;
            za and za = za.stack;
            console.log("EVA:",ln, ul, za, or);
        }
        
        $evaler = &s{
            # more of it
            return eval(s);
        };
        
        $r = evaler(ec&s);
        Bs&way = was;
        1s&runput = r;
        1s&runtime ||= 0;
        1s&runtime++;
    }
    ~>3 says/Tri:
    
Sevo: |
    G&heading;
    # anything
    n anything 2 s:anything %fs:300%,blr:3px
Sevoticate: |
    G&e,['Sevo'],['C+click','',{p:'t'}];
    T.ok = 1;
    

