Wormhall: | # over sight
    nodes always send stuff outwards:
        stuff is string, may know the data it came from
        send may be give but prefer linkage
        outwards may be a host, bay/$G/$W, bay/p/G.t/$W
        $W to and $W is sameish...
    
    anyway
    
    show all the fork/listen/addressing action in this file...
Wall: | # your publisher
    # write them
    Jc&write = 1;
    c&route = "Elan";
    if (c&route) {
        # send links to Ilan
        Jc&only = '7';
        Jc&route = c&route;
        # dont route inners
        Jc&Wonly = 1;
    }
    else {
        # write them in Wall
        Jc&tape = 'W';
        Jc&save = 'W';
    }
    # < put Writings, with journaling 
    # also the furthest provider
    # A.5 gives some requests for things/way to it
    # you need local Wall way to use Wall to get more way
    
    Js&ein.t.get.sMJ = &sMJjeTCA{
        G&give:Budge=>["wants to get for ".G&sn => $e];
    };
    Js&ein.t.s.sMJ = &sMJjeTCA{
        G&give:Budge=>["wants to s for ".G&sn => $e];
    };
    # mostly takes what is from this process and externalises it
    Js&ein.t.put.sMJ = &sMJjeTCA{
        # should know about appending queues by its name, eg p/$$/in
        #G&give:Budge=>["wants to put for ".G&sn => $e];
        local A.V = 1;
        if (my $z = 1s&have.>s.t ) {
            sayyl "Updating J.t's s.t: ss&Jo";
            %$z = %$s;
        }
        else {
            sayyl "Setting J.t's s.t: ss&Jo";
            1s&have.>s.t =
            m $s
        }
        #saybl "Nowat: ".G&aC,$_ for @$M;
        
    };
    S
    my $l = Js&Keld = {};
    l.ha.9 = &acgts{
        my $W = C.y.up;
        my $f = Ws&f || die "No fileer! ".ki $W;
        my $t = C.t;
        sayre "Want rm: ".G&aC;
        sayre "  rm $f/$t";
        
    };
    l.ha.5 = &acgts{
        my $W = C.y.up;
        my $f = Ws&f || die "No fileer! ".ki $W;
        
        my $s = c&s;
        my $ha = s&ha;
        my $hf = "h/".$ha;
        my $t = C.t;
        
        `mkdir -p $f/h` if !-d "$f/h";
        write_file("$f/$hf", $s) unless -e "$f/$hf";
        if ($t) {
            `unlink $f/$t` if -e "$f/$t";
            `ln -s h/$ha $f/$t`;
        }
        
        return if Jc&only && Jc&only ne $t;
        return saybl "ignore inner: ".G&aC,$s if Jc&Wonly && s&jay;
        # < set by the T for the Opper...
        #return unless Jc&route;
        # want to elvis with net sense
        my $to = "Opper";
        my $w = Jc&route || "Elan";
        my $sc;
        $sc.>$_ = W.sc.>$_ for grep{!ref W.sc.>$_ } keys %{W.sc};
        if (sc.G eq $to) {
            # originated from us, send it out
            $w = Jc&direct || "Wlan";
        }
        my $s = [$w=>[W=>''=>{f=>$f,t=>$t,ha=>$ha},$sc]];
        sayre "Giving $w: $f/$t: sc.Jo";
        Rw Wudder $to $s;
    };
    _.y.cv = 1 for @{Js&M||[]};
    m $_ for @{Js&M||[]};
    #_c&s = slm 9, _c&s for @$M;
    #_c&s =~ s/\W//g for @$M;
Elan: | # gets them, W switchup
    # & tractor e into a new Udder
    Rw Tiot;
    Jc&tape = 'Dejo' if J.t eq 'Ilan';
    #Jc&save = 'W';
    y.res = 100;
    y.at.left = '60%';
    y.at.top = '70%';
    y.at.ab = 1;
    Js&Simp = 'Sweeptapes';
    Js&Cimp = 'Pause';
    Jc&refit_t = &C{
        "s&so C.t"
    };
    Js&ein.t.plaz.sMJ = &sM{
        # from another self, sends a plaz
        sayre "Sendplaz";
        m $s
    };
    
    # this one
    # < we give a W with c&lv to Net...
    # < clients GET lv unless small,
    # < Beach them
    # < winding back s&parent
    # 
    
    Js&ein.t.W.sMJ = &sMJje{
        # from Wall, crunch to W
        $s = G&hup,$e;
        if (ss&W eq J.t) {
            T.pos = 0;
            return sayre "Self J.t ing" 
        }
        1 && saygr "Input lv? ".G&aC,$s;
        s.t = delete ss&W;
        local A.V = 1;
        if (my $z = 1s&have.>s.t ) {
            sayyl "Updating J.t's s.t: ss&f ss&Jo";
            my $w = G&hup,$z;
            %$z = %$s;
            
        }
        else {
            sayyl "Setting J.t's s.t: ss&f ss&Jo";
            1s&have.>s.t =
            m $s
        }
        1 && saybl "Elan now: ".ki $M;
        1 && saybl "Elan updated: ".ki $e;
    };
    S
    
    Js&Pause && return 
        n Paused=>''=>"Paused"
    
    my $m = Js&M||[];
    @$m = map { @{delete(_c&forum)||[]}, $_ } @$m;
    #sayyl "A.1.t! ".wdump 3, Js&M;
    
    m $_ for @$m;
Wlan: | # gets you, W
    Rw Tiot;
    delete Jc&tape;# = 'Dejo' if J.t eq 'Ilan';
    #Jc&save = 'W';
    y.res = 100;
    y.at.left = '60%';
    y.at.top = '70%';
    y.at.ab = 1;
    Js&Simp = 'Sweeptapes';
    Js&Cimp = 'Pause';
    Jc&refit_t = &C{
        "s&so C.t"
    };
    Js&ein.t.W.sMJ = &sMJje{
        # from Wall, crunch to W
        $s = G&hup,$e;
        if (ss&W eq J.t) {
            T.pos = 0;
            return sayre "Self J.t ing" 
        }
        if (sc&t eq '7') {
            1 && saygr "Output lv? from A.2.t or A.2.2.t:".ki,$s;
            my $el = ss&imp == '1' ? '1' : '3';
            my $l = G&Ct,[ss&W=>''=>{el=>$el,lv=>sc&f}];
            G&e,NetPut=>[out=>''=>{holst=>"yer",eat=>[$l]}]
        }
        else {
            die "How to output: ".ki$s;
        }
    };
    S
    
    Js&Pause && return 
        n Paused=>''=>"Paused"
    
    my $m = Js&M||[];
    @$m = map { @{delete(_c&forum)||[]}, $_ } @$m;
    #sayyl "A.1.t! ".wdump 3, Js&M;
    # come out as they go in, here is just a log
    m $_ for @$m;
BayFishing: | # become Op/Ud node, see 822
    my $p = $$;
    $| = 1; # autoflush output channel
    # Ilan, W tape spool, trusts lvs to join sanely
    # else it y.imp++, replays everything per change
    Gc&tapescontinue = 1;
    
    # mkoJ called by Wout, sends lines with Ilan on Opper
    # Opper Ilan $f elvised by Ualve on Udders
    #     Ilan unifies names/routes points by elvising Win
    G.mkoJ = &Wc{
        c.holst = $W; # geoplace on desk section
        my $Y = Gc&B.sc.A;
        c.Y = $Y; # A coming from
        G&elph,NetPut=>[out=>1=>$c]
    };
    
    A.7.t ||= 'neu';
    
    # $bay passed through
    town: my $to = Rw ElvisYou;
    return sayre "< ElvisYou $p vs $$" unless $p eq $$;
    
    sleep 1;
    
    my $op;
    my $f = "$to/p/Opper";
    sayre "... $f ";
    sleep 1 until -l $f;
    $op = readlink $f;
    saygr "Waiting fr $op $f";
    waitpid($op,0);
    sayyl "Done! $op on $$";
    if (readlink("$f/will") =~ /restart/) {
        sayre "$f wills restart";
        goto town;
    }
    sayre "will restart..?";
    <STDIN>;
    goto town;
NetPut: | # Opper outputs W
    # 
    my $sendz = &z{
        ref $z eq 'ARRAY' || die "Give array to sendz";
        my $in = "Gc&bay/p/WebHost/in";
        -f $in || die "No WebHost?";
        $s = G&Ct,[SomeNetSpot=>[out=>1=>{},{z=>$z}]];
        write_file($in,{append=>1},sjson($s)."\n");
    };
    
    Js&ein.t.out.sMJ = &sMJje{
        my $Y = ec&Y || $A;
        my $z = ec&eat;
        my $h = ec&holst;
        
        1 && saygr "Webbing on G.t into $h, from ".G&sn,$Y ." y ".G&sn,Y.up.up;
        Jc&froe = ec&froe if ec&froe;
        
        Js&initGW ||= do {
            # create a sense of us before what we contain
            my $g = G&Ct,[GW=>1];
            # name to address
            gc&Mid = G.t || die "no G\.t?";
            gc&Wid = "G.c.bay/p/$$";
            # makes ephemeral container:
            gc&el = 2;
            gc&tag = 'ww';
            gs&ab = 100;
            gs&wi = '80%';
            gs&he = '80%';
            gs&ws = 'pre';
            gs&wb = 1;
            gs&poi = 'none';
            gs&ml = '5%';
            # this kind of request should establish all of the above
            $sendz->([$g]);
            $g
        };
        
        # dripfeed time
        my $deal = 0.3 if @$z > 1;
        # convert {C} to [t y c sc]
        # < make Lines (with json data BQ)
        my $elv;$elv = sub {
            my ($C,$d,$la) = @_;

            $C = G&hup,$C;
            my $aC = G&aC;
            C.y = C.y.cv;
            my $space = " ";

            if ($la && $d == 2) {
                if (1 && (C.sc.pi || 
                    $la && (C.y =~ /0\.(\d)/)[0]
                    ne ($la->[1] =~ /0\.(\d)/)[0])) {
                    c&s = "\n".c&s;
                    $space = "*";
                }
            }        
            
            1 && sayyl join("  ",('')x$d).$space.(c&el||"-")." ".$aC;

            my $la;
            C.sc.z = [map{my$l=$elv->($_,$d+1,$la);$la=$l;}@{C.sc.z}] if C.sc.z;
            C.sc.deal ||= $deal if $deal;
            [C.t,C.y,C.c,C.sc]
        };
        my $j = G&Ct,['','',{W=>G.t},{z=>$z}];
        my $l = $elv->($j);
        $sendz->([$l]);
    };
    S
SomeNetSpot: |
    saygr "Netspot! on G.t";
    Js&ein.t.out.sMJ = &sMJje{
        for my $l (@{es&z}) {
            my $s = sjson $l;
            1 && saygr "Begins ".slim 9, $s;
            G.Websen->("$s");
        }
        T.pos = 0;
    };
    S
    T.nose = 2;
Wudder: | # send little C to a G (start W as fork from Udder)
    $s = G&Ct,$s if ref $s eq 'ARRAY';
    my $to = ar.to || "Udder";
    my $bay = ar.bay || Gc&bay;
    if ($bay eq Gc&bay && $to eq G.t) { # subnet and number
        sayyl "Delvisering self: ".ki $s;
        G&elph,$s;
        return;
    }
    my $in = "$bay/p/$to/in";
    sayyl "Writing $in For ".ki $s;
    write_file($in,{append=>1},sjson($s)."\n");

