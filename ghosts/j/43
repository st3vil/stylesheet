Wormhall: | # over sight
    nodes always send stuff outwards:
        stuff is string, may know the data it came from
        send may be give but prefer linkage
        outwards may be a host, bay/$G/$W, bay/p/G.t/$W
        $W to and $W is sameish...
    
    anyway
    
    show all the fork/listen/addressing action in this file...
BayFishing: | # become Op/Ud node, see 822
    my $p = $$;
    $| = 1; # autoflush output channel
    # Ilan, W tape spool, trusts lvs to join sanely
    # else it y.imp++, replays everything per change
    Gc&tapescontinue = 1;
    
    # mkoJ called by Wout, sends lines inc Ilan on Opper
    # Opper Ilan $f elvised by Ualve on Udders
    #     Ilan unifies names/routes points by elvising Win
    G.mkoJ = &Wc{
        c.holst = $W; # geoplace on desk section
        my $Y = Gc&B.sc.A;
        c.Y = $Y; # A coming from
        G&elph,NetPut=>[out=>1=>$c]
    };
    
    town: my $to = Rw ElvisYou;
    return sayre "< ElvisYou $p vs $$" unless $p eq $$;
    
    sleep 1;
    
    my $op;
    my $f = "$to/p/Opper";
    sayre "... $f ";
    sleep 1 until -l $f;
    $op = readlink $f;
    saygr "Waiting fr $op $f";
    waitpid($op,0);
    sayyl "Done! $op on $$";
    if (readlink("$f/will") =~ /restart/) {
        sayre "$f wills restart";
        goto town;
    }
    sayre "will restart..?";
    <STDIN>;
    goto town;
NetPut: | # Opper outputs W
    # 
    my $sendz = &z{
        ref $z eq 'ARRAY' || die "Give array to sendz";
        my $in = "Gc&bay/p/WebHost/in";
        -f $in || die "No WebHost?";
        $s = G&Ct,[SomeNetSpot=>[out=>1=>{},{z=>$z}]];
        write_file($in,{append=>1},sjson($s)."\n");
    };
    
    Js&ein.t.out.sMJ = &sMJje{
        my $Y = ec&Y || $A;
        my $z = ec&eat;
        my $h = ec&holst;
        
        1 && saygr "Webbing on G.t into $h, from ".G&sn,$Y ." y ".G&sn,Y.up.up;
        Jc&froe = ec&froe if ec&froe;
        
        Js&initGW ||= do {
            # create a sense of us before what we contain
            my $g = G&Ct,[GW=>1];
            # name to address
            gc&Mid = G.t || die "no G\.t?";
            gc&Wid = "G.c.bay/p/$$";
            # makes ephemeral container:
            gc&el = 2;
            gc&tag = 'ww';
            gs&ab = 100;
            gs&wi = '80%';
            gs&he = '80%';
            gs&ws = 'pre';
            gs&wb = 1;
            gs&poi = 'none';
            gs&ml = '5%';
            # this kind of request should establish all of the above
            $sendz->([$g]);
            $g
        };
        
        # dripfeed time
        my $deal = 0.3 if @$z > 1;
        # convert {C} to [t y c sc]
        # < make Lines (with json data BQ)
        my $elv;$elv = sub {
            my ($C,$d,$la) = @_;

            $C = G&hup,$C;
            my $aC = G&aC;
            C.y = C.y.cv;
            my $space = " ";

            if ($la && $d == 2) {
                if (1 && (C.sc.pi || 
                    $la && (C.y =~ /0\.(\d)/)[0]
                    ne ($la->[1] =~ /0\.(\d)/)[0])) {
                    c&s = "\n".c&s;
                    $space = "*";
                }
            }
            
            1 && sayyl join("  ",('')x$d).$space.(c&el||"-")." ".$aC;

            my $la;
            C.sc.z = [map{my$l=$elv->($_,$d+1,$la);$la=$l;}@{C.sc.z}] if C.sc.z;
            C.sc.deal ||= $deal if $deal;
            [C.t,C.y,C.c,C.sc]
        };
        my $j = G&Ct,['','',{W=>G.t},{z=>$z}];
        my $l = $elv->($j);
        $sendz->([$l]);
    };
    S
SomeNetSpot: |
    saygr "Netspot! on G.t";
    Js&ein.t.out.sMJ = &sMJje{
        for my $l (@{es&z}) {
            my $s = sjson $l;
            1 && saygr "Begins ".slim 9, $s;
            G.Websen->("$s");
        }
        T.pos = 0;
    };
    S
Wudder: | # start W as fork from Udder
    $s = G&Ct,$s if ref $s eq 'ARRAY';
    my $to = ar.to || "Udder";
    my $bay = ar.bay || Gc&bay;
    my $in = "$bay/p/$to/in";
    sayyl "Writing $in For ".ki $s;
    write_file($in,{append=>1},sjson($s)."\n");

