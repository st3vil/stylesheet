Wormhall: | # over sight
    Bayfishing 52:
        all modes on G being where
    
    Wall:
      nodes always send stuff outwards:
        stuff is string, may know the data it came from
        send may be give  but prefer linkage
        outwards may be a host, bay/$G/$W, bay/p/G.t/$W
        $W to and $W is sameish...
    
    
    
    anyway:
      show all the cluster fork/listen/addressing action in this file...
      "this one"
      < clients GET lv unless small,
      lvs seem to read twice

    onward:
        
        
Wall: | # your publisher - sends to Wlan (local) or Elan (remotes)
    # write them
    Jc&write = 1;
    c&route = "Elan";
    if (c&route) {
        # send links to Ilan
        Jc&only = '7';
        Jc&route = c&route;
        # dont route inners
        Jc&Wonly = 1;
    }
    else {
        # write them in Wall
        Jc&tape = 'W';
        Jc&save = 'W';
    }
    # doesn't route/write
    Jc&mute = c&mute if exists c&mute;
    # array to keep every put
    Jc&entire = c&entire if exists c&entire;
    
    # < put Writings as commits, with journaling 
    # also the furthest provider/resolved table
    # A.5 gives some requests for things/way to it
    # you need local Wall way to use Wall to get more way
    
    Js&ein.t.get.sMJ = &sMJjeTCA{
        G&give:Budge=>["wants to get for ".G&sn => $e];
    };
    Js&ein.t.s.sMJ = &sMJjeTCA{
        G&give:Budge=>["wants to s for ".G&sn => $e];
    };
    # mostly takes what is from this process and externalises it
    Js&ein.t.put.sMJ = &sMJjeTCA{
        # should know about appending queues by its name, eg p/$$/in
        #G&give:Budge=>["wants to put for ".G&sn => $e];
        Jc&entire && push @{Jc&entire}, G&hup,$s;
        if (my $z = 1s&have.>s.t ) {
            #sayyl "Updating J.t's s.t: ss&Jo";
            %$z = %$s;
        }
        else {
            #sayyl "Setting J.t's s.t: ss&Jo";
            1s&have.>s.t =
            m $s
        }
        #saybl "Nowat: ".G&aC,$_ for @$M;
        
    };
    S
    my $l = Js&seld = {};
    l.ha.9 = &acgts{
        my $W = C.y.up;
        my $f = Ws&f || die "No fileer! ".ki $W;
        my $t = C.t;
        die "Want rm: $f/$t ".G&aC;
        
    };
    #c Wall 5 writening, send link to Jc&route/W cons/Elan
    l.ha.5 = &acgts{
        my $W = C.y.up;
        my $f = Ws&f || die "No fileer! ".ki $W;
        return if Jc&mute;
        
        my $s = c&s;
        my $ha = s&ha;
        my $hf = "h/".$ha;
        my $t = C.t;
        
        my $hard = Ws&J && Ws&J.3.c.write_hard_links;
        
        `mkdir -p $f/h` if !-d "$f/h";
        write_file("$f/$hf", $s) unless -e "$f/$hf";
        if ($t) {
            `unlink $f/$t` if -e "$f/$t";
            if ($hard) {
                # needs full path
                `ln $f/h/$ha $f/$t`;
            }
            else {
                # symlink points off the end of link location
                `ln -s h/$ha $f/$t`;
            }
            if ($t eq '7' && Ws&imp && Ws&wil) {
                my $v = $t.'.'.Ws&imp.'.'.Ws&wil;
                if (-l "$f/$v") {
                    my $ca = sayre "Resetting lv linkbunch at $f/$v";
                    #Ws&imp == 1 && Ws&wil == 1
                    #    || die "$ca, nonstart restart";
                    unlink $_ for glob "$f/$t.*.*";
                }
                `ln -s h/$ha $f/$v`;
            }
        }
        
        #1 && saygr "Writung: ".G&aC,$W;
        if (my $J = Ws&J) {
            my $j = J.3;
            1 && saygr "Having j.t tell J.t to be qie jc&quiet ($f/$t)";
            if (my $q = jc&quiet) {
                if ($t eq $q) {
                    Js&output_file = "$f/$t";
                }
                return;
            }
        }
        
        # filter to things we want to send the client
        return if Jc&only && Jc&only ne $t;
        return saybl "ignore inner: ".G&aC,$s if Jc&Wonly && s&jay;
        # make a -pi protocol'd $s that is W to give Wlan/Elan
        #   or further possibilities of the W-ish C
        #   it may have ch, version, lv
        
        # < set by the T for the Opper...
        #return unless Jc&route;
        # want to elvis with net sense
        my $to = "Opper";
        my $w = Jc&route || "Elan";
        my $sc;
        $sc.>$_ = W.sc.>$_ for grep{!ref W.sc.>$_ } keys %{W.sc};
        if ($t eq '7') {
            sc.lv = "$f/h/$ha";
        }
        if (sc.G eq $to) {
            # originated from us, send it out
            $w = Jc&direct || "Wlan";
        }
        my $s = [$w=>[W=>''=>{f=>$f,t=>$t,ha=>$ha},$sc]];
        #sayre "Giving $w: $f/$t: sc.Jo";
        
        Rw Wudder $to $s;
    };
    _.y.cv = 1 for @{Js&M||[]};
    m $_ for @{Js&M||[]};
    #_c&s = slm 9, _c&s for @$M;
    #_c&s =~ s/\W//g for @$M;
Elan: | # gets them, W switchup into a Wlan on the consolidating G (Opper)
    # & tractor e into a new Udder
    Rw Tiot;
    Jc&tape = 'Dejo' if J.t eq 'Ilan';
    Jc&save = 'W';
    y.res = 100;
    y.at.left = '60%';
    y.at.top = '70%';
    y.at.ab = 1;
    Js&Simp = 'Sweeptapes';
    Js&Cimp = 'Pause';
    Jc&refit_t = &C{
        "s&so C.t"
    };
    Js&ein.t.plaz.sMJ = &sM{
        # from another self, sends a plaz
        sayre "Sendplaz";
        m $s
    };
    
    
    
    Js&ein.t.W.sMJ = &sMJje{
        # from Wall, crunch to W
        $s = G&hup,$e;
        if (ss&W eq J.t) {
            T.pos = 0;
            return sayre "Self J.t ing" 
        }
        if (ss&jay) {
            T.pos = 0;
            return sayre "Only ss&G - ss&gd's ss&jay ing" 
        }
        s.t = delete ss&W;
        local A.V = 1;
        my ($z) = grep {_.t eq s.t} @$M;
        if ($z) {
            #sayyl "Updating J.t's s.t: ss&f ss&Jo";
            %$z = %$s;
        }
        else {
            #sayyl "Setting J.t's s.t: ss&f ss&Jo";
            $s =
            m $s
        }
        
        1 && saygr "J.t: sc&t: s.t = ss&gd = ss&Jo".(!$z && " new");
    };
    S
    #my $i = 
    #n there=>-isness=>{}=>"dis:1"
    
    # < moves elements, disables noise & A timers
    #   so they can go back in...
    Js&Pause && return 
        n Paused=>''=>"Paused"
    
    m _.t=>{C=>$_}=>{},{pid=>_s&pid,f=>_s&f,lv=>_c&ha,dos=>'ElviRo'} for @{Js&M||[]};
    
    n say=>01=>"The Gc&bay",'dis'
    #n Episto=>W=>''=>'qz'
ElviRo: | # routing to remote from W mount
    my $j = e&_hJ;
    my $p = e&hC ->[-3];
    #G&give,Toter=>p=>$p;
    my ($p,@nest) = reverse e&_hC;
    @nest && die "Handle nesting W: ".ki@nest;
    
    1 && sayyl "ElvisRo: ".G&aC,p.y.C.y.C.y.C;
    
    my $us = e.c.us;
    # Elan/ItsMount
    shift @{us.p} for qw'Elan ItsHolder';
    # Itself
    unshift @{us.p}, [p.t];
    # routefresh
    delete us.p_i;
    delete us.W;
    if ( ps&poe ) {
        1 && sayre "Leaving J.t alone?";
        return T.pos = '';
    }
    
    my $mes = G&Ct,[jse=>''=>{s=>$us}];
    G&elph,Elvis=>[opt=>''=>{s=>"ps&pid:Win",etc=>{e=>$mes}}];
    #G&give,Toter=>breka=>[[$us,$p]];
Wlan: | # gets you, W
    Rw Tiot;
    delete Jc&tape;# = 'Dejo' if J.t eq 'Ilan';
    #Jc&save = 'W';
    y.res = 100;
    y.at.left = '60%';
    y.at.top = '70%';
    y.at.ab = 1;
    Js&Simp = 'Sweeptapes';
    Js&Cimp = 'Pause';
    Jc&refit_t = &C{
        "s&so C.t"
    };
    
    Js&ein.t.W.sMJ = &sMJje{
        # from Wall, crunch to W
        $s = G&hup,$e;
        my $t = ss&W;
        if ($t eq J.t) {
            T.pos = 0;
            return sayre "Self J.t ing" 
        }
        my $el = 1s&have.>$t ? '3' : '1';
        1s&have.>$t = 1;
        1 && saygr "J.t: sc&t: $t = ss&gd = ss&Jo".($el eq '1' && " new");
        if (sc&t eq '7') {
            # c&lv nots this C, s&lv els it then oms a c&lv/their om inside itself
            my $l = G&Ct,[$t=>''=>{el=>$el,lv=>sc&ha},{f=>ss&f}];
            G&e,NetPut=>[out=>''=>{holst=>"yer",eat=>[$l]}]
        }
        else {
            die "How to output: ".ki$s;
        }
    };
    
    S
    
NetPut: | # Opper outputs W to G:WebHost
    # 
    my $sendz = &z{
        ref $z eq 'ARRAY' || die "Give array to sendz";
        my $in = "Gc&bay/p/WebHost/in";
        -f $in || die "No WebHost?";
        $s = G&Ct,[SomeNetSpot=>[out=>1=>{},{z=>$z}]];
        write_file($in,{append=>1},sjson($s)."\n");
    };
    
    Js&ein.t.out.sMJ = &sMJje{
        my $Y = ec&Y || $A;
        my $z = ec&eat;
        my $h = ec&holst;
        
        my $see = @$z == 1 ? $z->[0] : $z;
        1 && saygr "J.t: Gc&bay/G.t: ".ki $see;
        Jc&froe = ec&froe if ec&froe;
        
        Js&initGW ||= do {
            # create a sense of us before what we contain
            my $g = G&Ct,[GW=>1];
            # name to address
            gc&Mid = G.t || die "no G\.t?";
            gc&Wid = "G.c.bay/p/$$";
            # makes ephemeral container:
            gc&el = 2;
            gc&tag = 'ww';
            gs&ab = 100;
            gs&wi = '80%';
            gs&he = '80%';
            gs&ws = 'pre';
            gs&wb = 1;
            gs&poi = 'none';
            gs&ml = '5%';
            # this kind of request should establish all of the above
            $sendz->([$g]);
            $g
        };
        
        # dripfeed time
        my $deal = 0.3 if @$z > 1;
        # convert {C} to [t y c sc]
        # < make Lines (with json data BQ)
        my $elv;$elv = sub {
            my ($C,$d,$la) = @_;

            $C = G&hup,$C;
            my $aC = G&aC;
            C.y = C.y.cv;
            my $space = " ";

            if ($la && $d == 2) {
                if (1 && (C.sc.pi || 
                    $la && (C.y =~ /0\.(\d)/)[0]
                    ne ($la->[1] =~ /0\.(\d)/)[0])) {
                    c&s = "\n".c&s;
                    $space = "*";
                }
            }        
            
            1 && sayyl join("  ",('')x$d).$space.(c&el||"-")." ".$aC;

            my $la;
            C.sc.z = [map{my$l=$elv->($_,$d+1,$la);$la=$l;}@{C.sc.z}] if C.sc.z;
            C.sc.deal ||= $deal if $deal;
            [C.t,C.y,C.c,C.sc]
        };
        my $j = G&Ct,[G.t,'',{W=>G.t},{z=>$z}];
        my $l = $elv->($j);
        $sendz->([$l]);
    };
    S
SomeNetSpot: | # G:WebHost sends lines
    saygr "Netspot! on G.t";
    Js&ein.t.out.sMJ = &sMJje{
        for my $l (@{es&z}) {
            my $s = sjson $l;
            1 && saygr "Begins ".slim 9, $s;
            G.Websen->("$s");
        }
        T.pos = 0;
    };
    S
    T.nose = 2;

