Int: | # numbers in the colloqial sense
    # picking fruits in tv/in/z structure
    n FactorEase
    
    # T sense/transport of anomaly
    n Knowing
    
    # our science was, via T
    n Belive
    
    # when/where to flick/shade attributes (c/sc.*)
    n Scuttle
    
    # quick looks at C
    n TruPic
    
    # J holding something helpers
    n Jold
    
    # leak talks
    n Tal
FactorEase: | # arty maps
    u i
    # lots shall use ind or o underneath
    # search last mo things top
    op:
        my $Wr = T.op || die "No Top to op";
        my $ub = !$s ? sub {
            my ($D,$d) = @_;
            $D if d.d == 2;
        } : do {
            my $C;
            C.t = 'oping';
            s&t = $s || die "No t to op";
            Rw conot $C;
            sub {
                my ($D,$d) = @_;
                $D if G&ip,s&ip,$D;
            }
        };
        my @ma = G&ind,$Wr,$ub,{noind=>1};
        @ma
Knowing: | # T overalls leak freaks
    # stuff on T has to be understood at the end of each Ting
    # and/or errors erupt from it
    # at Matuio for art mixation, for joining, suggesting pinables
    # T helps fork recipes
Belive: | # hoisting, desire
    # see Sleep/Ghoster for actuative end
    u i
    # G&has hoists meta notes
    # < send them through universal index builduppers
    
    # background processes to being a network of gentle things
    # for desire to cause Jing through osc
    #     the Jmo desire object (45-6)
    # Js out-of-band what-went-into-it (way used)
    #    becomes $W/5 and potentially a $ch=$ch-ghost
    #    comes from G&has,qua=>val -> T.has.qua.val
    #    which should be gathered at osc for the grounds done
    #      if ground is splitting up inside a J it could have to be ground-sunc
    #      so pieces can sleep and reemit the non-content content
    # is a kind of Scuttle, into 9s&xo (which doesn't appear)
    #   or some other 9s&, also to appear in 5
    
    # connect a value to the vortexey hoist
    # for credits that pool up to the top level
    # want to be strung into roots, vaguing out
    # needs corner bit in multiv to merge other than sum
    # to allow G triggers
    has: %acgt:1
        @Me || die "Nothing to have";
        my $Y = $A;
        if (ref $Me[0]) {
            my $move = shift @Me;
            $move = [$$move] if ref $move eq 'SCALAR';
            for (@$move) {
                $Y = $Y.>$_ || die "No move: @$move (at $_) from ".ki $Y;
            }
        }
        my $v = @Me == 1 ? 1 : pop @Me;
        my $T = Y.c.T;
        my $S = T.has ||= {};
        my $last = pop @Me;
        $S = $S.>$_ ||= {} for @Me;
        return $S.>$last += $v if $v eq '1';
        $S.>$last = $v;
    
Scuttle: | # when/where/what of c/sc change
    # index of propagation motifs otherwise losably embedded in machinery
    # instructs the FishBrain to:
    #  - shade c
    #  - find sJ's s sJo
    
    # c&code -> c&coded
TruPic: | # descript
    u i
    # describe a C's surface
    # < make accentuatable
    aC: %acgt:s dt
        $s ||= $C;
        my $yk = join ' ',sort grep{$_ ne 'cv'} keys %{s.y};
        my $ck = join ' ',sort keys %{s.c};
        my $sk = join ' ',sort keys %{s.sc};
        return [s.t,s.y.cv,$yk,$ck,$sk] if $dt eq 'Ck5';
        "s.t s.y.cv ".($yk ? "($yk)" : " - ")
            ." $ck".($sk && " % $sk");
    
    # stringify M, talking about scs
    sscC: %acgt:M
        join "\n", map {
            my $in = _c&inds;
            my $sc = _.sc;
            my $ha = (keys %$sc && "\n").join "\n", map {
                my $v = $sc.>$_;
                $v = ki $v if ref $v;
                "$in  $_:".($v !~ /\n/ ? " $v"
                    : "\n".join "\n", map { "$in    $_" }
                    split /\n/, $v);
            } grep { $_ ne 'z' && $_ ne 'strung'
                && !(sc.strung && sc.strung.>$_ ) } sort keys %$sc;

            sprintf "%-20s %-30s", $in . _c&s , $ha
        } @$M;
Jold: | # for J universal handling FactorEase
    u i
    dedu:
        my $x = A.1.sc.>$s ||= {};
        G&pint,$x,@Me && return T.pos = 0;
        G&punt,$x,@Me,1;
        1
    # andor sanity/scheme checks
    musb:
        for (@Me) {
            if ($s eq 'W') {
                _.3 eq $_ || die "Wants W not: ".ki$_
            }
            else {
                die "how else? $s"
            }
        }
Tal: | # displayings
    u i
    say: %nobasay
        $s eq 'saygr' ? saygr(@Me) :
        $s eq 'sayyl' ? sayyl(@Me) :
        $s eq 'saybl' ? saybl(@Me) :
        $s eq 'sayre' ? sayre(@Me) :
        $s eq 'say' ? say(@Me) :
        die "New kinda talk: $s\n".wdump 2, \@Me;
        
Quant: | # FactorEase
    u i
    # matches a C for having only t and cs (etc)
    q: %acgt:s q
        my ($mode) = $q =~ s/^(o)//;
        my ($t) = $q =~ s/^(\?)//;
        my ($y) = $q =~ s/^(\.)//;
        my ($c) = $q =~ s/^c((?:\w+\,?)+)//;
        my ($sc) = $q =~ s/^ s((?:\w+\,?)+)//;
        ($c,$sc) = map { [split ',',$_] } ($c,$sc);
        if ($mode eq 'o') {
            if ($t eq '?') {
                exists s.t || return;
                set.t = s.t;
            }
            !keys %{s.y} || return if $y eq '.';
            !keys %{s.c} || return if !@$c;
            if (@$c) {
                keys %{s.c} == @$c || return;
                exists s.c.>$_ || return for @$c;
            }
            !keys %{s.sc} || return if !@$sc;
        }
        1

