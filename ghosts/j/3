
Jigdoer: | # bootstrap a G from W
    Jc&tape = 'Dejo';
    Js&ein.bo = 'Doable';
    A.6.t = 'via';
    G.c.bay = 'bay';
    
    my $eh = hitime();
    
    # slurp these stored W for composing normal
    my @set = map {
        my $f = G&Locate_read,$_;
        $f .= "/1";
        -f $f || die "NO such $_ ($f ?)";
        $f
    } qw'Atool Placement Sequencing Intel ForJ';
    
    # make $Believe->($N) able
    my @suub = map {
        my ($t,$args) = @$_;
        my $s = G.way.>$t || die "No $t";
        my $C = G&Ct,[$t=>1=>{s=>$s},{args=>$args,of=>'w'}];
        G&perlcode,$C;
        'my $'.$t.' = '.c&s;
    } [Beach=>'s,f'],[Believe=>'N'];
    
    my $bab = &s{
        my $C = G&Ct,["someba"=>1=>{s=>$s}];
        G&CoBabbler;
        C.c.s
    };
    
    my @inc = ('G');
    my $perl = join "\n\n",
        G.way.strictwarn,
        'use FindBin qw($Bin);',
        'use lib "$Bin/othlia";',
        'use lib "$Bin/slib";',
        (map{"use $_;"}@inc),
        'my ($A,$C,$G,$T);',
        @suub,
        'my @f = ('.join(",",map{"'$_'"}@set).');',
        $bab->(<<'');
            saygr 'Some more';
            my $N = [map{ @{ $Beach->('',$_) } }@f];
            my $A = $Believe->($N);
            G.c.mas = sub {
                my ($A,$C,$G,$T,$s) = @_;
                1 && saygr "Es: $s";
            };
            A.t = 'toplevel';
            G.h = A.i.h || die "No h";
            G.i.t = A.i.t || die "No t";
            G.c.bay = 'bay';
            1 && sayre "Ontop";
            
            my @ha =  G&Aup;
            $A = G&A,'twanga';
            push @ha,  G&Aup;
            1 && sayyl wdump 3, [Thes=>@ha]
    
    my $f = "stylehouse\.pl";
    write_file $f, $perl;
    `chmod +x $f`;
    sayre "Done";
    exit;
