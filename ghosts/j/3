Stylehousing: | # org Karamean new stuff
    # new t, old G.way
    n Zequines
    
Jigdoer: | # 0 bootstrap a G from W
    Jc&tape = 'Dejo';
    Js&ein.bo = 'Doable';
    A.6.t = 'vil';
    A.5.t = 'via';
    G.c.bay = 'bay';
    # < get traceably these things its adding...
    
    my $eh = hitime();
    
    # slurp these stored W for composing normal
    my @W = grep {$_} map { /^n (\w+) */ }
        split "\n", G.way.LeMachine;
    my @set = map {
        my $f = G&Locate_read,$_;
        $f .= "/1";
        -f $f || die "NO such $_ ($f ?)";
        $f
    } @W;
    
    # make $Believe->($N) able
    my @suub = map {
        my ($t,$args) = @$_;
        my $s = G.way.>$t || die "No $t";
        my $C = G&Ct,[$t=>1=>{s=>$s},{args=>$args,of=>'w'}];
        G&perlcode,$C;
        'my $'.$t.' = '.c&s;
    } [Beach=>'s,f'],[Believe=>'N'];
    
    my $bab = &s{
        my $C = G&Ct,["someba"=>1=>{s=>$s}];
        G&CoBabbler;
        C.c.s
    };
    
    my @inc = ('G');
    my $perl = join "\n\n",
        G.way.strictwarn,
        'use FindBin qw($Bin);',
        'use lib "$Bin/othlia";',
        'use lib "$Bin/slib";',
        (map{"use $_;"}@inc),
        'my ($A,$C,$G,$T);',
        @suub,
        'my @f = ('.join(",",map{"\n    '$_'"}@set)."\n);",
        $bab->(G.way.Begin);
    
    my $f = "stylehouse\.pl";
    write_file $f, $perl;
    `chmod +x $f`;
    sayre "Done";
    exit;
Begin: | # 0 stylehouse.pl starts Aing somehow, by Jigdoer
    saygr 'Some more';
    my $N = [map{ @{ $Beach->('',$_) } }@f];
    my $A = $Believe->($N);
    A.t = 'toplevel';
    G.h = A.i.h || die "No h";
    G.w = A.i.w || die "No w";
    G.i.t = A.i.t || die "No t";
    G.ii = A.ii;
    A&C = $C = G&Ct,['topCevel'=>1];
    A&T = $T = {};
    G&Gee; # gives G.way, going
    
    1 && sayre "Ontop";
    $A = G&A,'begin';
    
    my $ar = {};
    Rw Beginning;
    
    1 && saybl "ende.";
Beginning: | # 0 stylehouse.pl's first way
    1 && saybl "In the beginning";
    { # test I
        my $t = G&t,i=>'t';
        $t && ts&args eq 'A,C,G,T,s,t,c' || die "t t fail: ".ki$t;
    }
    # stacktrace
    A.V = 1;
    Rw Bangular;
    G.c.mas = sub {
        my ($A,$C,$G,$T,$s) = @_;
        1 && saygr "Es: $s";
    } if 0;
    
    # should base all G gk here-ish
    G.c.bay = 'bay';
    # these are really J, the particle
    # which is what happens when A gets put somewhere
    my $i = $A = G&A,'House';
    my $o = $A = G&A,'Motor';
    # coming from each other
    i.1 = i.3 = i.5 = o.5 = o.2 = $i;
    o.1 = o.3 = o.4 = i.4 = i.2 = $o;
    my $one = 0.1;
    4s&Jtv.>_.t.>$one = $_ for $i,$o;
    # 5/House forms Normal, from its I
    # which stylehouse.pl Beaches
    G.ydrop = 1;
    A.V = 1;
    #*main::h = G.h;
    die "siomewhee?!";
    return;
    
    n House
    # 4/Motor uses House and has moments
    
    
    
    # 4/Os spawns haps
    
    
    
    
    #n Lize
    
Bangular: |
    my $end;
    $SIG{__WARN__} = &{
        my ($s) = @_;
        return if $s =~ /Deep recursion on (anonymous )?subroutine/
            || $s =~ /masks earlier declaration in same/;
        $end->($s);
        warn "Warndg: $s";
    };
    my $lastts;
    $SIG{__DIE__} = $end = &s{
        return if $lastts >  hitime() - 1;
        sayre "SIGDIE began: $s";
        $lastts =  hitime();
        $s && $@ && sayre "stackend with \$@ and arg0";
        $s ||= $@;
        $s ||= do { saygr "\$@ was blank"; $_[0] };
        local $@;
        eval { G::confess( 'yab' ) };
        my @stack = split m/\n/, $@;
        
        shift @stack for 1,2; # this sub and that eval ^
        if (0 || $stack[-1] =~ /^\s+Mojo::IOLoop::start/) {
            pop @stack until $stack[-1] !~ /Mojo|eval/;
        }
        
        @stack = map{
            my $l = {y=>{}};
            ls&dataline = $1 if s/, <DATA> line (\d+)\.\n?$//s;
            
            lc&s = $_ unless
                /^\s*(?:eval \{\.\.\.\} |([^\(\s]+)::([^\s\(]+?)\((.+)\) )called at (\S+|\(eval \S+\)) line (\d+)$/;
            ls&pack = $1 if $1; # usu main, undef for eval{}
            ls&sub = $2 if $2; # usu __ANON__, "
            ls&Mes = $3 if $3; # stringified @_
            ls&file = $4 if $4; # usu (eval \d+) or stylehouse.pl
            ls&line = $5 if $5; # in the code above this call
            $l
        } @stack;
        my $B = Gc&B;
        Bs&stack = \@stack;
        
        Bs&callers = [map{ [caller($_)] }0..4];
    };
    sayre "Bangular loaded";
Bangilate: |
    my $D = Bs&D;
    
    # T.h figured it safe from below
    Bs&hand && return;
    
    # bang polished, pass out
    Bs&foot && return $ba;
    my $na = {};
    my $Bs = {%{B.sc},%{B.c}};
    Bs.G = $G;
    Bs.T = $T;
    Bs.Dw = D.y.argumented if D.y.argumented;
    each gk,v $Bs {
        next unless $gk =~ /^..?$/;
        my $r = "$v";
        $na.>$r = "$gk";
    }
    my $i = 1;
    for my $v (@{Bs&Me||[]}) {
        my $r = "$v";
        $na.>$r = "arg".$i++;
    }
    my $st = Bs&stack;
    for my $t (@$st) {
        t.t = delete ts&file;
        t.t = 'h' if t.t eq Bs&hs_file;
        ts&Mes =~ s/\Q$_\E/$na.>$_/ for keys %$na;
    }
    1  && say "Eat ".wdump 4, $na;
    saybl " _.t -  _s&line: _s&Mes" for @$st;
    
    saybl q[
        Rw Fal;
    ];
    
    # some eval number
    # near the beginning of that should be our h call
    
        my @Bs = my $BB = $B;
        push @Bs, $BB = BB.y.out while $BB;
        for my $B (@Bs) {
            saybl " - ".G&aC,$B;
            if (my $s = Bc&s) {
                sayyl "   s=".G&aC,$s;
            
            }
            saygr "      sMe/args: @{Bs&Me}" if Bs&Me;
        }
        
                # tell aboves we did this
                my $S = $B;
                my @B;
                while ($S && !Sc&h) {
                    unshift @B, $S;
                    Ss&foot = $B;
                    $S = S.y.out;
                }
                
                Bc&h && die "< Have the handler to $ba things.";
                
                
                my $d = delete(T.bangC) || $D;
                1 && saybl "Got code from d.t";
                my $code = dc&s;
                
                my @tri;
                (my $clear = $ba) =~ s/, <DATA> line \d+\.//;
                if ($D && $clear =~ /.+ line (\d+)/g) {
                    my $line = $1;
                    my @s = split "\n", $code;
                    my ($for,$aft) = (5,3);
                    @tri = ([]); # split into three
                    my $i = 1;
                    for (@s) {
                        $i eq $line && push @tri, [];
                        $i > $line - $for && $i < $line + $aft
                            && push @{$tri[-1]}, $_;
                        $i eq $line && push @tri, [];
                        $i++;
                    }
                    @tri = map {join "\n", @$_ } @tri
                }
                
                my $la = {};
                my @Bs;
                for (@B) {
                    my @s = "_.t _.y.cv _s&D.t";
                    next if $s[0] eq 'i 0.1 h';
                    # notice particle hops
                    my $Y = _s&A;
                    if (Y.1 ne la.A.1) {
                        push @s, G&sn,$Y;
                        la.A = $Y;
                    }
                    # fold of=i 0.1 in same A, etc.
                    if (my $L = @s == 1 && $Bs[-1]) {
                        my ($Lt,$st) = map { /(\S+ \S+)/ } $L->[0],$s[0];
                        if ($Lt eq $st) {
                            $L->[0] .= ", _s&D.t";
                            next;
                        }
                    }
                    push @Bs,\@s;
                    # < the one line it came through in D?...
                }
                my $ind = '';
                my $Bs = join "\n", map {$_=$ind.$_;$ind.='  ';$_}
                    map{join'  ',@$_} @Bs;
                
                my $code = join "\n>>>>>>>>>>\n", @tri if @tri;
                
                $ba = join "\n\n", grep {defined} $Bs, $code, $ba;
                
                # die...\n keeps first line number
                return $ba."\n";
House: | # sheets of mind you want handy
    my $laC;
    my $fiC;
    my $ii = G.ii; # stylehouse.pl Beaches
    for my $k (sort keys %$ii) {
        $in ||= my $C = $ii.>$k;
        if ($laC) {
            laC.y.next = $D;
            C.y.prev = $la;
        }
        $laC = $C;
    }
    # < Normal pin-able so what it was becomes the base
    my $u = G&Ct,[Normal=>1=>'Steve'];
    # ylinks so it can c&base a new u
    u.y.in = $fiC;
    u.y.tw = $ii;
    us&ii = $ii;
    us&i.>_.t = _c&code for grep {_c&code} values %{ii.i.y.tw};
    5c&normal = $u;
    
    # puts it as of:W, remixes it if needed
    my $c;
    # c.plus
    u TheU
    
TheU: | # posit our 4.ii as normal (theu), share as W
    # host
    my $u = 5c&normal;
    saygr wdump 4, $u;
    if (5c&plus) {
        n Normal=>W=>{base=>$u,plus=>5c&plus};
        $u = T.op;
    }
    n theu=>1=>{s=>$u},'%of:W'
    n normal=>1=>{s=>$u},'%of:W'
Zequines: | # 1 things from the network
    # ja
    n DAy
    n ThWay
DAy: | # world primitives
    u i
    # sympathetic to design some stuff
    #c ge, see 64 got
    # hidey machine thats giving you things
    Gee:
        # make G.way.$pin retrieve code
        # going once G&t does all readins
        {
            package Wormhole;
            use G;
            use Tie::Hash;
            our @ISA = qw(Tie::ExtraHash);
            sub TIEHASH {
                my $class = shift;
                my %o;
                %o = (%o, %{$_}) for @_;
                return bless [{},\%o], $class;
            }
            sub STORE {
                my ($e,$k,$v) = @_;
                my ($s,$o,@o) = @$e;
                die "Storign o: $v" if $k eq 'o';
                if (o.nonyam) {
                    o.dige->{$k} = slm 12, dig $v unless ref $v;
                }
                $s->{$k} = $v;
            }
            sub FETCH {
                my ($e,$k,$v) = @_;
                my ($s,$o,@o) = @$e;
                return $o if $k eq 'o';
                $s->{$k} || STORE($e,$k, do {
                    my $il = join('/', grep{defined} o.dir, $k);
                    my $f = o.base.'/'.$il;
                    if (-d $f) {
                        my %Di;
                        tie %Di, 'Wormhole', $o, {dir=>$il};
                        \%Di;
                    }
                    elsif (-f $f) {
                        o.nonyam ?
                        scalar read_file($f)
                        :
                        LoadFile($f);
                    }
                    else {
                        warn "Wormhole sens nothing: $f";
                        undef
                    }
                });
            }
        }
        my %way;
        tie %way,'Wormhole',{base=>'w/way'},{nonyam=>1};
        G.way = \%way;
        $G
    
    #c te args (i,(ii),W,w) $t $t...
    # find local(ish) things
    # looking up the slope/trail of con centers A.1..5...
    #  ii/We things by default
    #  W and w know how to look in Gspaces for names,
    #  they may also be in ii.w but are too wide to load up
    # i stuff is subs, ii stuff is classes
    # you might also be only after 5uperficia, not the code itself
    # gently pulls in remote resources... if that A takes charge
    
    # only used by throat, possibly osc
    
    # G&t,I=>$of      # for an A.ii.$of/We thing
    #                    bunch of steps for throat
    # G&t,i=>$sub     # for an A.i.$sub/G&$sub
    # ^^ should be compiled nearby
    # G&t,w=>$w     # for a way
    # ^ vaugely nearby
    # G&t,W=>$W        # for a W
    
    # maybe:
    # G&t,'>'=>$W     # for where you can write a W
    # W would want to find themselves then write themselves...
    # < W come up knowing the next gd/staging area
    # < you might want some historic view of it...
    t: %acgt:s t c
        ($s,$t) = ('I',$s) if !$t;
        $t = t.t if ref $t eq 'HASH';
        $C = {t=>$t,y=>{},c=>($c||{})};
        $s = 'ii' if $s eq 'I'; # going
        c&on = $s; # i/ii/w/W
        if ($s eq 'i' || $s eq 'w' || $s eq 'W') {
            (c&on,c&andon) = ('ii',$s);
        }
        c&max ||= 5;
        c&min ||= 0;
        for my $i (c&min .. c&max) {
            my $Y = ($i == 0 ? $A : $A.>$i) || next;
            my $on = $Y.>c&on || next;
            # on = ii, +$t to We thing, what I wants
            if (c&andon) {
                # want We thing's things
                # put us on ii.W.y.tw
                $on = $on.>c&andon;
                $on = on.y.tw;
            }
            
            my $t = $on.>C.t;
            if (my $by = !$t && Ys&tby) {
                my $A = $Y;
                $t = G&$by,$s,$t;
            }
            $t || next;
            c&from = $Y;
            c&inet = $i;
            return $t;
            # t may be just a pointer, to negotiate with c&desire
        }
        return
    
    # an extension to this A's G&t capacity
    # < search path for w/W
    # < G&has linking resource to moment of use (G&w does)
    byt: %acgt:s t
        if ($s eq 'W') {
            my $f = G&Locate_read,$t;
            G&Ct,[$t=>1=>{resume=>$f}];
        }
        elsif ($s eq 'w') {
            # going, hash tied to a directory
            # makes digest when way entered
            (my $fi = $s) =~ s/\W/-/g;
            my $w = {t=>$s,y=>{}};
            wc&s = G.way->{$fi} || die "No way: $fi";
            ws&dige = G.way.o.dige->{$fi}
                || die "Not Gway not diges $fi: wayo: ".ki G.way.o;
            ws&of = 'w';
            $w
        }
        else {
            die "Unknown search $s $t";
        }
    
    # deprecated
    # look for thing named $s in We thing named $of, on A net
    wup:
        G&t,w=>$s
    Wup:
        G&t,W=>$s
    
    #c ha make call, in i
    # looks up to 5 many rare/little subs
    # s is code or i t
    # Me precompiled args
    # contexts calls, kinds of frame:
    # B lexical cell joinery
    # D cell itself, T.D is of A throat
    # < T.h is an error handler
    h:
        my $y; # code
        my $D; # C about code
        if (ref $s eq 'CODE') {
            $y = $s;
            if (my $d = T.D) {
                # passed code, happens to be T.D
                $D = $d if dc&code && dc&code eq $y;
            }
        }
        elsif (!ref $s && A.i && A.i.>$s) {
            $y = A.i.>$s;
            if (my $i = A.ii && A.ii.i) {
                $D = i.y.tw.>$s;
            }
        }
        elsif (ref $s eq 'HASH' && ref s.c eq 'HASH' && ref sc&code eq 'CODE') {
            $y = sc&code;
            $D = $s;
        }
        else {
            # must be string i name or C for t lookup
            my $C = !ref $s ? {t=>$s,y=>{},c=>{}} : G&s,$s;
            c&on = 'i';
            $y = G.i.t->($A,$C,$G,$T,$C);
            $y || die "t Look fail: ".G&sn ."\n    ".ki $C;
            my $Y = c&from;
            if (my $i = Y.ii && Y.ii.>c&on ) {
                $D = i.y.tw.>$s;
            }
        };
        $y || die "no h: $s";
        
        my $uB = Gc&B || {t=>'nowhere',sc=>{A=>A.up}};
        my $B = {t=>Ds&of||"?",y=>{cv=>D.y.cv||''}};
        B.y.out = $uB;
        if (my $p = uB.y.in) {
            # pevious B-level call inside the uB call
            p.y.next = $B;
            B.y.prev = $p;
        }
        else {
            uB.y.in = $B;
        }
        Bs&y = $y;
        Bs&D = $D if $D;
        Bc&s = $s;
        Bc&h = delete T.h if T.h;
        Bs&A = $A;
        Bs&C = $C;
        Bs&Me = \@Me;
        Gc&B = $B;
        Gc&mas && Gc&mas->($A,$C,$G,$T," h B.t D.t");
        ref $y eq 'CODE' || ref \$y eq 'GLOB' || die "B.t not code: ($s) ".G&sn ."  $y ref:"
            .ref($y)."\n   refref".ref(\$y)."\n   ".ki($y)."\n   ".ki $D;
        
        my @r;
        if (wantarray || !Ds&raysens) {
            @r = eval { $DB::single = G.ydrop; $y->($A,$C,$G,$T,@Me) };
        }
        else {
            $r[0] = eval { $DB::single = G.ydrop; $y->($A,$C,$G,$T,@Me) };
        }
        Gc&mas && Gc&mas->($A,$C,$G,$T,"<h B.t D.t");
        Gc&B = $uB;
        
        # sum h
        if ($@) {
            (my$ba,$@) = ($@,'');
            # stack syncy to know what G&h's eval number is
            Bs&hs_file = (caller(0))[1];
            my $s = Rw Bangilate $ba $B;
            die $s if $s;
        }
        wantarray ? @r : $r[0];
    
    
    
    
ThWay: | # meaning of word/contenter
    u i
    # compiles for given args
    w:
        my $ar = {};
        # their $ar (+)
        $ar = shift @Me if ref $Me[0];
        # their args
        my @o = @Me;
        while (@Me) {
            my $k = shift @Me;
            @Me || die "w odd hash after $k: ".ki\@o;
            my $v = shift @Me;
            $ar.>$k = $v;
        }
        ar.__D && die "w __D deprecated: ".ki$ar;
        my $nar;
        # use this w call's ACGT
        # replaced once our A finds code, before its h'd
        $nar.>$_ = delete $ar.>$_ for grep {exists $ar.>$_ } qw'A C G T';
        my @args = sort keys %$ar;
        my $args = join',','A,C,G,T,ar',@args;
        
        # look in of=w up the network to 5
        # they are pins near network of knowledge via T
        my $w = G&wup,$s;
        
        # or the old way,
        if (!$w) {
            # going, hash tied to a directory
            # makes digest when way entered
            (my $fi = $s) =~ s/\W/-/g;
            $w = {t=>$s};
            wc&s = G.way->{$fi} || die "No way: $fi";
            ws&dige = G.way.o.dige->{$fi}
                || die "Not Gway not diges $fi: wayo: ".ki G.way.o;
            ws&of = 'w';
        }
        $w || die "No way to $s (on A.1.t's A.t)";
        
        ws&dige || die "w no dige: ".ki$w;
        ws&of || die "w not of: ".ki$w;
        
        my $ark = G.sc.pinark ||= {};
        # dige same across all arg variations
        my $v = $ark.>w.t.>ws&dige.>$args ||= do {
            my $v = G&hup,$w;
            v.y.argumented = $w;
            vs&args = $args;
            G&perlcode,$v,"MakingWay";
            v.c.code || die "no ccode back: ".ki$v;
            $v;
        };
        v.sc.called++;
        
        G&has,\'mo'=>way=>w.t=>w.sc.dige=>1 if A.mo;
        
        T.w = $v;
        my $A = exists nar.A ? nar.A : $A;
        my $C = exists nar.C ? nar.C : $C;
        my $G = exists nar.G ? nar.G : $G;
        my $T = exists nar.T ? nar.T : $T;
        my @arg = map{ $ar.>$_ }@args;
        if (ref $A ne 'HASH') {
            die "Not hashA: ".wdump 3, [$nar,$ar];
        }
        A.i.h->($A,$C,$G,$T,$v,$ar,@arg);
        #vc&code ->($A,$C,$G,$T,$ar,@arg);
    
    # make s.c.code, see of (which sets dige)
    perlcode:
        $C = $s;
        # encapsulate sub with args
        G&CoArgulate;
        # translate into perl
        G&hoh,C.sc,$_ for grep{$_} G&CoBabbler;
        # c&code = eval c&s
        G&Code,$C,@Me;
    
    # c&code = eval c&s
    # l = name of situation
    Code: %acgt:s l
        ($s,$l) = ($C,$s) if !ref $s;
        $l = "$l: " if $l;
        my $Y = $Bun::A;
        delete Ys&stacktime;
        
        T.bangC = $s;
        my $y = eval sc&s;
        die $l."Nocompile s.t: ".ki($s)
            .ind('  ',$@)."\n\n sc&s \n"
            if $@;
        die $l."Not code s.t: ".ki($s)
            if ref $y ne 'CODE' && !ss&subpeel;
        delete T.bangC;
        sayre join"\n", "Warning from $l s.t s.y.cv"
            if delete Ys&stacktime;
        
        sc&code = $y;
    
    n $_=>1=>G.way.>$_ for qw'CoArgulate CoBabbler';
    
    # compiler for old G.w
    n won=>'',join("\n",map{G.way->{$_} || die "no $_"}qw'CoArgulate CoBabbler')
    
    #
    

