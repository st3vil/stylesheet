Should: | # work anywhere
    # these things
EditLatter: | # Alterate into editing the last pi form
    # in t only list, allowing easy rejig
    # collect orphans
    #   names get started as "#", or alienated
    #      zap them back in when put somewhere else on this Te
    
    # when title is shift-clicked
    1s&Simp = 'Alterate';
    return unless 1c&Alterating;
    # qz the last C entered, edit it
    my $t = T.op;
    my @z = Rw fe/since;
    my @pi = grep {_s&pi} @z;    
    @pi != 2 && die "editing for 2 pi process: ".ki \@pi;
    # o: origin, should have pi/*/intake
    # l: pose, probably -way
    my ($o,$l) = @pi;
    l.t eq t.t || die "last since not T_op".ki[$l,$t];
    
    ls&qz = 1;
    # hide usual listing $l and -map the $o-rganism it is from
    # or maybe it's better to -map the $l, if it's a more useful subset?
    # but we go with editables being in cv 3-4
    #  G&op,3 returns them when T.op = os&Js&top
    # $o herein means this os&J
    
    n edit=>-map_4=>{s=>os&J}
    
Alterate: |
    sayyl "Altering j.t on J.t";
    jc&Alterating = !jc&Alterating;
    3c&ET &&
    Rw ET 2;
pi/map: | # volts above list of names
    # make list of reorderable names
    # vanishings live in the nearest -orphanage
    
    # the J whose s&tops&z is to be rearranged
    my $o = Jc&organism = $s || die "no organism?";
    o.y eq $o || die "organism not J: ".ki $o;
    
    local T.op = os&top || die "notop on o.t";
    my @z = G&op,3;
    
    # sembla t/t y/t com
    
    my $sc = G&peel,'%cod:perl,dig:steve,dos:mapin';
    #sc.width = 4;
    #sc.height = 3;
    sc.dig = s&dig if s&dig;
    my $s = join "\n", map {_.t} @z;
    n "z fo" =>1 =>{s=>$s},$sc
    
    y.at.cssdel = 'transform';

mapin: | # rearrange list of names
    # like codein but taking reordering -way's $M
    # sho
    my $o = jc&organism || die "No organism on: ".G&sn,$j;
    o.y eq $o || die "o should be J: ". $o;
    my $opi = oc&s.c.pi || die "o should be pi, moC: ".ki oc&s;
    
    local T.op = os&top || die "notop on o.t";
    my $z = [G&op,3 ];
    # deals pi
    my $pi = do { # what kind of pi
        my $pitw;
        $pitw.>$_ ++ for map {_s&pi} @$z;
        keys %$pitw == 1 || die "many kinds of pi: ".ki$pitw;
        (keys %$pitw)[0]
    };
    
    my $tw; # the bunch of pins it has
    $tw.>_.t = $_ for @$z;
    
    # new order of pins
    my $s = us&code || die "Nocode to mapin";
    my @l = grep{length}split "\n", $s;
    
    my ($h,$new,$gone);
    my $M = [];
    for (@l) {
        $h.>$_ = do {
            if ($tw.>$_ ) {
                m $tw.>$_  
            }
            else {
                $new.>$_ =
                m $_=>''  
            }
        }
    }
    $gone.>$_ = $tw.>$_ for grep{!$h.>$_ }keys %$tw;
    
    # explicitly renamed things, subset of $M, with s&twas
    # see pi/codolf/intake, because t is hard coded for -code
    # and we dont wanna re -code when renaming
    my $R = [];
    if (keys %$gone == 1 && keys %$new == 1) {
        # swap em in, called Chem in fe/Nab
        my ($g,$n) = (values %$gone, values %$new);
        (n.c,n.sc) = (g.c,g.sc);
        ns&twas = g.t;
        push @$R, $n;
    }
    else {
        # goners orphaned
        my $se = [grep{$gone.>_.t } @$z];
        @$se &&
        G&elph,Orphanage=>["j.2.2.t/j.2.t"=>-orphan=>{s=>$se}];
    }
    
    my $N = []; # explicitly new things, subset of $M
    for my $C (@$M) {
        next if s&pi ;
        # look for the name in an orphanage
        # < the origin/above could have its own
        Rw fe/Nab $C $W=Orphanage;
        #Rw NabOrphan $C if $orphans;
        next if s&pi ;
        # otherwise...
        # the intake method should handle no c.s as an empty item
        # for way that means it's '# <'
        push @$N, $C;
    }
    
    # apply organising to organism
    Rw pi/$opi/intake + $j:o.2 $M $N $R;
    
    # turn off -map
    Rw Alterate + $j:j.2;
    # ^ generates ET as well as v
    # < see them merge
    # the un-qz of the -way/display is not understood?
    o.2.c.imping++;
    3c&ET &&
    Rw ET + $wake:o 1;
Orphanage: | # (pi) objects apparently vanishing from other places
    Rw Tiot;
    # so they can be got back when their name turns
    #   up in a slighly different place
    Js&ein.pi.orphan.sMJ = &sMJje{
        my $z = ref $s eq 'ARRAY' ? $s : [$s];
        my $or = Js&orphans ||= {};
        my $fr = $or.>e.t ||= {};
        $fr.>_.t = $_ for @$z;
    };
    S
    # explains self
    Js&indexen.orphans ||= [qw'from* t Chem-leaves'];
    my $or = Js&orphans ||= {};
    #n roll=>-od=>{s=>$or}
    
    y.n = 3;
    for my $f (sort keys %$or) { # from name
        my $rp = $or.>$f;
        if (!keys %$rp) {
            delete $or.>$f;
            next;
        }
        m $f=>''=>$f=>"fs:7,hs:588,dis"
        for my $t (sort keys %$rp) { # name
            m $t=>''=>$t=>"float:left,ma:0.4"
        }
    }

