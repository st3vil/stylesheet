HaMachine: | # new J stuff
    # wants to have pointers to W
    # with the suggestion that you Believe them together
    y.at.massive = 1;
    
    # nothing?
    #n Atool
    
    # coding and tubing
    n Zequines
    
    # locate load & save
    n Placement
    
    # < numbers in the colloquial sense
    n Int
    
    # < world of the particle (was ForJ)
    n Jaya
    
    # G&o the noticer (was Tangle)
    n SenseCertainty
    
    # G&s the oscillator (was Stuff)
    n SelfConsciousness
    
    #n Storage
    #n Elvising
    #n Tripical


Luca: | # ghost -> wormhole flame thrower
    u Dealing
    Jc&tape = 'Dejo';
    
    my $be = 'HaMachine';
    
    my $w = G&t,w=>$be;
    
    #my $d = Rw LowCat $bay=bay $g=via $t=LeMachine;
    
    n $be=>-od=>{s=> $w }
    
    
    #n jgeio=>-od=>{s=>$C}
    #n Dealing=>W=>''=>{not=>1}
    #my $ub = &C{ G&aC };
    #my @l = G&ind,T.op,$ub;
    
    n Le=>-od=>{s=>"Sgjidrgjirjgr",fet=>4},{fs=>33}
    
Luca: | # ghost -> wormhole flame thrower
    Jc&tape = 'Dejo';
    Js&ein.bo = 'Doable';
    S
    #my $d = Rw LowCat $bay=bay $g=via $t=LeMachine;
    # over to Lize
    n HaMachine=>-build_01=>{g=>'new'}
    
    y.n = 11;
    # growing explore
    Js&src ||= ['HaMachine'];
    m $_=>-w for @{Js&src};
    
pi/build: | # for a W you want kept up to date
    y.at.dos = 'buildlize';
    y.at.dis = 3;
    
    n t=>o1=>C.t=>"fs:22,hs:488"
    n does=>o2=>"build"
    n doer=>o3=>" script","dos:buildscript"
buildlize: | # pop over to Lize
    my ($j) = e&_hJ;
    my $C = jc&s;
    my $g = c&g || die "No cg in ".ki$C;
    G&elph,Lize=>W=>{g=>$g,add=>C.t}
    
buildscript: # pop over to Jigdoer
    my ($j) = e&_hJ;
    my $C = jc&s;
    
    my $g = c&g || die "No cg in ".ki$C;
    
    G&elph,NewJigdoer=>W=>{g=>$g,name=>C.t};
    0
    
pi/w: | # looking at code
    y.at.dos = 'wful';
    my $w = c&w || c&s;
    $w = G&t,w=>$w if !ref $w;
    n t=>o1=>w.t=>"fs:22,hs:488"
    n sc=>o2=>ki(w.sc)."\n"
    
    my @ch = split /\n\s*?\n/, wc&s;
    for my $s (@ch) {
        my $mt = 0.4;
        saybl "Codin $s";
        if ($s =~ s/^((?:# [^\n]+\n)+)//s) {
            m coms=>''=>{s=>$1}=>{mt=>$mt,fs=>7}
            $mt = 0;
        }
        m code=>''=>{s=>"$s\n"}=>{mt=>$mt,mb=>0.4,hs=>489}
    }
wful: | # click code
    my $c = e&hC ->[-1];
    1 && saygr "wful; ".wdump ec&us;
    my $what = "what to";
    T.pos = 0;
    if (cc&s =~ /^\s*n (\w+)\s*$/sm) {
        push @{Js&src||=[]},$1;
        $what = "seek way $1";
        # & exude 'n *' only shortening of w
        return;
    }
    G&give,Budge=>s=>[$what,$c];
Dealing: |
    fet: %acgt:s,nk:c,gk:fet,of:mo
        die "?";
        s&fs = 5 * c&fet
        

