HaMachine: | # new J stuff
    # wants to have pointers to W
    # with the suggestion that you Believe them together
    y.at.massive = 1;
    
    n World
    n Process
    n Erupts
World: | # sheer being
    # rolling language around
    n DungBeatles
    
    # tubing
    n Zequines
    
    # < world of the particle (was ForJ)
    n Jaya
Process: | # resonant pits
    # G&o the noticer (was Tangle)
    n SenseCertainty
    
    # G&s the oscillator (was Stuff)
    n SelfConsciousness
Erupts: | # wiring standards
    # J handling requests, electrics through the wormhole
    n Elvectors
    
    # locate load & save
    n Placement
    
    # < numbers in the colloquial sense
    n Int
    
    # W knowing process alteration/debug electrodes
    n Tripical
    
    # extra nice
    n ThArt
    
    # dubiously designed
    #n Storage
    
NewJigdoer: | # 0 bootstrap a G from W
    Jc&tape = 'Dejo';
    Js&ein.bo = 'Doable';
    # send c&name, way mentioning n $W
    # resolved via c&g for linked Inclusion
    
    # < get traceably these things its adding...
    
    # resolve W from closer,further
    my @path = split',',c&g || die "give cg";
    A.5.t = pop @path;
    A.6.t = pop @path if @path;
    G.c.bay || die "will need G";
    
    my $eh = hitime();
    my $getway = &w{
        my $w = G&t,w=>$w || die "Noway: $w";
        wc&s
    };
    
    # slurp these stored W for composing normal
    my @W = grep {$_} map { /^n (\w+) */ }
        split "\n", $getway->(c&name || die "give cname");
    my @set = map {
        my $f = G&Locate_read,$_;
        $f .= "/1";
        -f $f || die "NO such $_ ($f ?)";
        $f
    } @W;
    
    # make $Believe->($N) able
    my @suub = map {
        my ($t,$args) = @$_;
        my $s = $getway->($t);
        my $C = G&Ct,[$t=>1=>{s=>$s},{args=>$args,of=>'w'}];
        G&perlcode,$C;
        'my $'.$t.' = '.c&s;
    } [Beach=>'s,f'],[Believe=>'N'];
    
    my $bab = &s{
        my $C = G&Ct,["someba"=>1=>{s=>$s}];
        G&CoBabbler;
        C.c.s
    };
    
    my @inc = ('G');
    my $perl = join "\n\n",
        $getway->('strictwarn'),
        'use FindBin qw($Bin);',
        'use lib "$Bin/othlia";',
        'use lib "$Bin/slib";',
        (map{"use $_;"}@inc),
        'my ($A,$C,$G,$T);',
        'my $begin = "NewBeginning";',
        @suub,
        'my @f = ('.join(",",map{"\n    '$_'"}@set)."\n);",
        $bab->($getway->('Begin'));
    
    my $f = c&name.".pl";
    write_file $f, $perl;
    `chmod +x $f`;
    sayre "Done";
    exit;
NewBeginning: | # 0 HaMachine.pl's first way
    1 && saybl "In the beginning";
    { # test I
        my $t = G&t,i=>'t';
        $t && ts&args eq 'A,C,G,T,s,t,c' || die "t t fail: ".ki$t;
    }
    # stacktrace
    Rw Bangular;
    
    # should base all G gk here-ish
    G.c.bay = 'bay';
    # G.i is A.I.i.y.tw.* directly to their .c.code
    # for calling subs inside the sub that calls subs
    G.i || die "Wants the G\.i codestash";
    A.I = delete A.ii;
    delete A.i;
    
    # these are really J, the particle, an A put somewhere
    my $i = $A = G&A,'House';
    my $o = $A = G&A,'Motor';
    
    # coming from each other
    i.1 = i.3 = i.5 = o.5 = o.2 = $i;
    o.1 = o.3 = o.4 = i.4 = i.2 = $o;
    my $one = 0.1;
    4s&Jtv.>_.t.>$one = $_ for $i,$o;
    
    
    
    Rw CloningProcess;
    sayre "Become thingz!";
    
    die "fix: $_" for
    Rw t/o_simple;
    
    #A.V = 2;
    sayyl "Ang";
    my $C =
    n TheFirst
    sayre "Here";
    
    
    return;
    # Motor (A) must build House without the mind House produces
    #n House
    my $n = G&A,n=>1=>A.1=>['House'];
    nc&nomind = 1;
    G&A,$n,8;
    
    # has moments
    n Motor
    
Howz: | # another House, sheets of mind you want handy, resource gateway
    Js&loose = 1;
    Js&tby = 'byt'; # h for further lookups, eg of=w
    
    # add u, eg WayHeave for w over/update
    Js&ein.t.w = &TesC{
        my $W = e.c.s;
        $W =~ /^(\w+)$/ || die "Give ecs way name";
        Jc&addu.>$W ++;
        T.oke = 1;
    };
    
    # Normal is the implied mind of the valleys
    # see Jtool
    # - waves of 'u thing' add to it for your valley
    
    # < TheU changes it everywhere, on 5
    #   puts it as of:W, seen as W=Normal
    #   having mixed 5c&plus = [W,W...] into it
    #   < remixes it if needed (versioning)
    
    #u TheU
    
    # also available as:
    # 5s&NormalI - tw of things, A.I
    # 5s&NormalC - C.c.W=Normal, sc.J.sc.I == NormalI
    #   for placing before additions in u, I swoms via J
    
    5s&NormalI = A.I;
    my $j = G&Ct,[Normal=>1];
    j.y = $j;
    j.sc.I = A.I;
    5s&NormalC = G&Ct,[Normal=>1=>{}=>{J=>$j}];
    
    # we switched Mo to mo with PiMachine
    #   whose builder still wants to compile the u for Mo
    # shortnames are modern
    my $x = {qw'c alc  s als  a alact  i alacgts'};
    each pin,was $x {
        my $w = G&t,w=>$was;
        $w || die "Can't find 5way: $was";
        w.t = $pin;
        u $w
    }
    
    my $c;
    # c.plus
    #u TheU
    #u Ang
    
    u $_ for sort keys %{Jc&addu||{}};
    S
    # so the G.ii no have
    delete fi.W.y.tw.Normal;
    delete fi.W if !keys %{fi.W.y.tw};
    
    1 && saygr "/House";
    
TheFirst: | # enable mind changing
    
    
    #
    my $D =
    n Jaya
    #Jaying
    my $J = Ds&J;
    saybl "And: ". wdump 4, [ Js&I];
Dwangulit: |
    n percepto=>3=>"Delicious"
    n another=>4=>"Things"
    m ff=>''=>"-$_" for 1..4;
    dial: %of:i,acgt:g
        # dave meant
Luca: | # ghost -> wormhole flame thrower
    Jc&tape = 'Dejo';
    Js&ein.bo = 'Doable';
    S
    #my $d = Rw LowCat $bay=bay $g=via $t=LeMachine;
    # over to Lize or NewJigdoer
    n HaMachine=>-build_01=>{g=>'new'}
    
    y.n = 11;
    # growing explore
    Js&src ||= ['HaMachine'];
    m $_=>-w for @{Js&src};
    
pi/build: | # for a W you want kept up to date
    y.at.dos = 'buildlize';
    y.at.dis = 3;
    
    n t=>o1=>C.t=>"fs:22,hs:488"
    n does=>o2=>"build"
    n doer=>o3=>" script","dos:buildscript"
buildlize: | # pop over to Lize
    my ($j) = e&_hJ;
    my $C = jc&s;
    my $g = c&g || die "No cg in ".ki$C;
    G&elph,Lize=>W=>{g=>$g,add=>C.t}
    
buildscript: # pop over to Jigdoer
    my ($j) = e&_hJ;
    my $C = jc&s;
    
    my $g = c&g || die "No cg in ".ki$C;
    
    G&elph,NewJigdoer=>W=>{g=>$g,name=>C.t};
    0
    
pi/w: | # looking at code
    y.at.dos = 'wful';
    my $w = c&w || c&s;
    $w = G&t,w=>$w if !ref $w;
    n t=>o1=>w.t=>"fs:22,hs:488"
    n sc=>o2=>ki(w.sc)."\n"
    
    my @ch = split /\n\s*?\n/, wc&s;
    for my $s (@ch) {
        my $mt = 0.4;
        saybl "Codin $s";
        if ($s =~ s/^((?:# [^\n]+\n)+)//s) {
            m coms=>''=>{s=>$1}=>{mt=>$mt,fs=>7}
            $mt = 0;
        }
        m code=>''=>{s=>"$s\n"}=>{mt=>$mt,mb=>0.4,hs=>489}
    }
wful: | # click code
    my $c = e&hC ->[-1];
    1 && saygr "wful; ".wdump ec&us;
    my $what = "what to";
    T.pos = 0;
    if (cc&s =~ /^\s*n (\w+)\s*$/sm) {
        push @{Js&src||=[]},$1;
        $what = "seek way $1";
        # & exude 'n *' only shortening of w
        return;
    }
    G&give,Budge=>s=>[$what,$c];

