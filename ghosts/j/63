Jaya: | # word particles and waves
    # how to form a C
    # < not defining G&s, which should osc
    n Sea
    
    # how to sequence a J (ex Jelly, Sleep)
    n Jaying
    
    # contraptions of J (ex With, Tunnel)
    n Jtool
    
Jaying: | # how to sequence a J
    u a
    n \'of:mo'
    
    # A.ground? A.place? ||= 1s&place ||= G&sJ,'place'
    # haul long blogs into long J with many bits of place
    # or page or ...
    # they want to commit or abort, be histree for o
    # and be a collection of in-progress C for slow/scattery J
    mo 1:
        A.mo = $A;
    
    u c
    # various dynamics to the same basic particle
    pi 12:
        $pi || die "Give pi: ".ki$C;
        c&J = "pi/$pi";
    
    # just looking for W, maybe retrieve static?
    # < using T.Z somehow to say jump to 8 after 2,
    #   might be useful for always tripping trips
    V 12:
        c&W = $V;
        A&twotoeight = 1;
    
    # networkily named thing
    W 12:
        ref $s && die "ref cW";
        $W = c&W = C.t if !$W || $W eq '1';
        c&J = $W;
        A&Jup = A.4;
        A&Jcv = 0.1;
        s&W = $W;
    
    # look it up
    J 2:
        T.oT = A.mo.up.mo.c.T;
        my $J = s&J && return;
        A&Jup ||= A.1;
        A&Jcv ||= C.y.cv;
        
        $J = G&pint,A&Jup,sc=>Jtv=>C.t,A&Jcv
            unless A&nomem;
        
        s&J = $J;
        
        if (A&twotoeight) {
            T.oT.op = $J && Js&s && Js&s.sc.top;
            return T.not = 1;
        }
    
    # J encode Ï€ 
    # previous J is A.2, may differ from "above" J in J.2
    # esp in W-W situ, their J.2 is A.4/A&Jup
    J 3:
        s&J ||= do {
            1 && sayyl "J ! C.t".(c&pi && " C.y.cv -".c&pi);
            G&J,A&Jup,C.t;
        };
        A.2 = A.1;
        A.1 = s&J;
        A.3 = s&J.3 = s&J if c&W;
        1c&s = $C; # particle holds passing wave, may tangle
        1c&T = $T; # and that, why not
    
    pi 3:
        s&pi = $pi;
        1c&d = 2c&d + 1;
    
    #c J/W/pi are now set up in the universal hemisphere
    u s
    # humming - sleepology - osc exports that door us here
    # outside the fully self/u mind
    # can see network protocols of elvis
    # A&E would know if it wants to go in
    # which page we're working on?
    J 4:
        my $v = J.sc.Tv; # inner surf attracto
        my $ha = J.sc.tv; # things
        
        Rw Js&amb $J if !c&e && Js&amb;
        
        # T wants ha or v wants T (by now, etc)
    
    # 5 grinds desires into mode of go
    
    # do the pin
    # could do M-odulate 
    J 6:
        A&pin = c&pin || c&J || s&J.t;
        
        # why?
        # (A.i,A.ii) = (A.4.i,A.4.ii);
        T.nose && return sayyl "C.t 6 knows";
        
        # takeover ground/page
        # A.ground?
        G&yec,chaos=>'rea';
        Js&n && G&rea,$J;
        Js&u && G&rea,Js&u,$J;
        
        # T to throw in a u on below
        if (my $uz = !Jc&is && 2c&Wunderu) {
            u $_ for values %$uz;
        }
        
        my $ise = c&e && " (e:".c&e ->{t}.")";
        saybl "St J.t / A.1.t  (A&pin)$ise";
        my $c = {root=>1};
        my $y = {cv=>0.9};
        my $sc = y.at = {};
        my $M = [];
        my $r = J.sc.root = G&A,n=>1=>$J=>[J.t,$y,$c,$sc];
        my $ar = c&ar || {};
        my $s = c&s;
        {
          local A.V = 2;
          c&phind = G&c&phin if c&phin;
          Rw A.c.pin + $J $y $M $s;
        }
        
        G&noc,chaos=>'rea';
        T.nose && return;
        G&yec,chaos=>'tilosc';
        
        c.M = $M if @$M;
        Jc&imping = 1
            if delete y.imp; # reset lv
        # spacey y.* apply to M in L/a
        (r.i,r.ii) = (J.i,J.ii);
        G&A,$r,8;
    
    # join moment to moment
    J 7:
        A&Jup.sc.Jtv.>C.t.>A&Jcv = s&J unless T.nose eq '1';
        # no osc us/ground you but keep J ^ (e to)
        T.not = 1 if T.nose eq '2';
        # was skipping out of 6
        delete T.nose if T.nose eq '7'; # 
        T.nose && return
            sayyl "C.t knows";
        # temp - of wants to load elvis understanding like route handlers
        
        sayyl "Oscillate J.t";
        G&s;
        G&noc,chaos=>'tilosc';
        sayyl "Oscillate J.t done!@!";
    
    # J leaves T.op just outside
    J 8:
        T.oT.op = 1s&s.sc.top;
    # TODO do n till 9
    
Jtool: | # contraptions of J
    u i
    
    # J, they inherit like a stretchier A
    J:
        my ($J,$s) = ref $s ? ($s,shift@Me) : (A.1,$s);
        $A = $J;
        $J = G&A,$s;
        J.1 = $J;
        J.2 = $A;
        $J
    
    # J's support crew
    # who keep normal
    # may be n'd and s'd
    sJ:
        my ($J,$s) = ref $s ? ($s,shift@Me) : (A.1,$s);
        J.sc.>$s ||= do {
            my $j = G&J,$J,$s;
            j.I = 5s&NormalI if 5s&NormalI;
            $j
        };
    
    # adds to ground
    # < sometimes given [C,C,C]?
    #   @$s = ([@$s]) unless ref $s->[0] eq 'ARRAY' || ref $s->[0] eq 'HASH';
    n: %acgt
        pop @Me if $Me[-1] eq '';
        G&clusp;
        $C = G&Ct,\@Me;
        G&A,mo=>8=>{s=>$C}
        $C
    
    # adds to mind, G&clusp causes it to be made
    u: %acgt
        pop @Me if $Me[-1] eq '';
        my $u = G&sJ,'u';
        push @{uc&N||=[]}, \@Me;
        
    # the many accumulate in $M, passed in
    # usually given and mo'd by J6
    m: %acgt:M
        pop @Me if $Me[-1] eq '';
        G&clusp;
        push @$M, G&Ct,\@Me;
    
    # ephemeral n without:
    # - clusping the mind, or
    # - attaching to this ground (usu for c.e)
    # < e could be reliabilitied by grounding and osc work
    # usually n \'of:mo' -> C.c.of=mo
    # but for e it A.c.of=mo, for eg nomem
    e: %acgt
        pop @Me if $Me[-1] eq '';
        
        my $c = shift @Me if ref $Me[0] eq 'SCALAR';
        $c = $c ? G&peel,$$c : {};
        c.nogro = 1;
        
        $C = G&Ct,\@Me;
        G&A,mo=>8=>{s=>$C,%$c}
    
    # clasp u
    # 5s&NormalI is default if no u
    # 5s&NormalC is base, it's s&J holding I as usual
    #   O ii hoists faster than entering everything from the start
    # < only elvising altering We things
    # < lots of I.i things only being on 5 so this has less to chew
    # < knowing I.i never needs to know order/y.next... unless stored
    clusp:
        return unless 5s&NormalI; # before 5/House sets up
        A.1.I = A.I = do {
            my $A = G&A,clusping=>0;
            (A.1,A.2) = (G&sJ,'u' , A.1);
            my $N = 1c&N;
            1c&N = [];
            if (@$N) {
                local A.trip, A&trip;
                # this may be an alias for speed rather than canonical
                # name should include versions: Normal#3893a73, c#489bc58
                #   being ha, or c#1.42.492 for incremental version
                #   maybe wanting hostnames
                # the 5 might create some W for each mind it makes
                my $uname = dig wdump 3, $N;
                5s&ucache.>$uname ||= do {
                    1c&is = 'mind'; # static encouraged
                    # enter stuff to form mind
                    map { G&A,mo=>8=>{s=>$_} }
                    map { G&Ct,$_ }
                        # like a J6
                        [$uname=>9=>{root=>1}],
                        # s&J holding I as usual
                        (5s&NormalC || die "create NormalC");
                        # entered stuff
                        @$N;
                    # 
                    my $s = G&s;
                    ss&I || die "clusp no I, $uname: ".ki $s;
                };
            }
            else {
                # the 
                5s&NormalI
            }
        };
        # get this J's mo throat to reopen its mind
        T.seek = 1;
       
    # sequence thing
    mo:
        # yer
    
Tannel: | # OLD mind & world
    # flying into moment
    # machine for finding pi
    # reality is a cave system
    # that wants help
    u a
    # dialect of mind prepared in a meditation
    u 1:
        A.2 = shift @$s; # for J
        A.1 = G&sJ,A.3,'u';
        1c&is = 'mind';
        delete A.trip;
        delete A&trip;
    
    u 2:
        if (A.1.c.o) { # uJ's orderliness mark
            # also its current position relative to itself
            # make many pages of u per A.2 (A.1 doing u)
            G&sesh,A.1;
        }
    # hardwire u's u
    u 3:
        my $n = A.c.n = G&A,n=>1=>A.1,@$s;
        n.c.u.c.whole = 'theu';
        # give u mo W a bed to sleep from
        n.c.T.ATR.H = 8 unless 2c&noHu;
        G&A,$n,8;
        # pull on if not cached mindset (various W merged)
    n 1:
        ref $s ne 'ARRAY' && die "No :".wdump 4, [A.c.N, $s];    
        A.1 = shift @$s;
        A.4 || sayre "NO A4: A.t";
        A.c.u = G&sJ,A.1,'u';
        A&u.c.is = 'mind';
        
    # ground assembles mind
    n 2:
        my $u = A&u;
        return if A.1.t eq 'os' || A&nomind;
        if (!uc&o) {
            u.c.base = 'theu'; # the PiMachine
            # base if grind (ground, needs root), whole if just theu
            my $rev = ".u.sc.ch" if u.sc.ch;
            my $V = A.1.t =~ /^[A-Z]/;
            my $gr = G&grind,$u;
            if ($gr) {
                G&A,n=>8=>$u=>[uuu=>9=>{root=>1}];
                # slowly opening & closing a J of the u better than ^
                # but also want to hold u n at 3 til cachable known
                # the relevant page of s (man sesh) then ^ getting whole=?
                # those u s pages get cached somewhere in 4stw.ucache
                #   if simple enough
            }
            saybl "resolves mind$rev: A.1.t".($gr && " (u)");
            # resolve our mind
            # < having the M of u to do now, cache with
            local A.trip;
            local A&trip;
            my $so = G&A,s=>8=>$u;
            # merge its i/ii thing ideas into our 1
            if (u.sc.ii) {
                # A.mo = the 6er this n is mindupping
                # A = this A, already fell off A.mo
                # A.1 = an fyi for the J, may want only the most something mind
                for (A.mo, $A, A.1) {
                    _.ii = u.sc.ii;
                    _.i = u.sc.i || die "No i on A.1.t u";
                }
                # the mo of A.2 minds from above til here
                # a J's mind has how to get into a J and do its mind
                # see Elvising for inside-outside cooperation
            }
            else {
                sayre "No ii on A.1.t u (o Whole TODO?)";
                for (A.mo, $A, A.1) {
                    _.ii = A.4.ii;
                    _.i = A.4.i || die "No i on A.1.t u ish A.4.t not-whole";
                }
            }
            T.seek = 1;
        }
    # foldout tape - ground creates moment
    # can be [ [t,y,c], [t,y,c,sc] ]
    # or [ t,y,c ]
    # or [ C, C, C, C ]
    # mo receives A Me (A&N/$s) of [ C ] or [ t,y,c ]
    n 3:
        @$s = ([@$s]) unless ref $s->[0] eq 'ARRAY' || ref $s->[0] eq 'HASH';
        A.m = $A;
        my $grounded;
        my $travel = delete T.ATR;
        for my $l (@$s) {
            $l = [$l] if ref $l eq 'HASH';
            sayre "None in ".ki($l)."   ".G&sn if !@$l;
            my $mo = G&tugA,mo=>1,@$l;
            # know it
            unless (mo.c.s.c.nogro || mo.c.nogro || A&nogro) {
                G&ground,$mo;
                $grounded++;
            }
            # pass travel in
            mo.c.>$_ = A.c.>$_ for grep { A.c.>$_ } qw'nomem';
            G&xot,mo.c.T,$travel if $travel;
            
            A&mo = $mo;
            push @{A&mos||=[]}, $mo;
        }
        if ($grounded && delete 1c&o) { # orderliness
            # T for observing what disturbed it
            # comment T means focal point for ghost cobblingon
            # like commented says
            #&& A.1.t eq 'Panos' && sayyl "uno J.t: ",
            #    map{" _c&s.t _c&s.y.cv"} @{A&mos};
        }
    n 4:
        # become aware of past, surface vibration
    n 5:
        # thinks
    n 6:
        # flights
    n 7:
        # compress
    n 8:
        # inter
        A.mo.sc.lastn = $A;
    
    # mo-ment fills out the content
    # sprung from n-author, separate put words...
    mo 1:
        A.mo = $A;
        ref $s eq 'ARRAY' || saybl "Was: ".ki($s)."   ".ki(A.c.N);
        G&Cs,$s;
    # join L if lumy
    mo 17:
        C.y.cv = 0.1 if C.y.cv eq '';
        C.y.cv *= -1 if C.y.cv < 0;
        C.y.cv *= 0.1 until C.y.cv < 1;
    # A.ii gets inner's mind, should T.seek
    mo 5:
        # 
    mo 8:
        A.up.la = $A; # never happens?

