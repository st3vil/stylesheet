Jaya: | # word particles and waves
    # how to form a C
    # < not defining G&s, which should osc
    n Sea
    
    # how to sequence a J (ex Jelly, Sleep)
    n Jaying
    
    # contraptions of J (ex With, Tunnel)
    n Jtool
    
Jaying: | # how to sequence a J
    u c
    W:
        sayre "Somewhat!";
Jtool: | # contraptions of J
    u i
    sJ:
        saygr "Make universal For $s";
    # start page, pages composite pages
    
    n: %acgt
        pop @Me if $Me[-1] eq '';
        G&clusp;
        G&A,n=>8=>A.1,\@Me;
        
    
    u: %acgt
        pop @Me if $Me[-1] eq '';
        # before Ct, add to 1s&us&N
        $C = G&Ct,\@Me;
        G&A,u=>8=>A.1,\@Me;
        
    # many slide bywards on $M and then get nailed down
    m:
        pop @Me if $Me[-1] eq '';
        G&clusp;
        G&A,n=>2=>A.1,[];
        push @$s, G&Ct,\@Me;
    
    # electric line phantom
    # makes n without touching this ground (usu for c.e)
    #   e could be reliabilitied by grounding and osc work
    e: %acgt
        pop @Me if $Me[-1] eq '';
        my $st = shift @Me if ref $Me[0] eq 'SCALAR';
        my $n = G&A,n=>1=>A.1,\@Me;
        if ($st = $st && G&peel,$$st ) {
            G&hoh,n.c,$st;
        }
        nc&nomind =
            nc&nogro = 1;
        G&A,$n,8;
    
    clusp:
        # if 1s&us&N, forms mind, static encouraged
        # 5 cachable name after contents
       
    # sequence thing
    mo:
        # yer
    
Tannel: | # mind & world
    # flying into moment
    # machine for finding pi
    # reality is a cave system
    # that wants help
    u a
    # dialect of mind prepared in a meditation
    u 1:
        A.2 = shift @$s; # for J
        A.1 = G&sJ,A.3,'u';
        1c&is = 'mind';
        delete A.trip;
        delete A&trip;
    
    u 2:
        if (A.1.c.o) { # uJ's orderliness mark
            # also its current position relative to itself
            # make many pages of u per A.2 (A.1 doing u)
            G&sesh,A.1;
        }
    # hardwire u's u
    u 3:
        my $n = A.c.n = G&A,n=>1=>A.1,@$s;
        n.c.u.c.whole = 'theu';
        # give u mo W a bed to sleep from
        n.c.T.ATR.H = 8 unless 2c&noHu;
        G&A,$n,8;
        # pull on if not cached mindset (various W merged)
    n 1:
        ref $s ne 'ARRAY' && die "No :".wdump 4, [A.c.N, $s];    
        A.1 = shift @$s;
        A.4 || sayre "NO A4: A.t";
        A.c.u = G&sJ,A.1,'u';
        A&u.c.is = 'mind';
        
    # ground assembles mind
    n 2:
        my $u = A&u;
        return if A.1.t eq 'os' || A&nomind;
        if (!uc&o) {
            u.c.base = 'theu'; # the PiMachine
            # base if grind (ground, needs root), whole if just theu
            my $rev = ".u.sc.ch" if u.sc.ch;
            my $V = A.1.t =~ /^[A-Z]/;
            my $gr = G&grind,$u;
            if ($gr) {
                G&A,n=>8=>$u=>[uuu=>9=>{root=>1}];
                # slowly opening & closing a J of the u better than ^
                # but also want to hold u n at 3 til cachable known
                # the relevant page of s (man sesh) then ^ getting whole=?
                # those u s pages get cached somewhere in 4stw.ucache
                #   if simple enough
            }
            saybl "resolves mind$rev: A.1.t".($gr && " (u)");
            # resolve our mind
            # < having the M of u to do now, cache with
            local A.trip;
            local A&trip;
            my $so = G&A,s=>8=>$u;
            # merge its i/ii thing ideas into our 1
            if (u.sc.ii) {
                # A.mo = the 6er this n is mindupping
                # A = this A, already fell off A.mo
                # A.1 = an fyi for the J, may want only the most something mind
                for (A.mo, $A, A.1) {
                    _.ii = u.sc.ii;
                    _.i = u.sc.i || die "No i on A.1.t u";
                }
                # the mo of A.2 minds from above til here
                # a J's mind has how to get into a J and do its mind
                # see Elvising for inside-outside cooperation
            }
            else {
                sayre "No ii on A.1.t u (o Whole TODO?)";
                for (A.mo, $A, A.1) {
                    _.ii = A.4.ii;
                    _.i = A.4.i || die "No i on A.1.t u ish A.4.t not-whole";
                }
            }
            T.seek = 1;
        }
    # foldout tape - ground creates moment
    # can be [ [t,y,c], [t,y,c,sc] ]
    # or [ t,y,c ]
    # or [ C, C, C, C ]
    # mo receives A Me (A&N/$s) of [ C ] or [ t,y,c ]
    n 3:
        @$s = ([@$s]) unless ref $s->[0] eq 'ARRAY' || ref $s->[0] eq 'HASH';
        A.m = $A;
        my $grounded;
        my $travel = delete T.ATR;
        for my $l (@$s) {
            $l = [$l] if ref $l eq 'HASH';
            sayre "None in ".ki($l)."   ".G&sn if !@$l;
            my $mo = G&tugA,mo=>1,@$l;
            # know it
            unless (mo.c.s.c.nogro || mo.c.nogro || A&nogro) {
                G&ground,$mo;
                $grounded++;
            }
            # pass travel in
            mo.c.>$_ = A.c.>$_ for grep { A.c.>$_ } qw'nomem';
            G&xot,mo.c.T,$travel if $travel;
            
            A&mo = $mo;
            push @{A&mos||=[]}, $mo;
        }
        if ($grounded && delete 1c&o) { # orderliness
            # T for observing what disturbed it
            # comment T means focal point for ghost cobblingon
            # like commented says
            #&& A.1.t eq 'Panos' && sayyl "uno J.t: ",
            #    map{" _c&s.t _c&s.y.cv"} @{A&mos};
        }
    n 4:
        # become aware of past, surface vibration
    n 5:
        # thinks
    n 6:
        # flights
    n 7:
        # compress
    n 8:
        # inter
        A.mo.sc.lastn = $A;
    
    # mo-ment fills out the content
    # sprung from n-author, separate put words...
    mo 1:
        A.mo = $A;
        ref $s eq 'ARRAY' || saybl "Was: ".ki($s)."   ".ki(A.c.N);
        G&Cs,$s;
    # join L if lumy
    mo 17:
        C.y.cv = 0.1 if C.y.cv eq '';
        C.y.cv *= -1 if C.y.cv < 0;
        C.y.cv *= 0.1 until C.y.cv < 1;
    # A.ii gets inner's mind, should T.seek
    mo 5:
        # 
    mo 8:
        A.up.la = $A; # never happens?

