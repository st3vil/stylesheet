ym/jsbabz: |
    my $poing = qr/\w+(?:\.\w+)?/;
    my $nlp = qr/[^\n]+/;
    
    C.c.s =~ s/\bA&(\w+)\b/A\.c\.$1/g;
    C.c.s =~ s/\ba&(\w+)\b/A\.sc\.$1/g;
    C.c.s =~ s/\bs&(\w+)\b/C\.sc\.$1/g;
    C.c.s =~ s/\bC&(\w+)\b/C\.sc\.$1/g;
    C.c.s =~ s/\bc&(\w+)\b/C\.c\.$1/g;
    
    C.c.s =~ s/^t\&([^\s;]+)(;)?/!G\&t,$1 and return;/gm;
    C.c.s =~ s/($poing)\&(\$)?(\w+)(,[^\s;]+)?(;)?/
        my $t = $2 ? "$3" : "'$3'";
        my $h = $1 eq 'G' ? ".h(A,C,G,T,$t" : "\[$t\](A,C,G,T";
        $1.$h."$4)$5"
    /smge;
    # true or assign
    C.c.s =~ s/^\s*($nlp) \|\|\= ($nlp)(;)?$/if (!$1) {
        $1 = $2
    }/gm;
    # left-hand if
    C.c.s =~ s/^\s*([^\n]+?) and ($nlp)(;)?$/if ($1) {
        $2
    }/gm for 1..3;
    
    # tiny sub maker, &raw,args{
    C.c.s =~ s/[^G&]&(\w*(,\w+)*)\{/function($1){/gm;
    
    # com message
    C.c.s =~ s{(^|\{) *~(?:(\w+)~)?(\w+(?:$nlp:)?)(?: ($nlp))?;?$}{
        my $ope = $1;
        my $r = $2 ? 'A,C,G,T,' : '';
        my$c=$2||'c';my$s=$3;my$e=$4;$s=~s/:$//; $ope."a\.$c($r'$s',[$e]);"}segm;
    
    C.c.s =~ s/^\s*\$(\w+)\b/var $1/gm;
jst: |
    c&s = <<'';
        !G&Time,'rasunify',700,s and return
        G&something
        $.each(h, &k,v{ delete h.k });
        ~leaves
        G&nothing,is,over
        c&see = c&know;
        C&tell = C&B;
        var s = &c{ that.it.is };
        ~rasunify: re.length
        ~dothis~fourly: f
            C&attr.title ||= C.t+' '+C.y.cv;
            
        
    #

    Rw ym/jsbabz;
    
    #is(c&s,<<'',"G& and ~");
     c&s eq <<'' || saybl("Was off:\n\n".c&s."\n\n") && sleep 4;
        if (!G.h(A,C,G,T,'Time','rasunify',700,s)) {
            return
        }
        G.h(A,C,G,T,'something')
        $.each(h,function(k,v){ delete h.k });
        a.c('leaves',[]);
        G.h(A,C,G,T,'nothing',is,over)
        C.c.see = C.c.know;
        C.sc.tell = C.sc.B;
        var s =function(c){ that.it.is };
        a.c('rasunify',[re.length]);
        a.dothis(A,C,G,T,'fourly',[f]);
js: | # compile/collect
    # place toward A.ii.>$s, linked list of embryo
    my $of = C.t;
    my $ark = G.sc.codeark ||= {};

    # rennovating around town
    # a geodesic self-mover
    # keeps rebuilding in different locations
    
    # this way should export osc hooks and another way...
    for my $C ( e&_cz ) {
        c&s || sayre "C.t C.y.cv has no s: ".ki $C;
        if (!c&code && (s&args || s&acgt)) {
            # may already be compiled
            # shades code through the wall
            # the W listened to needs one osc in G, then all can whole it
            # coded while the W goes through the wall
            my $coded = delete(s&coded) || s&args && s&acgt;
            my $digs;
            my $scbab;
            unless ($coded) {
                # shade the edges, args, parsables etc.
                
                # ym/jscoi: |
                my $s = C.sc.js || return;
                if (C.sc.acgt) {
                    die "acgt js: C.t already s&args" if s&args;
                    s&args ||= join',','A,C,G,T',split/\W+/,
                        grep{$_ ne '1'}s&acgt;
                }
                die "wonky C.t   of ".ki $C if C.t =~ /\W/;
                #C.sc.args =~ s/ /,/g;
                delete C.sc.com;

                Rw ym/jsbabz;

                c&s = "function(".s&args.") {\n".c&s."};\n";
                C.sc.dige = slm 12, dig C.c.s;
                
            }
            
            G&hoh,C.sc,$scbab if $scbab;
            $ark.>$of.>C.t.>$digs = [c&s,c&code,$scbab] if $digs;
            
        }
        s&dige = slm 12, dig c&s if exists c&s && !ref c&s;
    }

    C.sc.hi = 'lo';
    T.nose = 1;
    T.pos = 0;
Styleslops: | # minimal page that sockets in more stuff
    # use the js filter, store in ...
    index: %js:html
        <!DOCTYPE html>
        <html><head>
          <style type="text/css">
            ww * { pointer-events:none; }
            ww * * { pointer-events:all; }
          </style>
          <link href="light.css" rel="stylesheet"></link>

          <script src="codemirror/lib/codemirror.js"></script>
          <link href="codemirror/lib/codemirror.css" rel="stylesheet">
          <link href="codemirror/theme/night.css" rel="stylesheet">
          <link href="codemirror/theme/midnight.css" rel="stylesheet">
          <link href="codemirror/theme/base16-dark.css" rel="stylesheet">
          <link href="codemirror/addon/display/fullscreen.css" rel="stylesheet">
          <script src="codemirror/addon/display/fullscreen.js"></script>
          <script src="codemirror/mode/perl/perl.js"></script>
          
          <script src="paper.js"></script>
          <script src="paper.animate.js"></script>
          
          <script src="jquery.min.js" type="text/javascript"></script>
        </head>
        <body style="margin: 0px; background: black; color: #0d2; height:100%; width:100%;">
          <div id='msgs' style="white-space: pre;position:absolute;font-size:60%;left:0em;bottom:0em;width:50%;height:28%; overflow:hidden;padding:0.2em;color:#abc;z-index:200" onclick="keon();clon();a.togwid('#msgs','50%','5%');" > </div>
          <div id='ux' style="position:absolute;top:0em;
          right:0em;width:100%;height:100%;"> </div>

          <canvas id="display" resize></canvas>

          <script type="text/javascript">
            var A = {c:{},sc:{}};
            a&elvis = Math.random();
            a&start = ['thestart'];
            A&start = &s{
                if (s) {
                    var m = s.split("\n");
                    $.each(m,function(i,v){ eval(v); });
                }
                if (a&start.length) {
                    $.ajax(a&start.shift()).done(A&start);
                }

            };
            $(document).ready(&{
                A&start();
            });
          </script>
          </body></html>
Stylehut: | # not stylehut
    n Stylephone
Stylephone: |
    # to begin, hang up your desires
    getnet: %acgt:s,js:i
        # some weird jsing
        G&nothing,is,over
        c&see = c&know;
        C&tell = C&B;
        var s = &c{ that.it.is };
        ~rasunify: re.length
        ~dothis~fourly: f

