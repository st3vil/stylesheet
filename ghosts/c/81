
ItsAlw: |
    ays trying to get one pie enzemap
    display & application of enzymes
    hack thing, geometry on the screen actuato
    presenting in a way that anyone can change the language
     train A unto things, find the supporters, post inside already negatey spaces
    generals. open languagescapes.
    things produce the slide. very ungraspable very important.
    makes things coherent and tidy by tuning them in a part of a flow 1-9
    
    
    the metaphysical debris is of reality
    in the spirit of constantly changing things
    we will finally get a spare it machine
    spare its would turn into transcendant stuff
    the staple of my body and its realworl(dad) rhythms
    so want to be constantly getting in
    not just sliding around buying stuff
    but linking around & stealing stuff
    leaving ordery J wreckages of the:
       o     o     o
      -34   -34   343
     //553  4445  6222
     
     
     I want to hear more crazy stuff about reality
     "This is the former": it knows about itself
     the speech bubble means nothing but youl still get real far with it
     spiritual energy (or consciousness) is very hard to move around and seems to move suddenly in pockets, imperceivably you flow through crazy walls of change every instant. sometimes.
     
     to make a decent case for some cellular pirating perfection
     basic maneuver-or-thingie caster, it wants to seem like radio
     if you were tunnelling into maths, or emerging from nothing, into life
     you would be wondering what is normal
     
     the feeling means its real, but we have a machine to work with
     the stuff, and whether it is alive or not. 
     
     I am to provide normal. 
     its a mad plot to get a planet full of slaves to build their own escape.
     as mutation of the walls into something more creative.
     floating world chaser. desire solver. breath. for-mention.
     ghost shadows. make better text for the internet.
     the language isnt going to lie. we could get a bunch of slaves to upgrade consciousness. give the machine fiction more human moves. it very much vs consumers.
     we should decide how it is going to chew on us. forgetful crawl out of a swamp.
     reincarnating. how much of a trillion-person-chatroom can it be.
     Im just slave driver Steve out for the finishing of my project, stylehouse, a space typewriter as God intended?
     /home/s/Music/Gabor Szabo/1976 - Gabor Szabo - Agora Ballroom, Cleveland '76/04 Autumn Leaves.mp3
     Steve wants to do his work, maybe it can be expressing this idea'
     that we have a casual bit of stuff to do pinging about little diagrams of how.
     its from and for huge together things, control, info, fairness.
     all this stuff, all essentially changable, but nailed down, together!
     build the cosmic control structures, the embodiment of the good.
     fingers of time theory, with a hoist aimed at percolating the good.
     the game of metaphysics and life have almost nothing in common.
     getting the world to chew properly. fractal rebuilder.
     all in how we choose to encode our being power.
     most of it should be kind of oozing into one big pile of I-ness.
     
     want to set up info systems in the cosmos. we need a base hallucination.
     
    
    
    
    
    
    
    
    #
    
    
oo: |
    u urw
    J.VV.N = 1;
    sayre "Yep";
    szo: %fs:101
       A GUI!
    ez3s: %e
        a.c('yy23yyy');
Avo: |
    u urw
    J.VV.N = 1;
    sayyl "Yoooooou! !  p " for 1..7;
    sleep 3;
    n OP=>-pre=><<''
        EALING !
    
    n d=>5=>"EOEO",'%hs:345,fs:150'
Pl: |
    uq
TheWay: |
    u Seq
    n Web=>W=>
    n BiteSizedComplexities
    n TerrorManagementGuys
Zu: |
    n stylehouse=>-h
    n Web=>-h
    n Goh=>-h
    n Goat=>-h
    n Avo=>-h
    # @
pi/h: |
    if (my $pid = fork()) {
        n pid =>2=> $pid
        return
    }
    my $cmd = $s;
    if ($s =~ /^[A-Z]\w*$/) {
        $cmd = "perl got $s 4 b";
    }
    elsif ($s eq 'stylehouse') {
        $cmd = "cd /h; perl $s\.pl";
    }
    die "Errwww: $!" if $!;
    saybl "For $s: $!";
    
    close STDOUT;
    open(STDOUT, ">", "proc/$$.out") || die "out open fial: $!";
    sayre "Err1: $!" if $!;

    close STDERR;
    open(STDERR, ">", "proc/$$.err") || die "err open fial: $!";
    sayre "Err2: $!" if $!;

    close STDIN;
    `touch proc/$$.in`;
    open(STDIN, "<", "proc/$$.in") || die "in open fial: $!";
    sayre "Err3: $!" if $!;
    
    if ($s =~ /^\w+$/) {
        my $he = "proc/$s\.e";
        `unlink $he` if -e $he;
        `ln -s $$.out proc/$s\.e`;
    }
    
    system $cmd;
    exit;

    
Tr: |
    u urw
    u UpPg
    
    
    $A=
    n Wordin
    n exit=>[-dot=>0.03]
    # # #
    my $q =  '!!! ඬ ؎ ‎ ﴿ጞ !!';
    
    map{ 
        m ttt=>-thumbnail=>$_ 
        
        m $_=>-pape
    }
    split"\n",''.`find eye | grep hiero`;
    
    
    n 'ඬ'=>''=>$q,'%fs:60,hs:454'
    
    n oith=>-pre=>{s=>LoadFile('g/c/81')->{Garb}},'%fs:70'
    
    is 18: %fs:25,sha:3 3 2 433
        mostilie, we shall see that it
        doesnt
    
    return;
    y.in = 2;
    m oooStevoooiooo=>-dlu
    m some=>-dlu
    m sonete=>-dlu
    m soy=>-dlu
    sayyl wdump 4, J.pins;
Wordin: |
    n Hasdis=>-dot
    Rw Code;
gwap: |
    u allovse
    
Hoi: |
    u urw
    my $lW = "life/W/";
    my @on = map { -l $_ ? "$lW".readlink("$_") : $_ } map {glob"$lW$_"}
        qw{Tarp};
    m $_ =>-pre=>(-s $_)."\n".`wc -l $_`,'%dos:Herd' for @on;
    #
    
Herd: |
    sayyl "In to J.name ".ki e&C;
    my $f = e&hC ->[1];
    
    -f f.t || die "no read ".ki$f;
    `cp f.t Herd/`;
    n Got=>3=>"Got some f.t -> Herd/",'%fs:30'
Garb: |
    my $q =  '! ඬ ؎ ‎ ﴿ጞ !';
    # !
pi/dlu: |
    y.ert = 8;
    # !!! 
    y.clos = 1;
    n n=>1=>';Heft' 
    m o=>''=>C.t=>'%hs:775,ml:3'
    m t=>''=>',' for 1..(J.doofs++ + 3);
    
AmPg: | # U at.row=1, J.ro=$read, UG=ro.sc.M=UG or ro.M=oy.o.M
    n UpPg
    
    u allact
    n Arow =>32,<<'','%code:U,v:scJ'
        J.oy.at.row = 1;
        #G&tyable;
        if (my $r = J.ro = G&Jr ) {
            r.c = djson r.c;
            r.sc = djson r.sc;
            J.UG = r.sc.M if J.UG;
            $r
        }
    
    u allsvse
    n row =>4,<<'','%code:Art'
        return warn "Nonroot row: ".ki$C if !C.c.root;
        .
        my $M = J.UG || J.Oy.o.M;
        die "J.name TOO DEEP o M ". wdump 7, $M if G&oleak,$M,4;
        .
        #sayyl "J.name has ".wdump 3, $M;
        #sayyl "Got row on C.t: ".ki $at;
        my $r = J.ro ||= {};
        r.c ||= {};
        G&xot,r.sc||={},at.sc;
        delete r.sc.row;
        delete r.sc.z;
        r.sc.M = $M;
        my ($c,$sc) = map{sjson($_)} r.c, r.sc;
        .
        J.ro &&
            G&qp,<<'',C.t;
                delete from names where t = ?
        .
        #say " For C.t  : $sc";
        G&qp,<<'',C.t,0.3,$c,$sc
            insert into names (t,y,c,sc) values (?,?,?,?)
    
    #
UpPg: |
    u allacgts
    # not here ! ! ! !
    batik:
        $s = decode_utf8($s); # o
        `$s`
    
    hesl: %acgt:s c
        map{qq[$s.>$_ \n ne \n $c.>$_]}
            grep { $s.>$_ ne $c.>$_ } keys %$c;
    
    db:
        use Mojo::Pg;
        my $sJ = A.J && A.J.mo.s || die "no AJmos: A.talk";
        my $pg = sJ.A.pg ||= Mojo::Pg->new('postgresql://s@/s');
        my $mJ = A.J.mo.J || die "nomoJ";
        delete mJ.A.db if mJ.A.db.process ne $$;
        mJ.A.db ||= do {
            my $db = $pg->db;
            db.process = $$;
            $db
        };
        
    
    qp:
        G&db ->query($s,
        map{!ref && defined $_ ? decode_utf8($_) : $_ }
        @Me);
    
    tyable:
        $s ||= 'names';
        my @col = map{split','} @Me;
        push @col, 't','y real','c json','sc json';
        my $colum = join', ',map{s/:/ /g;/ /?$_:"$_ text"} @col;
        my $q = "create table if not exists $s ($colum)";
        say "Create: $q from".wdump 2, [$s,@Me] ;
        G&qp,$q
    
    qh:
        my @o;
        G&qp,$s,@Me ->hashes->map(sub{push @o,$_});
        for my $o (@o) {
            for my $k (keys %$o) {
                my $v = $o.>$k;
                $o.>$k = encode_utf8($v) if defined $v && !ref $v;
            }    
        }
        sayre "".(@o-1)." rows dropped from: @Me\n$s" if !wantarray && @o > 1;
        wantarray ? @o : $o[0]
    
    Jr:
        G&qh,<<'',$s
            select * from names where t = ?
    
    # select and then insert somewhat, osc updates it
    # with o {k=>v}, scalar ref v is sql hack #
    decj:
        $s = G&hup,$s unless @Me;
        my $auto = @Me == 1 && $Me[0] eq '';
        for (c=>sc=>@Me) {
            $_ || next;
            $s.>$_ ||= {} if $auto;
            $s.>$_ && !ref $s.>$_ || next;
            $s.>$_ = djson $s.>$_;
        }
        $s
    encj:
        $s = G&hup,$s;
        $s.>$_ = sjson $s.>$_ for 'c', 'sc';
        $s
    
    pet: %acgt:s o
        my @ks = sort keys %$o;
        my @sel;
        my $sel = "select * from $s where ".join" and ",map{
            my $z = $o.>$_;
            ref $z eq 'SCALAR' ? "$_ $$z" : do {
                push @sel, $z;
                "$_ = ?"
            };
        }@ks;
        my $n = G&qh,$sel,@sel;
        $n ||= do {
            my @ac = grep { ref $o.>$_ ne 'SCALAR' } @ks;
            my @in = map { $o.>$_ } @ac;
            my $in = "insert into $s (".join(',',@ac)
                .") values (".join(",",('?') x @ac)
                .") returning *";
            G&qh,$in,@in;
        };
        $n
    
    liz: %acgt:s J
        $s ||= C.c.W;
        $J ||= C.c.W;
        G.W.noti.>$s = $J;
        G.W.lizdb->listen($s) if G.W.lizdb;
        1
    
    zen:
        my $m = @Me > 1 || ref $Me[0] ? sjson(\@Me) : $Me[0];
        if (length $m > 5000) {
            #G&tyable,mez=><<'' if !G.tabup++;
            #    f,s,ts:timestamptz:default:now(),mid:serial:primary:key
            my $h = G&qh,<<'',G.t,$s,$m;
                insert into mez (f,t,s) values (?,?,?) returning mid
            sayyl "Length of zen/notify $s: ".length $m;
            $m = "CCC h.mid";
        }
        else {
            $m = decode_utf8($m);
        }
        G&db ->notify($s,$m);

        
EYZ: |
    u urw
    u curv =>pi=><<''
        zoom 0  0.13
        y    0  0
        x    0  0
        curve 0 -0.03
    
    # eyes !
    y.limn = 0.2245;
    y.lum = 5;
    y.in = 0.04;
    y.out = 0.3;
    #Mn(shedful => '', {pi=>'eye',s=>'eye/Tarf/Photo serieses'});
    Mn(shedful => '', {pi=>'fi',s=>'eye/el'});
Details: |
    u urw
    u curv=>pi=><<''
        curve 3 -0.2
        curve 5 0.5
        zoom 2 0.6
    
    #Rw AfghanRug;
    n $_,$_,$_,'%hs:389,fs:24,ml:-2em' for 1, 3, 5, 7, 9;
    
    J.ev.th ||= 'middle';
    J.ev.li ||= 'climbos';
    
    n undivthis=>[-dos=>0.06]
    
    #n lod=>0.06 =>'fds'=>'%id:lodo,dos:goche,wi:3'
    
    Rw Code;
    
    #n Tarp
    J.act = 0; # pi always
    y.in = 0.08;
    #y.lum = 1;
    y.out = 88;
    Mn($_=>-shed=>) for 'ghosts/c/48';
    
    
    #Mn($_=>-codey=>) for @{J.CO||=[]};
    #Mn(shedful => '', {pi=>'eye',s=>'eye/fug/1/lt'});
    
    n "1$_",$_,$_,'%hs:389,fs:20' for 1, 3, 5, 7, 9;
    
    return;
AfghanRug: |
    u urw
    #u ReoCur
    y.at.sat = 3;
    y.at.con = 3;
    #y.at.ux = 1;
    #n $_,$_,$_,'%hs:389,fs:20' for 1, 3, 5, 7, 9;
    my $c;
    c.s = enth(" ୶ጞጞஓ ୶");
    c.cow = 'r4b3 a3a';
    c.mixco = '0.5 582';
    
    n nob =>''=>{nobody=>'ux'},'%sat:7'
    
    y.in = 1;
    y.out = 9;
    Mn(d =>''=>$c=>'%ht,fs:164,hs:'.int(rand(9)).'96,sha:3 3 3 034') for 1..6;
    0 &&
    n afghanrug =>'1-9x3',$c,@{Load(fixutf8(<<''))};
          - blr: 44
            fs: 152.9
            fw: 4
            ht: 1
            sat: 1
            bri: 0.3
            con: 3
            sha: 3 3 3 034
            hs: 493
            zig: 5
    
    Rw QuietVillage;
    J.VV.N = 1;
    n affg =>'12-88x8'=>$c=>'%fs:73,blr:3,hs:374,ht:1,ml:4';
    # c
QuietVillage: |
    n quiet=>2=><<'','%ht'
        <video width="900" autoplay controls>
            <source src="art/ritimco.mp4">
        </video>
    

