use strict;
use warnings;
no warnings qw(uninitialized redefine);

use FindBin qw($Bin);
use lib "$Bin/othlia";
use lib "$Bin/slib";
use Bun;
use Down::Goodat;
use Down::Tides;
use G;
use GBabz;
use Ise::KnowTime;
use Ise::Rob;
use Ise::Shelf;
use Ngwe;
our $A = {};
$A->{I} = {};
$A->{AAAA} = [
$Bun::A,$Down::Goodat::A,$Down::Tides::A,$G::A,$GBabz::A,$Ise::KnowTime::A,$Ise::Rob::A,$Ise::Shelf::A,$Ngwe::A];
my $W = 'wormhole'; # wormhole/
unless (-d $W && -d "$W/way") {
my $from = 'g/c/*';
`mkdir -p $W` if !-d $W;
sayyl "Projecting $from to $W/(dig)way ...";

my $glomet = sub {
    my $f = shift;
    my $mt = (stat $f)[9];
    my $fi = $f;
    $fi =~ s/\//-/g;


    my $wf = "$W/wf/$fi";
    my $mft = (stat $wf)[9] if -f $wf;
    $mt > $mft
};

my $doway = sub {
    my $f = shift;
    my $d = LoadFile($f);
    `mkdir $W/way` if !-d "$W/way";
    `mkdir $W/digway` if !-d "$W/digway";
    while(my($k,$v) = each %$d) {
        {
            my $k = $k;
            $k =~ s/\//-/g;
            my $waf = "$W/way/$k";
            # bol
            my $wig = "$W/digway/$k";
            my $dig = slm(10, dig($v));
            my $lin = readlink($wig) if -l $wig;
            next if $lin eq $dig;
        }
        $k =~ s/\//-/g;
        my $waf = "$W/way/$k";
        # bol
        my $wig = "$W/digway/$k";
        my $dig = slm 10, dig($v);
        my $lin = readlink($wig) if -l $wig;
        if ($lin eq $dig) {
            next
        }
        else {
            sayyl "Lin: $k   $dig <--- $lin" if $lin;
            #sayre "No lin $wig " if !$lin;
        }
        write_file($waf."nt",$v);
        if (!-f $waf || `diff $waf ${waf}nt`) {
            `mv ${waf}nt $waf`;
        }
        else {
            `rm ${waf}nt`;
        }
        -l $wig && `unlink $wig`;
        `ln -s $dig $wig`;
    }
};

my @li = glob $from;
for my $f (@li) {
    $f =~ /(?!8)\d\d\d$/ && next;
    $glomet->($f) || next;
    # part of glo ^
    $doway->($f);
}
}
for my $AA (@{$A->{AAAA}}) {
    my @D = map{values%$_} map{values%$_} values %{$AA->{II}};
    my $ne = {map{$_=>1}keys%{$AA->{I}}};
    for my $D (@D) {
        unless ($ne->{$D->{t}}) {
            $D->{sc}->{eg} || die "notI sub not .eg".ki$D;
            $AA->{symb} ||= eval'\%'.$D->{sc}->{eg}.'::';
            $AA->{I}->{$D->{t}} = $ne->{$D->{t}} = $AA->{symb}->{$D->{t}};
        }
        delete $ne->{$D->{t}} || sayre("II index for not in I: ".ki$D) && next;
        $A->{I}->{$D->{t}.'_dige'} = $D->{sc}->{dige};
        $A->{I}->{$D->{t}} = $AA->{I}->{$D->{t}};
        $A->{tople}->{$D->{t}} = 1;
    }
}
our $G = {};
$G->{up} = hitime();
$G->{id} = mkuid();
$G->{I} = $A->{I};
$G->{A} = $A;
$A->{talk} = "G";
$A->{mo} = $A;
our $KA = {};
$G::KA->{"$A"} = $A;
my $C = {};
my $T = {};
for my $sn (qw'pwin tie h w airlock') {
    $G->{$sn} = $G->{I}->{$sn} || die "No $sn from G I";
}
$SIG{__DIE__} = $G->{I}->{sigstackend} || die "NO sigstackend";
$SIG{__WARN__} = $G->{I}->{sigstackwarn} || die "NO sigstackwarn";
$G->{IIII} = [map{'G/T/'.$_}qw'H/Boat H/Rest p/Ang K/Stable'];

$G->{h}->($A,$C,$G,$T,"init");

$G->{w}->($A,$C,$G,$T,"Run",A=>$A,C=>$C,G=>$G,T=>$T,m=>["i"]);

$G->{clockon} && $G->{clockon}->() ||
    Mojo::IOLoop->is_running || Mojo::IOLoop->start;