--- 
c: {}

sc: 
  z: 
    - 
      c: 
        W: of
      sc: 
        z: 
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\n($A->{c}->{s}) = @$s;\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: a6f81cb1a016
              of: L
              z: ~
            t: L
            "y": 
              cv: '0.1'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $n = $C->{y}->{n};\n# to almost fill space\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 95c647e345c6
              gk: 'n'
              nk: 'y'
              of: L
              v: yn
              z: ~
            t: 'n'
            "y": 
              cv: '0.1'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $spc = $C->{y}->{spc};\n# to take up space\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 8d19f907fa60
              gk: spc
              nk: 'y'
              of: L
              v: yspc
              z: ~
            t: spc
            "y": 
              cv: '0.1'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $u = $C->{y}->{u};\n# to take space up til\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 842c9be664b8
              gk: u
              nk: 'y'
              of: L
              v: yu
              z: ~
            t: u
            "y": 
              cv: '0.1'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $in = $C->{y}->{in};\n$C->{y}->{n} = delete $C->{y}->{in} if !ref $C->{y}->{in};\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: c6fb2fcf4ecc
              gk: in
              nk: 'y'
              of: L
              v: yin
              vatis: "!ref"
              z: ~
            t: in
            "y": 
              cv: '0.12'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $out = $C->{y}->{out};\n$C->{y}->{u} = delete $C->{y}->{out} if !ref $C->{y}->{out}\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 7d63d8e70d45
              gk: out
              nk: 'y'
              of: L
              v: yout
              vatis: "!ref"
              z: ~
            t: out
            "y": 
              cv: '0.12'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\n$A->{c}->{y} && die \"You Ay L 2\";\n$A->{1}->{c}->{s} || die \"J has no mo C: \".$G->{h}->($A,$C,$G,$T,\"sn\");\n#local $A->{V} = 1;\n# mo C that began the J we are now inside is the trick\n# we are probably at 17 of their root mo, which has $C->{c}->{M}\nmy $Jy = $A->{1}->{c}->{s}->{y};\nmy $y = $C->{y};\nmy $M = $C->{c}->{M};\n\n# some L uC spawns the A nC lattice\n# what to do with the L uC?\nif ($M) {\n    # has M\n    # L uC can be forgotten, probably mo'd with root in J6\n    # it could be placement metadata/unity\n}\nelse {\n    # is first in its own M\n    # to make holes in space other M must flow around\n    $A->{c}->{M} = $M = [$C];\n    $y->{thi} > 1 &&\n           push @$M, map { $G->{h}->($A,$C,$G,$T,\"hup\",$C) } 1 .. $y->{thi} - 1;\n}\n\n# limits apply, thi being for ^ iterator length \n#                          and v limit of output\nmy $lims = {};\n$lims->{thi} = $y->{thi} if defined $y->{thi};\n$lims->{limn} = int(9 * $y->{limn} * $Jy->{spc})\n    if $y->{limn} && ($Jy->{spc} || die \"No space! $J->{t}\");\nmy $lim;\nwhile (my ($k,$v) = each %$lims) {\n    @$M > $v || next;\n    $A->{V} && $G->{h}->($A,$C,$G,$T,'say','say',\"Limof: $k $v to $C->{t}\");\n    $lim = $k if !$lim || $lims->{\"$lim\"} > $lims->{\"$k\"};\n}\nif ($lim) {\n    my $it = $lims->{\"$lim\"};\n    my $from = 0;\n    if ($y->{tail}) {\n        $from = -1;\n        $it *= -1;\n    }\n    else {\n        $it -= 1;\n    }\n    $lims = $lim; # name\n    $lim = @$M; # limited from\n    @$M = @{$M}[$from .. $it];\n}\n\n$A->{V} = 0;\n$y->{thi} = @$M;\n$y->{thi} || die \"No M: \".ki $C;\n#c & point/seek to things coming in with our surrounds\n\n# if we were placed with enough room\n# let atoms slide up to the top J\n# things saying they're in both places\n#   leads to nice grouping, ref integrity\n$y->{J} = $A->{3} if $Jy->{spc} > 0.1;\ndelete $y->{J} if $y->{clos};\nmy $clos = $Jy->{spc} && !$y->{J};\n#  they can want to be inside too\n#  geo to chain together floating/not atoms\n#  so its like wires over machines\n\n# ml (margin-left)\n# high lum makes tree bends up towards margin\n# like it is open inside, like bet. rummager.\n$y->{inde} = $Jy->{inde} + 0.06 if $y->{J};\n\n# sliver of attention\nmy $sl = $Jy->{spc} * 0.01;\n$sl = 0.02 if $sl < 0.02;\n# carpenting\n$y->{n} ||= $clos ? 0.3 : $Jy->{J} ? $Jy->{cv} + $sl : 0.1;\n$y->{u} ||= $clos ? 0.4 : $Jy->{J} ? $Jy->{ov} - $sl : 0.9;\n# set width\n$y->{u} = $y->{n} + $y->{space} if defined $y->{space};\n$y->{u} /= 10 until $y->{u} < 1;\n$y->{n} /= 10 until $y->{n} < 1;\n# corner noted\nif ($lim) {\n    my $s = \"$lim>\".@$M;\n    my $cv = $y->{tail} ? $y->{n} : $y->{u};\n    # TODO += here blows up zopul:\n    $cv -= 0.002;\n    my $M = $A->{c}->{XM} = [];\n    $G->{h}->($A,$C,$G,$T,\"m\",$M,lim=>$cv,$s,'%fs:7,hs:7487,limit:'.$lims=>'');\n}\n# fit in multiple of\nif (my $ert = $y->{ert}) {\n    $ert += $y->{ert} while $y->{thi} > $ert;\n    $y->{thi} = $ert;\n}\n$y->{space} = $y->{u} - $y->{n};\nmy $outer;\nif ($y->{res}) {\n    $outer = $y->{space} / $y->{thi};\n    $y->{space} -= $outer;\n}\n$y->{space} *= -1 if $y->{space} < 0;\n$y->{v}->{v} = $y->{n}; # rolls\n$y->{v}->{v} += $outer / 2 if $outer; #\n# average size\n$y->{v}->{aspace} = $G->{h}->($A,$C,$G,$T,\"roun\",$y->{space}/$y->{thi});\n# thy -> mu bends out\n$y->{v}->{y} = $y; # u is shared placevolve meta\nmy $i;\nfor (@$M) {\n    $_->{y}->{v} = $y->{v};\n    $_->{y}->{i} = $i++;\n    $_->{y}->{a} = $G->{h}->($A,$C,$G,$T,\"tugA\",a=>2=>$_);\n    $_->{y}->{a}->{L} = $A;\n}\n# all ying applies now to M\n# tugging M\n\n #c lum uC shapes curve, wants to be with limn\n # might mean a few lum qualities, make them switchupable\n # supposedly osc can measure itself, hoist geometry\n #    descriptions for ascii art buildings\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 5692332471a9
              of: L
              z: ~
            t: L
            "y": 
              cv: '0.2'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $lum = $C->{y}->{lum};\ndie \"Inlum\";\nmy $M = $C->{c}->{M} || die \"lum no M\";\nmy $y = $C->{y};\nmy $um;\n($um->{l},$um->{r}) = split ',', $lum;\nfor (grep{defined $um->{$_}} keys %$um) {\n    $um->{$_} =~ /^(?:(\\d+)-)??(?:(\\d)+)(?:-(\\d)+)?$/\n        || die \"notunder: \".wdump 2, $um;\n    $um->{$_} = {i=>$1,um=>$2,o=>$3};\n}\n1 && saybl \"Lum $C->{t}: \". wdump 2, $um;\n\n$um->{l}->{um} ||= 3;\nmy $lumhalvesby = ($um->{l}->{um} / 2) / ($um->{r}->{um} || 3);\nmy $i = 0;\nfor (@$M) {\n    $_->{y}->{thy} = 1 if !defined $y->{thy};\n    $_->{y}->{thy}+=$um->{l}->{um};\n    $i++;\n    if ($i > $um->{l}->{o}) {\n        $um->{l}->{um} -= $lumhalvesby if $um->{l}->{um} > 0.1;\n    }\n}\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 0e1a994bcb26
              gk: lum
              nk: 'y'
              of: L
              v: ylum
              z: ~
            t: lum
            "y": 
              cv: '0.23'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $res = $C->{y}->{res};\n#local $A->{V} = 2;\nmy $y = $C->{y};\nmy $M = $A->{c}->{M} || $C->{c}->{M};\n$y->{res} == 2 && return\n    $A->{V} && $G->{h}->($A,$C,$G,$T,'say','saygr',\"$A->{1}->{t} fits \".@$M.\" into $C->{t}\");\nmy $res = $y->{res} = $A->{1}->{sc}->{res}->{\"$C->{t}\"} ||= {res=>$res};\nmy $ctv = $res->{ctv} ||= {};\nmy $la; # known from\nmy @news;\nmy $bend = sub {\n    my ($from,$to,@M) = @_;\n    @M = map {\n        $_->{y}->{a} || die \"has no ya: \".ki$_;\n        $_->{y}->{a}->{c}->{s} eq $_ || die \"ya cs not _: \".ki[$_->{y}->{a}->{c}->{s},$_];\n        # their a C becomes for cv/spc for real heighting etc\n        $_->{y}->{realy} = $_->{y}->{a}->{c}->{s} = $G->{h}->($A,$C,$G,$T,\"hup\",$_->{y}->{a}->{c}->{s});\n        # takeover original ref:\n        $_\n    } @M;\n    my $nu = $G->{h}->($A,$C,$G,$T,\"Ct\",[\"Bend$from->$to\",{}]);\n    $nu->{y}->{n} = $from;\n    $nu->{y}->{u} = $to;\n    $nu->{y}->{res} = 2; # makes spc/2 away from edges but not M<>ctv\n    $nu->{c}->{M} = \\@M;\n    $nu->{c}->{oM} = [];\n    # ^ our ground splices this L's stuff into $M\n    # as it is $A->{y}=A in an M of C\n    $G->{h}->($A,$C,$G,$T,\"tugA\",L=>4,$nu);\n};\nreturn keys %$ctv &&\n    $A->{V} && $G->{h}->($A,$C,$G,$T,'say','saygr',\"All new refit $C->{t} $C->{y}->{res} -- \".$G->{h}->($A,$C,$G,$T,\"sn\"))\n    unless grep{ $ctv->{\"$_->{t}\"} } @$M;\nmy @M;\nfor (@$M) {\n    my $at = $ctv->{\"$_->{t}\"};\n    if ($at && !$_->{c}->{refit}) {\n        $A->{V} && $G->{h}->($A,$C,$G,$T,'say','sayyl',\"Have $_->{t}  -> $at\");\n        if ($la && $at < $la) {\n            # has to opt out for M order via $C->{c}->{refit}\n            # la cause may have moved out already\n            $A->{V} && $G->{h}->($A,$C,$G,$T,'say','saybl',\" is from earlier\");\n        }\n        $_->{y}->{cv} = $at;\n        push @M, $_;\n        if (@news) {\n            # bend @news between $la and $_\n            $la ||= $y->{n};\n            $A->{V} && $G->{h}->($A,$C,$G,$T,'say','saygr',\"Bend from $la to $at:\\n\".ki \\@news);\n            push @M,\n                $bend->($la,$at,@news);\n            @news = ();\n        }\n        $la = $at;\n    }\n    else {\n        $A->{V} && $G->{h}->($A,$C,$G,$T,'say','saybl',\"New $_->{t}\".($_->{c}->{refit} && \" (repo)\"));\n        push @news, $_;\n    }\n}\n$bend->($la,$y->{u},@news) if @news;\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 7ec5967ed125
              gk: res
              nk: 'y'
              of: L
              v: yres
              z: ~
            t: refit
            "y": 
              cv: '0.4'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $c = $C->{c};\nmy $M = $C->{c}->{M};\nmy $y = $C->{y};\nmy $total = sum(map{ $_->{y}->{thy} || 1 } @$M) || 1;\n$y->{v}->{muav} = @$M / $total;\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 33c87e80e528
              gk: M
              nk: c
              of: L
              v: cM
              z: ~
            t: barel
            "y": 
              cv: '0.5'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $res = $C->{y}->{res};\nref $res || return;\nmy $y = $C->{y};\nmy $M = $A->{c}->{M} || $C->{c}->{M};\nmy $ctv = $res->{ctv};\nfor (@$M) {\n    $ctv->{\"$_->{t}\"} && delete $ctv->{\"$_->{t}\"};\n    $ctv->{\"$_->{t}\"} = $_->{y}->{cv} || die \"No cv res yet: \".ki$_;\n}\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: f0d83da07922
              gk: res
              nk: 'y'
              of: L
              v: yres
              z: ~
            t: res
            "y": 
              cv: '0.7'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $M = $A->{c}->{M} || $C->{c}->{M} || die \"L 8 with no M: \".ki$C;\nmy $y = $C->{y};\nshift @$M if $M->[0] eq $C;\nmy $J = $y->{J} || $A->{1};\n$A->{c}->{XM} && push @$M, @{$A->{c}->{XM}};\n# resolve any L in M to its many\n@$M = map {\n    my $oM = $_->{y} eq $_ && ($_->{c}->{s}->{c}->{oM} || die\n        \"NoM on inner $_->{t} from $C->{t}: \".ki $_->{c}->{s} );\n    $oM ? @$oM : $_\n} @$M;\n# stash out many for the above\n$C->{c}->{oM} && return push @{$C->{c}->{oM}}, @$M;\nif ($A->{V}) {\n    1 && sayyl \"For $J->{t}: \";\n    1 && saygr \"$_->{t}: \".ki $_->{y} for @$M;\n}\n$G->{h}->($A,$C,$G,$T,\"A\",n=>8=>$J,@$M);\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 8cf347a4f625
              of: L
              z: ~
            t: ground
            "y": 
              cv: '0.8'
      t: L
      "y": 
        cv: '0.001'
    - 
      c: 
        W: of
      sc: 
        z: 
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\n($A->{c}->{s}) = @$s;\n\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 0d8957de16b7
              of: a
              z: ~
            t: a
            "y": 
              cv: '0.1'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\n$y->{mu} = defined $y->{thy} ? $y->{thy} : 1;\n$y->{mu} = $y->{mu} * $y->{v}->{muav} if $y->{v}->{muav};\nmy $was = $y->{v}->{v};\n$y->{cv} = $G->{h}->($A,$C,$G,$T,\"roun\",$y->{v}->{v}) if !$y->{cv};\n$y->{pcv} = $G->{h}->($A,$C,$G,$T,\"roun\",$y->{i}/$y->{v}->{y}->{thi});\nmy $in = $y->{v}->{aspace} * $y->{mu};\n$y->{v}->{v} += $in;\n$y->{ov} = $G->{h}->($A,$C,$G,$T,\"roun\",$y->{v}->{v});\n$y->{spc} = $y->{ov} - $y->{cv};\n\n$C->{sc}->{yspc} = $y->{spc} if $C->{sc}->{nspc};\n$C->{sc}->{ml} = ($y->{v}->{y}->{inde} * 40).\"%\" if $y->{v}->{y}->{inde};\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: ddf77282ff5f
              of: a
              z: ~
            t: many
            "y": 
              cv: '0.6'
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $y = $C->{y};\nmy $lum = $C->{y}->{lum};\nmy $y = $C->{y};\nmy $upt = 0;\n$y->{spc} = 0.1 if $y->{spc} < 0.1;\nmy $fs = $y->{spc} * 20 * 4;\n$C->{sc}->{fs} = $fs if $fs < 9;\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 202169a86271
              gk: lum
              nk: 'y'
              of: a
              v: ylum
              z: ~
            t: lum
            "y": 
              cv: '0.7'
      t: a
      "y": 
        cv: '0.001'
    - 
      c: 
        W: of
      sc: 
        z: 
          - 
            c: 
              s: "sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nreturn if $C->{y}->{a}; # already placed\nreturn if $C->{y}->{L}; # already placing\nmy $M = $C->{c}->{M};\nif ($A->{V}) {\n    $G->{h}->($A,$C,$G,$T,'say','sayre',\"$C->{t} manies!: \".(exists $C->{c}->{M}).\"  \".ki $M);\n    my $D = $T->{D};\n    my $ybrow = $D->{sc}->{nogindex};\n    my @ym = grep{$C->{y}->{\"$_\"} } keys %$ybrow;\n    1 && sayyl \"Neg: $C->{t} y: \".join',',@ym;\n    1 && saybl \"noym: \".wdump 2, [$C->{c},$C->{y}] if !@ym;\n}\n$C->{y}->{L} = $G->{h}->($A,$C,$G,$T,\"A\",L=>8,$C)\n};"
            sc: 
              acgt: s
              act: 1
              args: A,C,G,T,s
              coded: 1
              dige: 796fbda7d6a5
              ip: 
                cM: 
                  exi: 1
                  gk: M
                  nk: c
                order: 
                  - cM
                  - 'y'
                "y": 
                  hasany: &1 
                    in: "!ref"
                    lum: 1
                    "n": 1
                    out: "!ref"
                    res: 1
                    spc: 1
                    u: 1
                  or: 1
              nogindex: *1
              of: mo
              t: 1
              tldo: nogindex:y:L
              vor: cM
              z: ~
            t: M
            "y": 
              cv: '0.16'
      t: mo
      "y": 
        cv: '0.001'
    - 
      c: 
        s: "(A.c.s) = @$s;\n"
      sc: 
        acgt: s
        act: 1
        of: L
        z: ~
      t: L
      "y": 
        cv: '0.1'
    - 
      c: 
        s: "(A.c.s) = @$s;\n\n"
      sc: 
        acgt: s
        act: 1
        of: a
        z: ~
      t: a
      "y": 
        cv: '0.1'
    - 
      c: 
        s: "# to almost fill space\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: yn
        z: ~
      t: 'n'
      "y": 
        cv: '0.1'
    - 
      c: 
        s: "# to take up space\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: yspc
        z: ~
      t: spc
      "y": 
        cv: '0.1'
    - 
      c: 
        s: "# to take space up til\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: yu
        z: ~
      t: u
      "y": 
        cv: '0.1'
    - 
      c: 
        s: "C.y.n = delete C.y.in if !ref C.y.in;\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: yin
        vatis: "!ref"
        z: ~
      t: in
      "y": 
        cv: '0.12'
    - 
      c: 
        s: "C.y.u = delete C.y.out if !ref C.y.out\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: yout
        vatis: "!ref"
        z: ~
      t: out
      "y": 
        cv: '0.12'
    - 
      c: 
        s: "return if C.y.a; # already placed\nreturn if C.y.L; # already placing\nmy $M = c&M;\nif (A.V) {\n    G.h->($A,$C,$G,$T,'say','sayre',\"C.t manies!: \".(exists c&M).\"  \".ki $M);\n    my $D = T.D;\n    my $ybrow = D.sc.nogindex;\n    my @ym = grep{C.y.>$_ } keys %$ybrow;\n    1 && sayyl \"Neg: C.t y: \".join',',@ym;\n    1 && saybl \"noym: \".wdump 2, [C.c,C.y] if !@ym;\n}\nC.y.L = G&A,L=>8,$C\n"
      sc: 
        acgt: s
        act: 1
        of: mo
        tldo: nogindex:y:L
        vor: cM
        z: ~
      t: M
      "y": 
        cv: '0.16'
    - 
      c: 
        s: "A.c.y && die \"You Ay L 2\";\nA.1.c.s || die \"J has no mo C: \".G&sn;\n#local A.V = 1;\n# mo C that began the J we are now inside is the trick\n# we are probably at 17 of their root mo, which has c&M\nmy $Jy = A.1.c.s.y;\nmy $y = C.y;\nmy $M = c&M;\n\n# some L uC spawns the A nC lattice\n# what to do with the L uC?\nif ($M) {\n    # has M\n    # L uC can be forgotten, probably mo'd with root in J6\n    # it could be placement metadata/unity\n}\nelse {\n    # is first in its own M\n    # to make holes in space other M must flow around\n    A.c.M = $M = [$C];\n    y.thi > 1 &&\n           push @$M, map { G&hup,$C } 1 .. y.thi - 1;\n}\n\n# limits apply, thi being for ^ iterator length \n#                          and v limit of output\nmy $lims = {};\nlims.thi = y.thi if defined y.thi;\nlims.limn = int(9 * y.limn * Jy.spc)\n    if y.limn && (Jy.spc || die \"No space! J.t\");\nmy $lim;\nwhile (my ($k,$v) = each %$lims) {\n    @$M > $v || next;\n    A.V && G.h->($A,$C,$G,$T,'say','say',\"Limof: $k $v to C.t\");\n    $lim = $k if !$lim || $lims.>$lim > $lims.>$k;\n}\nif ($lim) {\n    my $it = $lims.>$lim;\n    my $from = 0;\n    if (y.tail) {\n        $from = -1;\n        $it *= -1;\n    }\n    else {\n        $it -= 1;\n    }\n    $lims = $lim; # name\n    $lim = @$M; # limited from\n    @$M = @{$M}[$from .. $it];\n}\n\nA.V = 0;\ny.thi = @$M;\ny.thi || die \"No M: \".ki $C;\n#c & point/seek to things coming in with our surrounds\n\n# if we were placed with enough room\n# let atoms slide up to the top J\n# things saying they're in both places\n#   leads to nice grouping, ref integrity\ny.J = A.3 if Jy.spc > 0.1;\ndelete y.J if y.clos;\nmy $clos = Jy.spc && !y.J;\n#  they can want to be inside too\n#  geo to chain together floating/not atoms\n#  so its like wires over machines\n\n# ml (margin-left)\n# high lum makes tree bends up towards margin\n# like it is open inside, like bet. rummager.\ny.inde = Jy.inde + 0.06 if y.J;\n\n# sliver of attention\nmy $sl = Jy.spc * 0.01;\n$sl = 0.02 if $sl < 0.02;\n# carpenting\ny.n ||= $clos ? 0.3 : Jy.J ? Jy.cv + $sl : 0.1;\ny.u ||= $clos ? 0.4 : Jy.J ? Jy.ov - $sl : 0.9;\n# set width\ny.u = y.n + y.space if defined y.space;\ny.u /= 10 until y.u < 1;\ny.n /= 10 until y.n < 1;\n# corner noted\nif ($lim) {\n    my $s = \"$lim>\".@$M;\n    my $cv = y.tail ? y.n : y.u;\n    # TODO += here blows up zopul:\n    $cv -= 0.002;\n    my $M = A.c.XM = [];\n    m lim=>$cv,$s,'%fs:7,hs:7487,limit:'.$lims;\n}\n# fit in multiple of\nif (my $ert = y.ert) {\n    $ert += y.ert while y.thi > $ert;\n    y.thi = $ert;\n}\ny.space = y.u - y.n;\nmy $outer;\nif (y.res) {\n    $outer = y.space / y.thi;\n    y.space -= $outer;\n}\ny.space *= -1 if y.space < 0;\ny.v.v = y.n; # rolls\ny.v.v += $outer / 2 if $outer; #\n# average size\ny.v.aspace = G&roun,y.space/y.thi;\n# thy -> mu bends out\ny.v.y = $y; # u is shared placevolve meta\nmy $i;\nfor (@$M) {\n    _.y.v = y.v;\n    _.y.i = $i++;\n    _.y.a = G&tugA,a=>2=>$_;\n    _.y.a.L = $A;\n}\n# all ying applies now to M\n# tugging M\n\n #c lum uC shapes curve, wants to be with limn\n # might mean a few lum qualities, make them switchupable\n # supposedly osc can measure itself, hoist geometry\n #    descriptions for ascii art buildings\n"
      sc: 
        acgt: s
        act: 1
        of: L
        z: ~
      t: L
      "y": 
        cv: '0.2'
    - 
      c: 
        s: "die \"Inlum\";\nmy $M = c&M || die \"lum no M\";\nmy $y = C.y;\nmy $um;\n(um.l,um.r) = split ',', $lum;\nfor (grep{defined $um->{$_}} keys %$um) {\n    $um->{$_} =~ /^(?:(\\d+)-)??(?:(\\d)+)(?:-(\\d)+)?$/\n        || die \"notunder: \".wdump 2, $um;\n    $um->{$_} = {i=>$1,um=>$2,o=>$3};\n}\n1 && saybl \"Lum C.t: \". wdump 2, $um;\n\num.l.um ||= 3;\nmy $lumhalvesby = (um.l.um / 2) / (um.r.um || 3);\nmy $i = 0;\nfor (@$M) {\n    _.y.thy = 1 if !defined y.thy;\n    _.y.thy+=um.l.um;\n    $i++;\n    if ($i > um.l.o) {\n        um.l.um -= $lumhalvesby if um.l.um > 0.1;\n    }\n}\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: ylum
        z: ~
      t: lum
      "y": 
        cv: '0.23'
    - 
      c: 
        s: "#local A.V = 2;\nmy $y = C.y;\nmy $M = A.c.M || c&M;\ny.res == 2 && return\n    A.V && G.h->($A,$C,$G,$T,'say','saygr',\"A.1.t fits \".@$M.\" into C.t\");\nmy $res = y.res = A.1.sc.res.>C.t ||= {res=>$res};\nmy $ctv = res.ctv ||= {};\nmy $la; # known from\nmy @news;\nmy $bend = sub {\n    my ($from,$to,@M) = @_;\n    @M = map {\n        _.y.a || die \"has no ya: \".ki$_;\n        _.y.a.c.s eq $_ || die \"ya cs not _: \".ki[_.y.a.c.s,$_];\n        # their a C becomes for cv/spc for real heighting etc\n        _.y.realy = _.y.a.c.s = G&hup,_.y.a.c.s;\n        # takeover original ref:\n        $_\n    } @M;\n    my $nu = G&Ct,[\"Bend$from->$to\",{}];\n    nu.y.n = $from;\n    nu.y.u = $to;\n    nu.y.res = 2; # makes spc/2 away from edges but not M<>ctv\n    nu.c.M = \\@M;\n    nu.c.oM = [];\n    # ^ our ground splices this L's stuff into $M\n    # as it is A.y=A in an M of C\n    G&tugA,L=>4,$nu;\n};\nreturn keys %$ctv &&\n    A.V && G.h->($A,$C,$G,$T,'say','saygr',\"All new refit C.t C.y.res -- \".G&sn)\n    unless grep{ $ctv.>_.t } @$M;\nmy @M;\nfor (@$M) {\n    my $at = $ctv.>_.t;\n    if ($at && !_.c.refit) {\n        A.V && G.h->($A,$C,$G,$T,'say','sayyl',\"Have _.t  -> $at\");\n        if ($la && $at < $la) {\n            # has to opt out for M order via c&refit\n            # la cause may have moved out already\n            A.V && G.h->($A,$C,$G,$T,'say','saybl',\" is from earlier\");\n        }\n        _.y.cv = $at;\n        push @M, $_;\n        if (@news) {\n            # bend @news between $la and $_\n            $la ||= y.n;\n            A.V && G.h->($A,$C,$G,$T,'say','saygr',\"Bend from $la to $at:\\n\".ki \\@news);\n            push @M,\n                $bend->($la,$at,@news);\n            @news = ();\n        }\n        $la = $at;\n    }\n    else {\n        A.V && G.h->($A,$C,$G,$T,'say','saybl',\"New _.t\".(_.c.refit && \" (repo)\"));\n        push @news, $_;\n    }\n}\n$bend->($la,y.u,@news) if @news;\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: yres
        z: ~
      t: refit
      "y": 
        cv: '0.4'
    - 
      c: 
        s: "my $y = C.y;\nmy $total = sum(map{ _.y.thy || 1 } @$M) || 1;\ny.v.muav = @$M / $total;\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: cM
        z: ~
      t: barel
      "y": 
        cv: '0.5'
    - 
      c: 
        s: "my $y = C.y;\ny.mu = defined y.thy ? y.thy : 1;\ny.mu = y.mu * y.v.muav if y.v.muav;\nmy $was = y.v.v;\ny.cv = G&roun,y.v.v if !y.cv;\ny.pcv = G&roun,y.i/y.v.y.thi;\nmy $in = y.v.aspace * y.mu;\ny.v.v += $in;\ny.ov = G&roun,y.v.v;\ny.spc = y.ov - y.cv;\n\nC.sc.yspc = y.spc if C.sc.nspc;\nC.sc.ml = (y.v.y.inde * 40).\"%\" if y.v.y.inde;\n"
      sc: 
        acgt: s
        act: 1
        of: a
        z: ~
      t: many
      "y": 
        cv: '0.6'
    - 
      c: 
        s: "my $y = C.y;\nmy $upt = 0;\ny.spc = 0.1 if y.spc < 0.1;\nmy $fs = y.spc * 20 * 4;\nC&fs = $fs if $fs < 9;\n"
      sc: 
        acgt: s
        act: 1
        of: a
        v: ylum
        z: ~
      t: lum
      "y": 
        cv: '0.7'
    - 
      c: 
        s: "ref $res || return;\nmy $y = C.y;\nmy $M = A.c.M || c&M;\nmy $ctv = res.ctv;\nfor (@$M) {\n    $ctv.>_.t && delete $ctv.>_.t;\n    $ctv.>_.t = _.y.cv || die \"No cv res yet: \".ki$_;\n}\n"
      sc: 
        acgt: s
        act: 1
        of: L
        v: yres
        z: ~
      t: res
      "y": 
        cv: '0.7'
    - 
      c: 
        s: "my $M = A.c.M || c&M || die \"L 8 with no M: \".ki$C;\nmy $y = C.y;\nshift @$M if $M->[0] eq $C;\nmy $J = y.J || A.1;\nA.c.XM && push @$M, @{A.c.XM};\n# resolve any L in M to its many\n@$M = map {\n    my $oM = _.y eq $_ && (_.c.s.c.oM || die\n        \"NoM on inner _.t from C.t: \".ki _.c.s );\n    $oM ? @$oM : $_\n} @$M;\n# stash out many for the above\nc&oM && return push @{c&oM}, @$M;\nif (A.V) {\n    1 && sayyl \"For J.t: \";\n    1 && saygr \"_.t: \".ki _.y for @$M;\n}\nG&A,n=>8=>$J,@$M;\n"
      sc: 
        acgt: s
        act: 1
        of: L
        z: ~
      t: ground
      "y": 
        cv: '0.8'
t: Zpace
"y": 
  cv: '0.9'
